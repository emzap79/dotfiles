# vim:noet
[user]
		name = emzap79
	email = emzap79@gmail.com
[credential]
		helper = cache
[push]
	default = simple
[branch]
	autosetuprebase = always
[color]
	ui = true
	status = auto
	branch = auto
[core]
	abbrev = 5
	editor = vim
	excludesfile = /home/zapata/.gitignore
[merge]
	tool = kdiff3
[auto]
	squash = true
[config]
	autosquash = true
[rebase]
	autosquash = true
[alias]

#	=================================
#	=	 getting started	=
#	=================================
#  create github repo, eg. <dotfiles>. Then follow subsecutive steps
#	=	step 1	= git init .
#	=	step 2	= git add -A . && git commit -m "first commit"
#	=	step 3	= git remote add origin https://github.com/emzap79/<repository>.git
#	=	step 4	= git push -f --set-upstream origin master
#
#	=================================
#	=	 show history		=
#	=================================
#  dig in history what went wrong
	ref	= reflog			# show changes of the HEAD pointer (including all indices)
	sl	= shortlog -nse			# summarizes git log output, each commit grouped by author and title
	lp	= log -p --graph --decorate=short --pretty=medium --stat		# ...shows diffs for entire history
	lpf	= log -p --follow							# ...id + <filename>, show renamings of file as well
	l	= log --graph --abbrev=7 --decorate=short --abbrev-commit --pretty=medium --stat	# show log with added/droped files
	ll	= log --graph --abbrev=7 --decorate=short --abbrev-commit --pretty=medium
	lll	= log --graph --abbrev=7 --decorate=short --oneline --all

#  check current state locally
	st	= status -u								# show tracked and untracked as well
	stn	= status -u no								# don't show untracked stuff
	snn	= status -u no --short							# don't show untracked stuff, no additional information

# currently versioned files at HEAD
	lt	= ls-tree -r --name-only						# ... revision
	ltt	= !git ls-tree HEAD --full-tree -r -t -l --abbrev=4|less		# show object size of blob entries
	ltd	= !git ls-tree HEAD --full-tree -r -t -l -d --abbrev=4|less		# id, folders only
	lts	= !git ls-files --abbrev=4 --stage|less					# show levels of staged files only

#	=================================
#	=	show diffs		=
#	=================================

# show everything related to a SHA1
	sw	= show 				# see the differences introduced by a commit
#	=	# git show [reference]:[filename]
#	=	# # [reference] can be a branch, tag, HEAD or commit ID 
#	=	# # [filename] is the filename including path

# see http://stackoverflow.com/a/8547159/3569509
	d	= diff 				# (...<filename>) diff staged + unstaged against <HEAD>
	ds	= diff --staged			# diff staged against HEAD
	dss	= diff --staged --name-only	# show staged files (name-only)
	dt	= difftool			# check current changes residing in origin/master (= main repository)
						# local changes are shown in red!!!
	dh	= diff ..origin/master		# all changes, including non-commited ones
	dhc	= diff HEAD..origin/master	# against head, includes just local commits
	dhp	= diff HEAD...origin/master	# pure against head, excludes all local changes and commmits

# 'git h' for help, 'git la' to list aliases
# http://stackoverflow.com/a/11613251
#	=================================
#	=	   show help		=
#	=================================
	h	= !git help|more		# (...<git command>)
	ha	= !git help -a|less
	hi	= help -i			# ... yet to find out how to use the 'info' program
	al	= "!grep '\t=' ~/.gitconfig | sed -e 's/=/[0;31m=[0m/g' -e 's/#.*/[0;32m&[0m/g'|less -R"
	rc	= config --get-regexp		# search for custom regexpression
	rcl	= config --list			# query settings of the local repository
	rcg	= config --list --global	# query global settings

#	=================================
#	=	clean & remove		=
#	=================================
	cf	= clean -f			# clean working dir
	cfd	= clean -fdx			# id., <-d> flag to delete new directories, <-x> hidden files
	rmf	= rm -rf			# ...<filename> unversion and delete
	rms	= rm -r --cached		# ...<filename> unversion, but leave in working copy
	rmc	= rm -r --cached .metadata	# remove and apply .gitignore (grmc && grms <filename>)

#	=================================
#	=	commit to project	=
#	=================================
	a	= add -A			# ...<filename> or regexpr
	aa	= add -A .
	ai	= add -i			# add modified contents interactively to the index
						# unchoose
	c	= commit -a			# ...commit.
	cx	= commit -m fixup!		# ...commit changes and discard message later
	cs	= commit -m squash!		# ...commit changes and change message later (rebase -i)
	cm	= commit -am			# ...commit modified and deleted files only + message
	ca	= "!git add -A . && git commit -m" # ...commit modified, deleted and new files
	cam	= commit --amend -c HEAD	# update last commit
	camf	= commit --amend -C HEAD	# update last commit, and use same commit message
	fcam	= commit --amend -C HEAD	# update last commit, and use same commit message

#	=================================
#	=	revert & reset		=
#	=================================
	rv	= revert			# <HEAD> undo all commited stages to the point of <HEAD>
	rs	= reset 			# ... -- <filename> take a single added file off the index again, eg. grs HEAD^ -- <file.txt>
	rsh	= reset --hard			# <HEAD> undos all changes in working copy, cannot be reverted
	rss	= reset --soft			# <HEAD> moves HEAD pointer only to <HEAD>
	cou	= checkout --			# ...<filename> undo unstaged changes in working tree
		# http://stackoverflow.com/a/15404733/3569509
#	=	# git checkout -- <path> doesn't do a hard reset: it replaces the working tree contents with the staged contents.
#	=	# git checkout HEAD -- <path> does a hard reset for a path, replacing both the index and the working tree with the version from the HEAD commit.

#	=================================
#	=	name stuff properly	=
#	=================================
						# tag
	t	= tag				# create annotaded tag: <tag> -m <explanation>
	tl	= tag -n			# show existing tags with messages
	td	= tag -d			# ...<tag name>, delete existing tag name
						# notes
	n	= !git notes list | sed -e 's/\\([a-z0-9]\\{4\\}\\)\\([a-z0-9]*\\)/\\1\\r/g' -e 's/r$/ /g' -e 's/\\(^[a-z0-9]*\\)/ /g'
	nv	= !git notes list | sed -e 's/\\([a-z0-9]\\{7\\}\\)\\([a-z0-9]*\\)/\\1\\r/g' -e 's/r$/ /g' -e 's/\\(^[a-z0-9]*\\)/ /g'
	na	= notes add
	nap	= notes append
	ne	= notes edit
	nr	= notes remove

#	=================================
#	=	contribute		=
#	=================================

#  push & pull
	cl	= clone --progress -v		# -v needs to be set AFTER --progress, else it won't work
						# choose
	f	= fetch
	p	= !git rebase -i --autosquash && git push origin
	pp	= push origin			# push origin <branch>
	pl	= pull --rebase			# fetch followed by rebase
	pu	= push -u origin		# push and add upstream reference <branch>
	pf	= push origin -f		# overwrite external changes to remote (use with care!!)
	pup	= !git pull && git push origin	# pull and push, not nice but sometimes convenient
	rmrb	= push --delete origin		# ...<branch name> remote branch to be deleted

# handling remote connections
	rem	= remote -v			# (...<lookup man page for this>) withough argument
#		=				# just shows remotes, else does all kinds of funny stuff
	rl	= remote show			# ... <label for remote> show info for specific remote
	ra	= remote add			# ... <label for remote> <URL to remote>
	rrm	= remote rm			# ... <label of remote to be deleted>
	rr	= remote rename			# ... <label of remote to be renamed> <label of new remote>
	rp	= remote prune origin		# remove all stale remote-tracking branches under <origin>
	rpu	= remote update --prune		# remove all local branches which are not in the remote anymore

#  use svn if you have to
	sco	= svn clone			# ...<svn repository url>
	sci	= svn dcommit			# push locally committed changes to svn
	scu	= svn rebase			#	 = svn update

						# FIXME: and god told, the day will come, when this mess below will be fixed properly! and so it shall be...

						# best is to use autoclrf 'false'. others have a slight chance of corrupting binary data files mistaken as text... bah WTF, live hard!
	autoclrf	= input			# on mac and linux, on win it's 'true'... i hope so!

#	=================================
#	=	stashes & branches	=
#	=================================

#  = stashes
	sh	= stash				# tempsave stuff without branching or committing
	shl	= stash list			# see the list of available stashes
	shp	= stash pop			# re-apply the stashed changes and delete the stash from the list of stashes
	sha	= stash apply			# you can use the ID to apply a stash, eg stash@{0}
	shd	= stash drop			# remove a stashed change without applying it

#  branches
	b	= branch			# (...<branch name>), without argument show existing ones
	bl	= branch -av			# show branches + SHA1 tags
	bd	= branch --delete		# ...<branch name>, remove a branch
	bs	= ls-remote			# <origin> lists branches and tags in the remote repository called origin
	br	= branch -r			# show --'remote tracking branches'
	brd	= branch -d -r			# origin/<branch>, delete remote tracking branch
	brs	= remote show origin		# show all remote and tracking branches for origin

##  checkout branches
	co	= checkout			# ...<branch name> checkout branch
	cob	= checkout -b			# ...<branch name> create + checkout branch

##  show branches
	sb	= show-branch --color=always -a --more=10		# all full
	sbl	= show-branch --color=always --reflog=10 --no-name	# local
	sbf	= show-branch --color=always --reflog=10		# local full

#  merges
	m	= merge --no-ff			# ...<branch name>
	rb	= rebase			# ...<branch name>
	rbi	= rebase -i --autosquash	# ...<branch name>
	rbc	= rebase --continue
	rbs	= rebase --skip
	rba	= rebase --abort
	rbe	= rebase --edit-todo

# ===============
# AUTOCLRF HOWTO:
# ===============
# 1. new project from scratch, let git handle things: <minimal risk>
# ------------------------------------------------------------------
# As long as there are no created files yet, before starting to
# develop developers set things OS dependent:
#
# -- on Mac:
# autoclrf = input
# -- on Linux:
# autoclrf = input
# -- on Windows:
# autoclrf = true
#
# That way git handles line endings automatically. This works almost
# always, except when git accidentally treats binary files as text
# files and converts them, too. Then it might bite your ass. Of
# course this can only happen if you have binary files present in
# your repository. ;)
# ==================================================================
# 2. new project from scratch, handle things yourself: <no risk>
# ------------------------------------------------------------------
# If every developer handles the line ending stuff herself/himself,
# use this:
#
# -- on every type of OS:
# autoclrf  = false
#
# All developers must set their development environments to create
# files in the same line endings  all others use, and not safe files
# differently after editing. (I.e. all use 'unix' line endings.
# Only LF endings, not CR, not CRLF.) Of course, all need to use
# the same encoding, too. :)
# With things set this way git won't interfere at all, and
# responsibility is with the devs themselves.
#==================================================================
# 3. existing project: <risk depends on given surroundings>
# ------------------------------------------------------------------
#
# in a mixed environment, rethink if you use 'input' ... helps.
# if things are fucked, use almighty vim scripts to fix things...
#
# there also exist .gitattributes files now... how do they relate?

# vim: ts=8:
