# vim:fdm=marker:ft=sh:set isk=-.

# in case you need to unbind one of the
# following aliases, do: unbind -a < expr >
#
# man test                          # manpage with test-operators
# export aliases="~/.bash/aliases"  # paste into ~/.bashrc

export chall=reformat_surnames

# basic aliases                                                                  {{{1
# ls                                                                             {{{2

# on linux:
# https://github.com/sjas/.dotfiles
if [[ `uname` ==  Linux ]]; then
    export LS1='--color=always'
    # on mac:
elif [[ `uname` ==  Darwin* ]]; then
    export LS1='-G'
    # on windows/cygwin/mingw/other
else
    export LS1='--color=auto'
fi
export LS2='-hF'
export LS3='--time-style=long-iso'

alias ls='ls $LS1 $LS2 $LS3 -B '
alias la='ls $LS1 $LS2 $LS3 -A '       # also lists hidden files
alias l='ls $LS1 $LS2 $LS3 -lA'        # listing view of all files
alias ll='ls $LS1 $LS2 $LS3 -lB'       # like before, but w/o hidden files
alias lst='ls $LS1 $LS2 $LS3 -lrtcA'   # show last edited files in folder
alias lsg="ls|sort|grep -i"
alias lp=fun_absolute_path             # show fullpathname to file

# list filename of recently added files
# how to escape single quotes: http://stackoverflow.com/a/1250279/1483760
alias lst_today=fun_ffs

# only directories
alias lsd='ls $LS1 $LS2 $LS3 -d -- */ | sed "s/\/$//g"'

# for very long listings use less
alias vls='ls $LS1 $LS2 $LS3 -B  | grep ".*" | less -R'
alias vla='ls $LS1 $LS2 $LS3 -A  | grep ".*" | less -R'      # also lists hidden files
alias vl='ls $LS1 $LS2 $LS3 -Al | grep ".*" | less -R'      # list of files
alias vll='ls $LS1 $LS2 $LS3 -Bl | grep ".*" | less -R'      # like before, but lists hidden files, too

# chmod                                                                          {{{2

alias chm="chmod 755"

# bropages                                                                       {{{2

# automatically thanks the first 5 brohelps in a
# bropage after exiting bro in a bash shell
alias broty="for i in {1..5}; do bro thanks $i; done"

# du                                                                             {{{2

# show size of current folder/subfolder/dotfiles
# http://unix.stackexchange.com/a/53738
alias du='du -h'
alias du_file='find . -type f  | xargs du -h | sort -n'
alias du_dir='du --si -d1 | sort -h'
alias duf=fun_dus

# cd                                                                             {{{2

# basic                                                                          {{{3
alias cd=fun_cd
alias cdd=fun_fd
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias .....='cd ../../../..'
alias ......='cd ../../../../..'

# dotfiles                                                                       {{{3
alias cddp="cd $HOME/.devilspie"
alias cdvim="cd $HOME/.vim"
alias cdvip="cd $HOME/.vimperator"
alias cdnb="cd $HOME/.newsbeuter"
alias cdpg="cd $HOME/.podget"
alias cdmutt="cd $HOME/.mutt"
alias cdmus="cd $HOME/Musik"
alias cdcm="cd $HOME/.cmus"
alias cdkrita="cd $HOME/.kde/share/kde4/apps/krita"
alias cdlog="cd $HOME/.logfiles"
alias cdgc="cd $HOME/.gitclones"
alias cdsr="cd $HOME/.mozilla/firefox/cxt887c7.default/searchplugins"   # Mozilla Searchplugins

# folders related to uni                                                         {{{3
alias cduni="cd $UNI"
alias cdsem="cd $UNI/$SEM"
alias cdba="cd $UNI/$SEM/BAArbeit/main"
alias cdbar="cd $UNI/$SEM/BAArbeit/main/sections/rcode"
alias cdr="cd $UNI/$SEM/R"
alias cdim="cd $UNI/$SEM/IM"
alias cduc1="cd $UNI/$SEM/UC1"
alias cduc6="cd $UNI/$SEM/UC6"
alias cdblb="cd $UNI/$SEM/Bloomberg"

# permanent folders                                                              {{{3
alias cdatt="cd $HOME/tmp/attachments"
alias cdflor="cd $HOME/tmp/baarbeit/florina"
alias cdbst="cd $HOME/texmf/bibtex/bst/emzap"
alias cddl="cd $HOME/Downloads"
alias cddf="cd $HOME/dotfiles"
alias cdebay="cd $HOME/tmp/ebay"
alias cdmails="cd $HOME/mails/Inbox"
alias cdmnt="cd $HOME/mnt"
alias cdbild="cd $HOME/Bilder"
alias cdvid="cd $HOME/Videos"
alias cdpodc="cd $HOME/Podcasts"
alias cdtmp="cd $HOME/tmp"
alias cdxime="cd $HOME/Xime"
alias cdb="cd $HOME/bin"

# temporary mounted folders                                                      {{{3
alias cdquito="cd ~/.gvfs/smb-share\:server\=quito-pc\,share\=users/Xime"
alias cdarb="cd $DOK/Arbeitsordner"
alias cdbank="cd $DOK/Banking"
alias cdbew="cd $DOK/Bewerbungen"
alias cddok="cd $DOK"
alias cdkolp="cd $DOK/Kolping"
alias cdr="cd $DOK/R"
alias cdlatex="cd $DOK/LaTeX"
alias cdlinux="cd $DOK/Linux"
alias cdpers="cd $DOK/PersDok"
alias cdfin="cd $DOK/Finance"
alias cdpeug="cd $DOK/Gebrauchtwagen"
alias cdqrc="cd $DOK/Linux/QRCs"
alias cdrechn="cd $DOK/Rechnungen"
alias cdrez="cd $DOK/Rezepte/EigeneRezepte"
alias cdsonst="cd $DOK/Sonstiges"
alias cdvers="cd $DOK/Versicherungen"
alias cdvg="cd $HOME/Dokumente/Linux/Vim/vimgolf"
alias cdvol="cd $VOL"
alias cddb="cd $HOME/Cloudfolder/Dropbox"

# usb & other media                                                              {{{3
alias cdtosh="cd /media/zapata/Musica"
alias cdusb="cd /media/zapata/ES02224159"
alias cdusbsem="cd /media/zapata/ES02224159/$SEM"
alias cdwdp="cd /media/zapata/WDP"

# mkdir                                                                          {{{2

alias cdmkdir=fun_mkcd

alias mkdir='mkdir -p'
alias mkmailb='mkdir ./{cur,new,tmp}'
alias mkcd=fun_mkcd     # mkdir -p $1 && cd $1
alias mkcp=fun_mkcp
alias mkmv=fun_mkmv
alias mkdt=fun_mkdt

# history                                                                        {{{2

alias c='clear'
alias h='history 100'
# alias hs="history"
alias hs="history | fzf +s"
alias hsg="history|grep -i"

# sed                                                                            {{{2

alias convbib="sed -i 's/^ *owner=.*/   owner={Jonas Petong},/g;s/{{/{/g;s/}}/}/g'"
alias convuml="sed -i 's/Ã¶/ö/g;s/Ã¼/ü/g;s/ÃŸ/ß/g;s/Ã¤/ä/g;s/Ã„/Ä/g;s/Ãœ/Ü/g;s/Ã–/Ö/g;s/Ã©/Ë/g'"
alias convdir="sed -i 's/\([\&\)\(]\)/\\\1/g;s/\(.*\)\/.*/ \1/'"
alias sed="perl -pe"    # http://stackoverflow.com/a/1103177

# grep                                                                           {{{2

alias vgrep='fun_grepv'
alias grep='grep --color=always -i -n'
alias grepc=fun_grepc

# Performs a case-insensitive (-i) recursive search (-r) and prints not only the
# match, but also the filename (-H) in which the match was found and
# corresponding line number (-n). All this is highlighted with different colours.
#
# http://feedproxy.google.com/~r/Command-line-fu/~3/BUhOEkv8PXU/recursive-search-with-grep
alias grep_all='grep -nrHi'

# find & locate                                                                  {{{2

# locate
alias locate="locate -i"
alias lc="locate -i"
alias ud="sudo updatedb"
alias updatedb="sudo updatedb"
alias lcd=fun_locate_dir
alias lcf=fun_locate_dat

# find
alias ff=fun_ff
alias fff='find . -depth 0 -type f'
alias ffd='find . -depth 0 -type d'
alias ffg='find -type f -regextype egrep -iregex'
alias ffi="find -type f -exec file {} \; | grep -o -P '^.+: \w+ image'"     # find all images

# aliases related to music
alias dupetrack1="find . -type f | sed -e 's/^\(.*\)\.\([[:digit:]]\)\.\(mp3\|ogg\|flac\)/\1/g;s/^\(.*\)\.\(mp3\|ogg\|flac\)/\1/g' | uniq -d"
alias dupetrack2="find . -type f -regextype sed -iregex '^.*\.[[:digit:]]\.\(mp3\|flac\|ogg\)'"

# remove                                                                         {{{2

alias chmrm=fun_chmod_remove

# sudos
alias blkid="sudo blkid"
alias vimgolf="sudo vimgolf"
alias clamsc="sudo /usr/bin/clamscan --scan-swf=no -r / > /tmp/clamav.log 2>&1" # http://bit.ly/1zrZw4s
alias clamscan="sudo /usr/bin/clamscan --scan-swf=no -ri"   # <directory> to scan specific path

# bash alias completion                                    -*- shell-script -*-  {{{2

_alias()
{
    local cur prev words cword
    _init_completion || return

    case ${words[@]} in
        *[^=])
            COMPREPLY=( $( compgen -A alias -- "$cur" ) )
            ;;
        *=)
            COMPREPLY=( "$( alias ${cur%=} 2>/dev/null | sed \
                -e 's|^alias '"$cur"'\(.*\)$|\1|' )" )
            ;;
    esac
} &&
complete -F _alias -o nospace alias

# ex: ts=4 sw=4 et filetype=sh
# command_not_found                                                              {{{2

# this function lets you call predefined snippet-commands from the CLI, which
# makes spaces after a command obsolete. no need to explicitly define an alias
# for each command in your bashrc any more. This means you may call any program
# while the function automatically parses all trailing characters as arguments:

# `fflinux` finds any file in the current directory (plus childs) by executing
# `find . -type f -iname "*linux*"` etc.

# http://superuser.com/a/756845/322005
command_not_found_handle() {
    case $1 in
        rip2*) mkdir -p "$2"
            pacpl --rip all --to "${1#rip2}" --outdir="$2"
            return 0
            ;;
        xlsx2*) ssconvert -S "$2" "${2%%.*}"."${1#xlsx2}"
            return 0
            ;;
        xls2*) ssconvert -S "$2" "${2%%.*}"."${1#xls2}"
            return 0
            ;;
        xml2*) ssconvert -S "$2" "${2%%.*}"."${1#xml2}"
            return 0
            ;;
        pd2*) pandoc "$2" -o "${2%%.*}"."${1#pd2}"
            return 0
            ;;
        *2jpg) # work to be done!
            for i in "$(ls *.${1%2jpg})"; do echo "$(i%%.*)"; done
            return 0
            ;;
        img2*) convert "$2" "${2%%.*}"."${1#img2}"
            return 0
            ;;
        show*) display vid:*."${1#show}"
            return 0
            ;;
        m*) make ${1#m}
            return 0
            ;;
        cd*) # not working, don't know why
            cd "./${1#cd}"
            return 0
            ;;
        v*) vim ${2%%.*}.${1#v}
            return 0
            ;;
        g*) git ${1#g} "${@:2}"
            return 0
            ;;
    esac

  # If nothing else works, just do what bash would have done
  printf "%s: command not found\n" "$1" >&2
  return 127
}

# source bashrc                                                                  {{{2
alias sra="source $HOME/.bash/aliases"
alias srb="source $HOME/.bashrc"

# programs                                                                       {{{1
# xclip                                                                          {{{2
alias xc="xclip -sel c"     # copy to clipboard
alias xv="xclip -sel o"     # paste from clipboard
alias pwc="pwd | xclip -i"
alias pwp=fun_pwd_change

# vim/neovim                                                                     {{{2

nvim='nvim -u ~/.vimrc'

# vimgolf
# http://stackoverflow.com/a/8931728/3569509
if [[ -e /home/${USER}/Dokumente ]]; then
    alias vgolf='cd $VGOLF && /bin/bash $VGOLF/vimGolf.sh'
fi

# encrypted password file
alias ve=fun_vim_passw

# bashrc & aliases
alias va="vim ~/.bash/aliases; source ~/.bashrc ~/.bash/aliases"
alias vp="vim ~/.podget/serverlist"
alias vb="vim ~/.bashrc; source ~/.bashrc"
alias vg="vim ~/.gitconfig"
alias vt="vim ~/.tmux.conf"
alias vrc="vim ~/.vimrc"
alias vn="vim ~/.newsbeuter/urls"
alias vip="vim ~/.vimperatorrc"
alias vtmp="vim ~/bin/tmplAte.sh"
alias tvim="tvim"

# open vim sessions
alias v=fun_vim  # 'vv tex' will open /etc/foo.tex in vim
alias vf=fun_vim_find   # 'vf tex' will open every tex-file in subdirectory as buffer
alias vi="vim -c 'startinsert'"
alias vu="vim -u NONE"
alias vs="vim -S Session.vim"
alias vv="echo "" > /tmp/foo.bar; vim -c startinsert /tmp/foo.bar"
alias vmd="vim /tmp/foo.md"

# clean working files
alias vcl=fun_clean
alias cln=fun_clean
alias swpign=fun_swap

# latex                                                                          {{{2

# alias egoek="evince $UNI/$SEM/GOEK/klausur.pdf $UNI/$SEM/GOEK/WS1314*.pdf $UNI/$SEM/GOEK/WS1112MikroII_Mitschrift.pdf $UNI/$SEM/GOEK/SS11MikroI_Mitschrift.pdf &"

# compile and clean latex related files
alias ltmk="latexmk -pvc"
alias ltpdfl="pdflatex"
alias ltcl="rm -f *.aux *.toc *.bbl *.idx *.ilg *.ind *.log *.toc *.blg *.out *.glg *.glo *.gls *.ist *.maf *.mtc *.gz *.backup *.lot *.lof *.fls"
alias ltsw=fun_latex_sweave
alias ltrd=fun_latex_rd

# latex symbols
if [[ -e /home/${USER}/Dokumente ]]; then
    alias esymb="evince $DOK/LaTeX/docLatex_Sonderzeichen.pdf &"
fi

# pdf                                                                            {{{2

alias pdfbar="pdftk *.pdf cat output bar.pdf; evince bar.pdf; rm -v bar.pdf"
alias pdfgrayscale="gs -sOutputFile=grayscale.pdf -sDEVICE=pdfwrite \
    -sCompatibilityLevel=1.5 -dProcessColorModel=/DeviceGray \
    -sColorConversionStrategy=Gray -dNOPAUSE -dBATCH"
alias pdfgs="pdfgrayscale"
alias pdfresize="/bin/bash $HOME/bin/pdfResize.sh"
alias pdfsplit="/bin/bash $HOME/bin/pdfPagesToParts.sh"
alias pdfimg=fun_pdf_image_extract
alias pdf=fun_pdf    # open default pdf-reader
alias pdfuni='cat pdfs.txt | while read i; do evince $i; done &'

# latex                                                                          {{{2

alias md="make read"
alias ma="make all"
alias mr="make r"
alias mm="make matlab"
alias mg="make git"
alias mcli="make cli"
alias mt="make tmux"
alias mtx="make tex"
alias ml="make latex"
alias mvi="make vim"
# alias mvip="$QRC/make vimp"
alias mvip="make vimpr"
alias mmc="make mc"
alias mw=fun_loop_pdflatex

# mutt, newsbeuter                                                               {{{2

alias muttt='pkill fetchmail; fetchmail -v --ssl; mutt'
alias mb=fun_muttbeuter
alias nb='pkill newsbeuter; newsbeuter'
# alias mutt='/usr/bin/mutt -y'

# beet                                                                           {{{2

alias bc="bc -l"
alias bt='ls "$VOL/$mus"; du -h -d0 "$VOL/$mus"; beet ls; head -n 2 ~/.logfiles/beets.list'
alias btls='ls "$VOL/$(ls -tcr $VOL | grep MSK | tail -n 1)"'
alias btmv='beet mv -d "$VOL/$(ls $VOL/ | grep MSK | sort | tail -n 1)"; yes y | beet rm; killall beet; killall beet'

# redshift                                                                       {{{2

alias redsh="redshift -l 51.4:7.2 -t 6000:4500 %u"

# vlc                                                                            {{{2

# http://linuxundich.de/ubuntu/den-live-stream-der-ard-unter-linux-mit-vlc-oder-mplayer-ansehen/
alias tvard='vlc rtsp://daserste.edges.wowza.gl-systemhaus.de/live/mp4:daserste_int_1600'
alias tvzdf='vlc rtsp://3gp-livestreaming1.zdf.de/liveedge2/de10_v1_710.sdp'
alias tvzdfneo='vlc rtsp://3gp-livestreaming1.zdf.de/liveedge2/de09_v1_710.sdp'
alias tvzdfkultur='vlc rtsp://3gp-livestreaming1.zdf.de/liveedge2/de07_v1_710.sdp'
alias tvzdfinfo='vlc rtsp://3gp-livestreaming1.zdf.de/liveedge2/de08_v1_710.sdp'

# youtube                                                                        {{{2

alias yt-dl="youtube-dl -x --audio-format mp3"
alias yt-mps="mpsyt"
alias yt-vlc-ascii="vlc -V aa "
alias yt-vlc-novideo="cvlc -V novideo "
alias yt-mplayer=fun_youtbmp
alias yt="mpsyt /"
alias pyt=fun_yt_view

# mplayer                                                                        {{{2

alias mrecord='mplayer -dumpstream -dumpfile /tmp/stream.asf' # prepend 'timeout 300 mplayer ...' for 5 minute long streaming
alias mpvh="mpv --list-options|less"
alias mselfie="mplayer -vo png -frames 1 tv:// -tv width=1280:height=720" # Take a single 1280x720 picture of your TV input, which is often your webcam
alias mstream=fun_mplayer_stop_stream

# This command will semi-randomly permute your list of MP3s, then pick the first 100 of
# the random list, then pass those to mpg123 or mpv. # http://stackoverflow.com/a/1047790
alias randomplay="find -regextype egrep -iregex '^.*(mp3|flac)' | sort --random-sort| head -n 100|xargs -d '\n' mpv"
alias randomplaylist="find -regextype egrep -iregex '^.*(mp3|flac)' | sort --random-sort| head -n 100 > ./playlist.pl"
alias randomplaytrack="find -regextype egrep -iregex '^.*(mp3|flac)' | sort --random-sort | xargs  mpv"
alias playpl="cat $HOME/Musik/playlist.pl | xargs -d '\n' mplayer"

# R                                                                              {{{2
alias stocks="Rscript $DOK/Finance/scrYahoo.r"

# fzf - fuzzyfinder                                                              {{{2

alias fe=fun_fe
alias fd=fun_fd
alias fh=fun_fh
alias fkill=fun_fkill

# short commands                                                                 {{{1

# some of it taken from https://github.com/sjas/.dotfiles

alias t='tail -n200'
alias h='head -n20'
alias d='dirs -v'
alias wclive="watch -n10 --no-title \"w3m http://www.livescore.com/ |awk '/live [0-9H]+[^ ]/,/red cards/'\""  # liveticker for worldcup
alias pk="pkill"
alias pd="pushd ."
alias pp="popd"
# alias rddate='date -d "$((RANDOM%1+2014))-$((RANDOM%12+1))-$((RANDOM%15+1)) $((RANDOM%23+1)):$((RANDOM%59+1)):$((RANDOM%59+1))" "+%d-%m-%Y %H:%M:%S"'
alias rddate='date -d "$((RANDOM%1+2014))-9-$((RANDOM%15+1)) $((RANDOM%23+1)):$((RANDOM%59+1)):$((RANDOM%59+1))" "+%d-%m-%Y %H:%M:%S"'
alias makecoffee='printf "\xE2\x98\x95\n"'
alias poweroff='sudo poweroff'
alias rmf="rm -rf"
alias rmfa="rm -rf *"
alias rmdupes="ls | egrep  '\([[:digit:]]\)' | xargs -i rm -v '{}'"
alias info='info --vi-keys'
alias pwgen='pwgen -cn 12'
alias top='top -n2'
alias echon="echo -n"
alias pss=fun_pss
alias calc=fun_calc
alias extr=fun_extract
alias clock="watch -t -n 1 date +%T"
alias mousereset="sudo rmmod psmouse; sudo modprobe psmouse"
alias pandoc='/home/zapata/.cabal/bin/pandoc'
alias quitord="rdesktop -uXime -dquito-pc 192.168.2.100 -z -P -xl -g 1024x768 -k de"
alias unlckkeyr="sudo /usr/bin/gnome-keyring-daemon --start --components=gpg,pkcs11,secrets,ssh"
alias html2pdf="for i in *.html; do wkhtmltopdf $i $(basename $i .html).pdf; done"
alias img2pdf=fun_conv_img_to_pdf
alias architecture="echo $(lsb_release -sri | tr '\n' ' ') && echo $(gnome-shell --version) && uname -srm"

# miscellanious                                                                  {{{1

# dictionaries                                                                   {{{2
# http://www.w3schools.com/tags/ref_language_codes.asp
# tr    # turkish
# en    # english
# de    # german
# es    # spanish

# https://github.com/soimort/google-translate-cli
# alias trs=fun_translate   # google translator
alias trs="trans -b"   # google translator
alias ot=fun_open_thesaurus
alias lang="less /home/zapata/.dictionaries/language_iso.txt"

# alerts                                                                         {{{2

# Add an "alert" alias for long running commands.
# http://askubuntu.com/questions/339499/bash-taking-a-lot-of-time-to-load
# Use like so: sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal ||\
    echo error)" "$(history|tail -n1|sed -e \
    '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# play sound every 40 seconds
alias exerc=fun_exerc

# birthday                                                                       {{{2

alias bday="cat $HOME/.birthdays | grep -i"

# sudo commands                                                                  {{{2

alias reboot='sudo reboot'
alias halt='sudo halt'
alias shutdown='sudo shutdown'
alias dpkg='sudo dpkg'

# do sudo, or sudo the last command if no argument given
# http://serverfault.com/a/3847
s() {
    if [[ $# == 0 ]]; then
    	sudo $(history -p '!!')
    else
    	sudo "$@"
    fi
}

# set wallpaper                                                                  {{{2

alias wallpaper=fun_set_wallp

# gnome settings                                                                 {{{2

alias gnomeapps=fun_gnome

# system & internet                                                              {{{1

# hibernate/suspend
# http://askubuntu.com/questions/1792/how-can-i-suspend-hibernate-from-command-line
alias susp='sudo bash -c "sleep 1h; pm-suspend"'

# journal                                                                        {{{2

alias jrn="less /var/log/syslog"
alias shwlg="find /var/log -iregex '.*[^\.][^0-9]+$' -not -iregex '.*gz$' 2> /dev/null | xargs tail -n0 -f | ccze -A"  # http://bit.ly/1oK5eNz

# internet related                                                               {{{1
# ssh                                                                            {{{2

alias uoek="rsync --progress -auve ssh --iconv=UTF-8,ISO8859-1 --exclude '^.' --exclude '*~' --delete $UNI/$SEM/CompOek/ sdjopeto@student.uni-due.de:public_html/CompOek"
alias usync="/bin/bash $HOME/bin/cronSyncSsh"
alias cruzer="$HOME/bin/cronSyncSsh cruzer"
alias backup="/bin/bash $HOME/bin/cronBackup start"
alias sshkey="ssh-keygen -t rsa -C" # "your_email@example.com"
alias scpuni="scp -r sdjopeto@student.uni-due.de:public_html"   # http://wiki.ubuntuusers.de/SSH#scp

# git                                                                            {{{2

# few git aliases which are not getting called by 'fun_git'
alias gst="g st"    # originally mapped to GNU Smalltalk
alias gcl="g cl"
alias gaa="g aa"

alias grmign="grmc && gca 'remove stashed, ignored files'"  # http://manofhustle.com/2014/05/11/remove-files-from-git-addingupdating-gitignore/
alias gig=fun_gitignore
# alias grema="g rema"

# function commands
alias gdf="$HOME/bin/cronGithub backup"
alias gi=fun_gitinfo  #gitinfo
alias gitremote=fun_gitrem
alias gc=fun_gitcommit
alias gca=fun_gitcommitall
alias gstats="fun_gitstats | less"
alias ignore=fun_ignore
alias gcommit=fun_gitcommit
alias gcommitall=fun_gitcommitall
alias gfastpush=fun_gitfastpush
alias ginfo=fun_gitinfo
alias gbt=fun_git_set_tracking_information

# curl                                                                           {{{2

alias urlexpd=fun_expandurl
alias urlshrt="/bin/bash $HOME/bin/urlShortener.sh"

# aptitude                                                                       {{{2

alias inst="sudo apt-get install -y"
alias agi='sudo apt-get install -y'
alias acs='apt-cache search'
alias agu='sudo apt-get update'
alias apt-get='sudo apt-get'
alias pip='sudo pip'
alias pip3='sudo pip3'
alias yum='sudo yum'
alias pip='sudo pip'
alias upgr="/bin/bash ~/bin/upgrSoftw.sh && /usr/bin/python ~/bin/upgrPipPackages.py"

# vpnc                                                                           {{{2

alias vpnc="sudo vpnc /etc/vpnc/default.conf"
alias vpnd="sudo vpnc-disconnect"
alias openvpn="sudo openvpn"
alias vpnc-connect="sudo vpnc-connect"
alias vpnc-disconnect="sudo vpnc-disconnect"

# connect to dormitory eckenbergstr
# http://www.gigaspeedsurfer.de/dokuwiki/support/internet/linux/open
alias ovpn='sudo openvpn --config login.conf'

# ip- & mac adresse                                                              {{{2

alias ips=fun_show_ip       # IP-Adresse and more

##########################
#  under construction!!  #
##########################
alias ipsum=fun_summary_ip  # summarize a list of IP addresses, verifying IP address and giving counts for each IP found
##########################
##########################

alias dnsfree=fun_time_DNS  # Funktion um den schnellsten freien DNS Server zu finden
alias mac="netstat -ei"     # Mit dem Befehl "netstat -ei" erhält man die
                            # Übersicht über die Netzwerkkarten. Im Normalfall
                            # hat die primäre Netzwerkkarte die Bezeichnung
                            # "eth0" (Hardware-Adresse = MAC Adresse)

# wlan, ethernet etc                                                             {{{2
# check available wlan-ports
alias chkwlan="nm-tool | grep Strength | egrep -v '(WEP|WPA)' | sed 's/^ *//g' \
    | sort -t ',' -k 5'"

# check if ethernet wire is plugged in
# http://stackoverflow.com/a/808599/1483760
alias chketh0='grep "" /sys/class/net/eth0/* | grep carrier'
# tmux                                                                           {{{2

# Change the TERM environment variable (to get 256 colors) and make Vim
# connecting to X Server even if running in a terminal emulator (to get
# dynamic update of syntax highlight and Object Browser):
if [ "x$DISPLAY" != "x" ]
then
    if [ "screen" = "$TERM" ]
    then
        export TERM=screen-256color
    else
        export TERM=xterm-256color
    fi
    alias vim='vim --servername VIM'
    if [ "x$TERM" == "xxterm" ] || [ "x$TERM" == "xxterm-256color" ]
    then
        function vimt(){ tmux -2 new-session "TERM=screen-256color vim --servername VIM $@" ; }
    else
        function vimt(){ tmux new-session "vim --servername VIM $@" ; }
    fi
else
    if [ "x$TERM" == "xxterm" ] || [ "x$TERM" == "xxterm-256color" ]
    then
        function vimt(){ tmux -2 new-session "TERM=screen-256color vim $@" ; }
    else
        function vimt(){ tmux new-session "vim $@" ; }
    fi
        git add -A .
fi

# sources tmux-plugin
if [[ -f "/home/${USER}/.vim/bundle/tmux-config/tmux-autwrite/autowrite-vim.sh" ]]; then
    # enable VIM autosaving
    # https://github.com/pivotal/tmux-config
    source ~/.vim/bundle/tmux-config/tmux-autowrite/autowrite-vim.sh
fi

# functions                                                                      {{{1

# gitfunctions                                                                   {{{2

# gitinfo                                                                        {{{3

fun_gitinfo() {
    if [ -n "$(git symbolic-ref HEAD 2> /dev/null)" ]; then
        echo "Git Repository Overview"
        echo "-----------------------"
        echo
        # List all remotes
        for remote in $(git remote show); do
            echo $remote:
            git remote show $remote
            echo
        done
        # Show status of working repo
        echo "Status:"
        if [ -n "$(git status -s 2> /dev/null)" ]; then
            git status -s
        else
            echo "Working directory is clean"
        fi
        # Print 5 most recent logs
        echo
        echo "Log:"
        git log -5 --oneline
        echo
    else
        echo `pwd` "is not a Git repository"
    fi
}

# gitstats                                                                       {{{3

# Get various Git statistics
# Awesome work from https://github.com/esc/git-stats
# including some modifications from BASH_IT
fun_gitstats() {
    if [ -n "$(git symbolic-ref HEAD 2> /dev/null)" ]; then
        echo "Number of commits per author:"
        git --no-pager shortlog -sn --all
        AUTHORS=$( git shortlog -sn --all | cut -f2 | cut -f1 -d' ')
        LOGOPTS=""
        if [ "$1" == '-w' ]; then
            LOGOPTS="$LOGOPTS -w"
            shift
        fi
        if [ "$1" == '-M' ]; then
            LOGOPTS="$LOGOPTS -M"
            shift
        fi
        if [ "$1" == '-C' ]; then
            LOGOPTS="$LOGOPTS -C --find-copies-harder"
            shift
        fi
        for a in $AUTHORS
        do
            echo '-------------------'
            echo "Statistics for: $a"
            echo -n "Number of files changed: "
            git log $LOGOPTS --all --numstat --format="%n" --author=$a | cut -f3 | sort -iu | wc -l
            echo -n "Number of lines added: "
            git log $LOGOPTS --all --numstat --format="%n" --author=$a | cut -f1 | awk '{s+=$1} END {print s}'
            echo -n "Number of lines deleted: "
            git log $LOGOPTS --all --numstat --format="%n" --author=$a | cut -f2 | awk '{s+=$1} END {print s}'
            echo -n "Number of merges: "
            git log $LOGOPTS --all --merges --author=$a | grep -c '^commit'
        done
    else
        echo `pwd` "is not a Git repository"
    fi
}

# git commit/push/remote                                                         {{{3

# add repo to remote tracking file
fun_gitrem() { git remote add origin ssh://git@github.com/emzap79/$1 ; }

fun_gitcommit(){
    git c "$*"
}

fun_gitcommitall(){
    git ca "$*"
}

fun_gitfastpush(){
    git ca "$*";
    git p
}

fun_git_set_tracking_information() {
    git branch --set-upstream-to=origin/$1 $1
}

# clean tempfiles/swapfiles                                                      {{{3

fun_clean() {
    find . -name "#*#" | xargs -n1 -i rm -v {}
    find . -name "*.sw*" | xargs -n1 -i rm -v {}
    find . -name "*~" | xargs -n1 -i rm -v {}
}

fun_swap() {
    find . -name "#*#"
    find . -name "*.sw*"
    find . -name "*~"
}

# add vim and tmux tempfiles                                                     {{{3

fun_ignore() {
    echo "" > .gitignore
    # echo "*.sw*\n*#\ntags\n*~\n" | cat >> .gitignore
    echo "*.sw*\n*~\n" | cat >> .gitignore
    echo "Session.vim" | cat >> .gitignore
    git add .gitignore
    git commit -am "gitignore ignores vim and tmux tempfiles"
}

# vimfunctions                                                                   {{{2

fun_vim() {
    if [ "$#" -eq 0 ]; then
        vim /tmp/foo.txt
    else
        vim /tmp/foo.$1
    fi
}

fun_vim_find() {

    # open multiple files with given suffix in vim
    # http://blog.sanctum.geek.nz/series/unix-as-ide/
    find -type f -iname "*$1" -exec vim {} +

}

fun_vim_passw() {
    if grep -qs 'ES02224159' /proc/mounts; then
        FILEDIR=$USB/Vim
        device="Cruzer"
    else
        FILEDIR=$HOME/tmp
        device="Festplatte"
    fi
        echo ""
        read -p "Zugriff auf $device [Enter] "
    /usr/bin/vim --noplugin -u $FILEDIR/_vimrc $FILEDIR/_config.pw
}

# create gitignore                                                               {{{3
fun_gitignore() {
curl -L -s https://www.gitignore.io/api/$@ ;
}
# extract & convert                                                              {{{2

# fun: conv images to pdf                                                        {{{3

fun_conv_img_to_pdf() {
    sam2p -e -pdf:2 "${1%%.*}"."${1##*.}" "${1%%.*}".pdf
}

# fun: enroll packed files                                                       {{{3

# http://serverfault.com/a/3842
fun_extract () {
   if [ -f $1 ] ; then
       case $1 in
           *.tar.bz2)   tar xvjf $1    ;;
           *.tar.gz)    tar xvzf $1    ;;
           *.bz2)       bunzip2 $1     ;;
           *.rar)       unrar x $1       ;;
           *.gz)        gunzip $1      ;;
           *.tar)       tar xvf $1     ;;
           *.tbz2)      tar xvjf $1    ;;
           *.tgz)       tar xvzf $1    ;;
           *.zip)       unzip $1       ;;
           *.Z)         uncompress $1  ;;
           *.7z)        7z x $1        ;;
           *)           echo "don't know how to extract '$1'..." ;;
       esac
   else
       echo "'$1' is not a valid file!"
   fi
 }
# comment: Newer versions of tar detect automatically the archive type, so can
# extract all supported formats by just 'tar xvf' (to be tested!!)

# fun: pdf image extract                                                         {{{3

fun_pdf_image_extract(){

    pdfimages -j "$1" "${1%%.*}"."${1##*.}"

}

# fun: create gif from video                                                     {{{3

fun_gif_video(){
    # http://www.ubuntubuzz.com/2015/07/create-gif-from-video-with-ffmpeg-on-linux.html
    ffmpeg -i video_file_name.mp4  -r 5 '/tmp/frames/frame-%03d.jpeg'
    convert frames/frame*.jpeg output.gif
}

# other                                                                          {{{2
# fun: muttbeuter                                                                {{{3
fun_muttbeuter(){
    pkill fetchmail
    if [[ -n $(ps -aef | grep -v grep | grep newsbeuter) ]]; then
        pkill newsbeuter
    fi
    # /usr/bin/fetchmail -v --ssl >> /dev/null 2>&1
    # /usr/bin/newsbeuter -x reload >> /dev/null 2>&1

    /usr/bin/newsbeuter -r
    /usr/bin/mutt
    /usr/bin/podbeuter
}

# fun: locate                                                                    {{{3

# http://serverfault.com/a/365843
fun_locate_dir() {
locate "$@" | xargs file -NF '|' |grep '| directory' | sed 's/| directory//g'
}

# http://serverfault.com/a/365843
fun_locate_dat() {
locate "$@" | xargs file -NF '|' |grep 'data$' | sed 's/|.*data//g'
}

# fun: find                                                                      {{{3

fun_ff() {
    find . -iname "*$**"
}

fun_ffs() {

    find -type f -exec stat --format '%Y :%y %n' "{}" \; |\
    sort -n |\
    cut -d: -f2- |\
    egrep $(date '+%F') |\
    awk '{print $4}' # xargs -n1 -i cp -v "{}" /to/path

    # find -type f -printf "%T+\t%p\n" |\
    #     sort -k1 -n |\
    #     awk '{print $2}'   # tail -nX | xargs -n1 -i cp -v "{}" /to/path

}

# fun: grep                                                                      {{{3

# grep - grep to vim                                                             {{{4

fun_grepv(){
    vim `\grep -irl "$*" .`
}

# grep - grep colored                                                            {{{4
# https://twitter.com/climagic/status/473916085541277696

fun_grepc() {
grep -rail "${@:1:$(($#-1))}" "${!#}"
}

# fun: mkdir                                                                     {{{3

# mkcd - create dir and changedir to it                                          {{{4

fun_mkcd(){
    mkdir -p "$1"
    cd "$1"
}

# mkcp - create dir and insert copied files                                      {{{4

fun_mkcp(){
    # start with creating new directory
    mkdir -p "${!#}"
    # now copy all arguments but pathname (last arg) to new created dir
    # http://stackoverflow.com/questions/1215538/bash-extract-parameters-before-last-parameter-in#comment8487178_1215592
    cp -rv "${@:1:$(($#-1))}" "${!#}"
}

# mkmv - create dir and insert copied files                                      {{{4

fun_mkmv(){
    # start with creating new directory
    mkdir -p "${!#}"
    # now copy all arguments but pathname (last arg) to new created dir
    # http://stackoverflow.com/questions/1215538/bash-extract-parameters-before-last-parameter-in#comment8487178_1215592
    mv -v "${@:1:$(($#-1))}" "${!#}"
}

# mkdt - create dir with current date                                            {{{4

fun_mkdt(){
    # start with creating new directory
    mkdir `date +%Y%m%d`
}

# fun: fuzzy finder for shell                                                    {{{3

# fzf - examples                                                                 {{{4

# https://github.com/junegunn/fzf#useful-examples
# fe [FUZZY PATTERN] - Open the selected file with the default editor
#   - Bypass fuzzy finder if there's only one match (--select-1)
#   - Exit if there's no match (--exit-0)
fun_fe() {
  local file
  file=$(fzf --query="$1" --select-1 --exit-0)
  [ -n "$file" ] && ${EDITOR:-vim} "$file"
}

# fd - cd to selected directory
fun_fd() {
  local dir
  dir=$(find ${1:-*} -path '*/\.*' -prune \
                  -o -type d -print 2> /dev/null | fzf +m) &&
                  fun_cd "$dir"
}

# fh - repeat history
fun_fh() {
  eval $(([ -n "$ZSH_NAME" ] && fc -l 1 || history) | fzf +s | sed 's/ *[0-9]* *//')
}
#))

# fkill - kill process
fun_fkill() {
  ps -ef | sed 1d | fzf -m | awk '{print $2}' | xargs kill -${1:-9}
}

# fzf - tmux                                                                     {{{4
# https://github.com/junegunn/fzf#using-fzf-with-tmux-splits

# This is a helper function that splits the current pane to start the given
# command ($1) and sends its output back to the original pane with any number of
# optional keys (shift; $*).
fzf_tmux_helper() {
  [ -n "$TMUX_PANE" ] || return
  local cmd=$1
  shift
  tmux split-window -p 40 \
    "bash -c \"\$(tmux send-keys -t $TMUX_PANE \"\$(source ~/.fzf.bash; $cmd)\" $*)\""
}

# This is the function we are going to run in the split pane.
# - "find" to list the directories
# - "sed" will escape spaces in the paths.
# - "paste" will join the selected paths into a single line
fzf_tmux_dir() {
  fzf_tmux_helper \
    'find * -path "*/\.*" -prune -o -type d -print 2> /dev/null |
     fzf --multi |
     sed "s/ /\\\\ /g" |
     paste -sd" " -' Space
}

# Bind CTRL-X-CTRL-D to fzf_tmux_dir
bind '"\C-x\C-d": "$(fzf_tmux_dir)\e\C-e"'

# fun: ifconfig - print ip address                                               {{{3

fun_show_ip() {
sudo ifconfig | \grep 'inet' | awk '{print $2 " " $3}'| tac | grep -i adr
}

fun_summary_ip() {
    # http://www.commandlinefu.com/commands/view/14203/summarize-a-list-of-ip-addresses-verifying-ip-address-and-giving-counts-for-each-ip-found
    < $1 awk '{print $1}' | while  read ip ; do verifyIP ${ip} && echo ${ip}; done \
        | awk '{ip_array[$1]++} END { for (ip in ip_array) printf("%5d\t%s\n", ip_array[ip], ip)}' \
        | sort -rn;
}

fun_verify_ip() {
    # http://www.commandlinefu.com/commands/view/14201/function-to-verify-an-ip-address-can-be-used-at-the-shell-prompt-or-in-a-shell-script
    local o='(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])'; [[ $1 =~ ^$o\.$o\.$o\.$o$ ]];
}

fun_time_DNS() {
    # http://www.commandlinefu.com/commands/view/14188/a-function-to-find-the-fastest-free-dns-server
    parallel -j0 --tag dig @{} "$*" ::: 208.67.222.222 208.67.220.220 \
    198.153.192.1 198.153.194.1 156.154.70.1 156.154.71.1 8.8.8.8 8.8.4.4 |
    grep Query | sort -nk5;
}

# fun: pss ssh                                                                   {{{3

# fun: kk <nr. of line to kill from prev. command>
#kk() {
    #sudo kill # Expecting a pid
#}
alias kk='sudo kill'
fun_pss() {
    [[ ! -n ${1} ]] && return; # bail if no argument
    pro="[${1:0:1}]${1:1}"; # process-name –> [p]rocess-name (makes grep better)
    ps axo pid,command | \grep -i ${pro}; # show matching processes
    processids="$(ps axo pid,command | \grep -i ${pro} | awk '{print $1}')"; # get pids
    if [[ "$SHELL" == "/bin/bash" ]]; then
        complete -W "${processids}" kk; # make a completion list for kk, bash
    else
        return;
    fi
}

# fun: pdf - open pdf file                                                       {{{3
fun_pdf() {
    xdg-open ${1%%.*}.pdf
    # if [ "$#" -ne 0 ]; then
    # xdg-open ${1%%.*}.pdf
    # fi
}

# fun: ls - sort content by size                                                 {{{3

fun_dus () {
du --max-depth=0 -k *
sort -rn
awk '{
if($1>=1024*1024) {size=$1/1024/1024; unit="G"}
else if($1>=1024) {size=$1/1024; unit="M"}
else {size=$1; unit="K"}; if(size<10) format="%.1f%s";
else format="%.0f%s"; res=sprintf(format,size,unit); printf "%-8s %s\n",res,$2 }'
}

fun_dsp() {
    # Diskspace der 50 größten Programme
    dpkg-query --show --showformat='${Package;-50}\t${Installed-Size}\n'
    sort -k 2 -n
    grep -v deinstall
    awk '{printf "%.3f MB \t %s\n", $2/(1024), $1}'
    tail -n 300
}

# fun: ls - show absolute path to file                                           {{{3

# fun: http://stackoverflow.com/a/14984302
fun_absolute_path() { echo "$PWD/$1"; }  # alt: readlink -f

# fun: curl - expand shortened urls                                              {{{3

# fun: http://www.commandlinefu.com/commands/view/9515/expand-shortened-urls
fun_expandurl() { curl -sIL $1 | grep ^Location; }

# fun: yt-dl - youtube-videos as ascii video                                     {{{3

# fun: http://annasagrera.com/on-ascii-youtube-and-letting-go/?lang=en
fun_youtbmp() { youtube-dl $1 -o - | mplayer -vo aa -monitorpixelaspect 0.5 -; }

# fun: yt-view - view youtubube videos in command line
fun_yt_view()
{ id=$(curl -s 'https://www.youtube.com/results?search_query='$(echo "$1"|tr '
    ' +)|grep -o '"[[:alnum:]]\{11\}"'|sed -n 3p|cut -b 2-12); youtube-dl -q
    'https://www.youtube.com/watch?v='"$id" -o -|mplayer -vo null /dev/fd/3
    3<&0 </dev/tty; }

# fun: cd - show last edited files                                               {{{3

# fun: http://www.reddit.com/r/linux/comments/1zsn7r/a_bash_alias_i_cannot_function_without/cfwldex
fun_cd() {
    count=10
    dir="${@:-$HOME}"  # ~ isn't expanded when in quotes
    [ -z "${dir}" ] && dir=~
    if ! builtin cd "$dir"
    then
        dir=`compgen -d "${dir}" | head -1`
        if builtin cd "$dir"
        then
            clear
            # pwd
            ls -lrtcA
        fi
    else
        clear
        if [ $(ls -lt | wc -l) -gt $count ]
        then
            echo -e "                                                     ."
            echo -e "                                                     ."
            echo -e "                                                     ."
            # pwd
            ls -lrtcA | tail -n $count
        else
            # pwd
            ls -ltrcA
        fi
    fi
}

# fun: change to dir from clipboard     {{{3
fun_pwd_change(){
    cd $(xclip -o)
}

# fun: latex                                                                     {{{3

fun_latex_sweave() {
    # http://stackoverflow.com/a/4922768/3569509
    R CMD Sweave "${1%%.*}.rnw" && R CMD pdflatex "${1%%.*}.tex" && R CMD bibtex "${1%%.*}.aux" && evince "$1".pdf &
}

fun_latex_sweave() {
    # http://stackoverflow.com/a/3780455/3569509
    R CMD Rd2pdf --title=${1} -o /tmp/foo.pdf *.Rd
}

fun_loop_pdflatex() {

    echo start; make all

    time=0
    while true
    do
        # http://linux.about.com/od/Bash_Scripting_Solutions/a/How-To-Write-Bash-For-Loops.htm
        while [[ $time -gt 0 ]]
        do
            echo $time
            (( time-- ))
            sleep 1
        done
        make loop
        if [ $? = 1 ];then
            /usr/bin/yad --center --on-top --title="pdflatex failed"
            # notify-send "Backup später durchführen!"
            # exit 1
        fi
        if [[ -z "$1" ]]; then time=15; else time=$1; fi
    done

#     while true
#     do
#         for i in {$time...1};
#         do echo $i && sleep 1;
#         done
#         make loop
#         if [ $? = 1 ];then
#             /usr/bin/yad --center --on-top --title="pdflatex failed"
#             # notify-send "Backup später durchführen!"
#             # exit 1
#         fi
#
#     done

}

# fun: translate

fun_translate() {
    translate "{=${1}}" "${*:2}"
}

# fun: open thesaurus                                                            {{{3

fun_open_thesaurus() {
    egrep -i "$@" --color -h $HOME/.dictionaries/openthesaurus.txt | more
}

# fun: chmod + remove                                                            {{{3

fun_chmod_remove() {
    chmod 777 -R "$*" && rm -rv "$*"
}

# fun: calc - easy calculating in bash                                           {{{3

# fun: http://unix.stackexchange.com/a/30486
fun_calc () {
    bc -l <<< "$@"
}

# fun: exerc - play a sound every 40 sec for 12 times
fun_exerc () {
    echo "start exercise in 60 sec"
    play /usr/share/sounds/gnome/default/alerts/bark.ogg repeat 0 gain -n 5  # play file with +5dB
    sleep 55
    i=1
    while [ $i -lt 5 ]
    do sleep 1
        play /usr/share/sounds/gnome/default/alerts/drip.ogg gain -n 5  # play file with +5dB
        i=$((i+1))
    done
    play /usr/share/sounds/gnome/default/alerts/bark.ogg repeat 1 gain -n 5  # play file with +5dB

    i=1
    while [ $i -lt 12 ] # less than 12
    do sleep 40
        play /usr/share/sounds/gnome/default/alerts/drip.ogg repeat 1 gain -n 5
        echo "Schritte $i"
        i=$(( i + 1 ))
    done
    play /usr/share/sounds/gnome/default/alerts/bark.ogg repeat 2 gain -n 5  # play file with +5dB
    sleep 1
    play /usr/share/sounds/gnome/default/alerts/bark.ogg repeat 0 gain -n 5  # play file with +5dB
}

# fun: set wallpaper                                                             {{{3

fun_set_wallp() {
gsettings set org.gnome.desktop.background picture-uri "file:///`pwd`/$1"
}

# fun: gnome settings                                                            {{{3

fun_gnome() {
    gsettings set org.gnome.shell enabled-extensions "['auto-move-windows@gnome-shell-extensions.gcampax.github.com', 'gnome-shell-imgur@ttll.de', 'native-window-placement@gnome-shell-extensions.gcampax.github.com', 'notesearch@rrochet.fr', 'SkypeNotification@chrisss404.gmail.com', 'system-monitor@paradoxxx.zero.gmail.com', 'user-theme@gnome-shell-extensions.gcampax.github.com', 'weather-extension@xeked.com', 'windowoverlay-icons@sustmidown.centrum.cz', 'workspace-indicator@gnome-shell-extensions.gcampax.github.com']"
}

### Other Commands
# watch -n 5 <command>  # exec command periodically every 5 seconds
