global !p
import vim
# Tests for the existence of a variable declared by Vim's filetype detection
# suggesting the type of shell script of the current file
def testShell(scope, shell):
 return vim.eval("exists('" + scope + ":is_" + shell + "')")
# Loops over the possible variables, checking for global variables
# first since they indicate an override by the user.
def getShell():
 for scope in ["g", "b"]:
 for shell in ["bash", "posix", "sh", "kornshell"]:
 if testShell(scope, shell) == "1":
 if shell == "kornshell":
 return "ksh"
 if shell == "posix":
 return "sh"
 return shell
 return "sh"
endglobal
###########################################################################
# TextMate Snippets #
###########################################################################
snippet #!
`!p snip.rv = '#!/bin/' + getShell() + "\n\n" `
endsnippet
snippet sh "#!/bin/bash" !b
#!/bin/bash
$0
endsnippet
snippet !env "#!/usr/bin/env (!env)"
`!p snip.rv = '#!/usr/bin/env ' + getShell() + "\n\n" `
endsnippet
snippet "chkinst?a?l?l?" "check if program installed" r
# check to make sure that ${1} is installed
if ! command -v $1 ${2:|| ! command -v ${3}}; then
echo "ERROR: $1 must be installed"
sudo apt-get install $1 $2
fi
endsnippet
snippet temp "Tempfile"
${1:TMPFILE}="$(mktemp -t ${2:`!p
snip.rv = re.sub(r'[^a-zA-Z]', '_', snip.fn) or "untitled"
`})"
${3:${4/(.+)/trap "/}${4:rm -f '$${1/.*\s//}'}${4/(.+)/" 0 # EXIT\n/}${5/(.+)/trap "/}${5:rm -f '$${1/.*\s//}'; exit 1}${5/(.+)/" 2 # INT\n/}${6/(.+)/trap "/}${6:rm -f '$${1/.*\s//}'; exit 1}${6/(.+)/" 1 15 # HUP TERM\n/}}
endsnippet
snippet echo "echo ..." w
echo "$1"
endsnippet
snippet case "case .. esac (case)"
case ${1:word} in
 ${2:pattern} )
 $0;;
esac
endsnippet
snippet elif "elif .. (elif)"
elif ${2:[[ ${1:condition} ]]}; then
 ${3:${VISUAL}}$0
endsnippet
snippet for "for ... done (for)"
for (( i = 0; i < ${1:10}; i++ )); do
 ${0:${VISUAL}}
done
endsnippet
snippet forin "for ... in ... done (forin)"
for ${1:i}${2/.+/ in /}${2:words}; do
 ${0:${VISUAL}}
done
endsnippet
snippet here "here document (here)"
<<-${2:'${1:TOKEN}'}
 $0
${1/['"`](.+)['"`]/$1/}
endsnippet
snippet if "if ... then (if)"
if ${2:[[ ${1:condition} ]]}; then
 ${0:${VISUAL}}
fi
endsnippet
snippet until "until ... (done)"
until ${2:[[ ${1:condition} ]]}; do
 ${0:${VISUAL}}
done
endsnippet
snippet while "while ... (done)"
while ${2:[[ ${1:condition} ]]}; do
 ${0:${VISUAL}}
done
endsnippet
snippet yesno "case: yes or no" !b
read -p "${1} (Y|n)? " answer
case "$answer" in
Yes|yes|Y|y|"")
 echo "${2}
 ;;
No|no|N|n)
 echo "${3}
 ;;
${4:*)
 echo "your selection is not valid, try again"
 exit 1
 ;;}
esac
endsnippet
snippet src "Source command in .bashrc" !b
source "/home/\$\{USER\}/$1"
endsnippet
snippet "func?t?" "Create Function" !br
# $1 {{{
start ${1} ()
{
${0}
}
# $1 }}}
endsnippet
# vim:ft=snippets:
###########################################################################
# Emzap Snippets #
###########################################################################
snippet fun "create new function" b
${1:funct_name} ()#{{{
{
	${0}
}#}}}
endsnippet
snippet cron "templ: cronjobs" !b
# # Konfiguration
prog="${1}"
LOG="$HOME/.logfiles"
chkProg="$(ps -aef | grep -v grep | grep "/usr/bin/$prog" | wc -l)"
chkPower="$(acpi -a | awk '{print on}' | cut -d '-' -f 1)"
lockfile_old="$(basename $HOME/.logfiles/*.$prog.lock)"
lockfile_glob="$(ls $LOG | egrep [[:digit:]]{8}.lock)"

chk_if_already_executed () {
    # Lockfile löschen falls älter als ein tag
    if [[ -f "$LOG/$lockfile_old" ]]; then
        if [[ "$LOG/$lockfile_old" -ot "$LOG/$lockfile_glob" ]]; then
            rm -v $LOG/*.$prog.lock
        else
            # Skript beenden
            echo "Du hast das Skript bereits gestartet, $prog wird nicht ausgeführt!"
            exit 1
        fi
    else
        # Neue Lockfile anlegen
        touch "$LOG/`date +%Y%m%d`.$prog.lock"
    fi
}

# # Skript
testProg () {
    if [[ $chkProg -gt 0 ]]; then exit 1; fi
    if [[ $chkPower == "off" ]]; then exit 1; fi
}

# # check if the user has an active internet connection
chkConnect () {
    sleep 10
    testconnection=`wget --tries=3 --timeout=15 www.google.com -O /tmp/.testinternet &>/dev/null 2>&1`
    if [[ $? != 0 ]]; then
        exec 3> >(zenity --notification --listen)
        echo "message:You are not connected to the Internet. Please check your Internet connection and try again." >&3
        exit 0
    else
        echo Internet connection - ok
        rm /tmp/.testinternet > /dev/null 2>&1
    fi
}


runProg () {
    /usr/bin/"$prog" >> /dev/null 2>&1
}

# # Functions
chkConnect
runProg
testProg
endsnippet
