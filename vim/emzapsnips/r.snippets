priority -50
#.#.Mailsnips
global !p
def complete(t, opts):
    if t:
        opts = [ m[len(t):] for m in opts if m.startswith(t) ]
    if len(opts) == 1:
        return opts[0]
    return "" + ' '.join(opts) + ''
endglobal

snippet "(a|i)s" "Apply/Test type on variable" ir
`!p snip.rv=match.group(1)`s.$1`!p snip.rv=complete(t[1],
[' [l]ogical','[c]haracter','[i]nteger','[n]umeric','[v]ector','[li]st','[m]atrix','[d]ata.frame'])`${1/
|(l)$|(c)$|(i)$|(n)$|(v)$|(li)$|(m)$|(d)$/(?1:ogical)(?2:haracter)(?3:nteger)(?4:umeric)(?5:ector)(?6:st)(?7:atrix)(?8:ata.frame)/
g}(${2}${VISUAL})
endsnippet
snippet "\:(\S+)?" "create generic command" ir
`!p snip.rv = match.group(1) if match.group(1) is not None else "c"`(${1:${VISUAL}})
endsnippet
snippet "(\s|^)lib( (\S+))?" "Import a library" wr
library(${1:`!p snip.rv = match.group(3) if match.group(2) is not None else ""`})$0
endsnippet
snippet dl "Download and install a package" !b
download.file("${1:${VISUAL:url to package}}", destfile = "${2:${1/.*\/(.*)$/(?1:$1)/ga}}")
install.packages("$2", type = "source", repos = NULL)
library("${3:${2/^(\w+)_.*$/(?1:$1)/ga}}")
endsnippet
snippet "upd|knitr" "Install and update package from repo" !br
install.packages(c("digest", "evaluate", "formatR", "highlight", "knitr", "parser", "plyr", "Rcpp", "stringr"), repos = c('http://rforge.net', 'http://cran.rstudio.org'), type = 'source')
update.packages(ask = FALSE, repos = $2)
install.packages('${1:knitr}', repos = ${2:c('http://rforge.net', 'http://cran.rstudio.org')}, type = 'source')
library("$1")
endsnippet
snippet "#!" "Hashbang for Rscript (#!)" br
#!/usr/bin/env Rscript
endsnippet
snippet req "Require a file" i
require(${0:package})
endsnippet
snippet src "Source a file" i
source('${0:file}')
endsnippet
snippet if "If statement" i
if (${1}) {
	${0}
}
endsnippet
snippet eif "Else-If statement" i
else if (${1}) {
	${0}
}
snippet el "Else statement" i
else {
	${0}
}
endsnippet
snippet ife "if .. else" i
if (${1}) {
	${2}
} else {
	${3}
}
endsnippet
snippet wh "while loop" i
while(${1}) {
	${2}
}
endsnippet
snippet for "for loop" i
for (${1:item} in ${2:list}) {
	${3}
}
endsnippet
snippet fun "Function definition" i
${1:name} <- function (${2}) {
	${0}
}
endsnippet
snippet ret "Return call" i
return(${0})
endsnippet
snippet df "Data frame" i
${1:name}[${2:rows}, ${0:cols}]
endsnippet
snippet c "c function" i
c(${1:${VISUAL}}${2:})
endsnippet
snippet li "list function" i
list(${0:items})
endsnippet
snippet mat "matrix function" i
matrix(${1:data}, nrow = ${2:rows}, ncol = ${0:cols})
endsnippet
snippet apply "ap function" i
apply(${1:array}, ${2:margin}, ${0:function})
endsnippet
snippet lap "lapply function" i
lapply(${1:list}, ${0:function})
endsnippet
snippet sap "sapply function" i
sapply(${1:list}, ${0:function})
endsnippet
snippet vap "vapply function" i
vapply(${1:list}, ${2:function}, ${0:type})
endsnippet
snippet map "mapply function" i
mapply(${1:function}, ${0:...})
endsnippet
snippet tap "tapply function" i
tapply(${1:vector}, ${2:index}, ${0:function})
endsnippet
snippet rap "rapply function" i
rapply(${1:list}, ${0:function})
endsnippet
snippet pl "Plot function" i
plot(${1:x}, ${0:y})
endsnippet
snippet ggp "ggplot2 plot" i
ggplot(${1:data}, aes(${0:aesthetics}))
endsnippet
snippet fis "Fisher test" i
fisher.test(${1:x}, ${0:y})
endsnippet
snippet chi "Chi Squared test" i
chisq.test(${1:x}, ${0:y})
endsnippet
snippet tt "t-test" i
t.test(${1:x}, ${0:y})
endsnippet
snippet wil "Wilcox test" i
wilcox.test(${1:x}, ${0:y})
endsnippet
snippet cor "Correlation test" i
cor.test(${1:x}, ${0:y})
endsnippet
snippet fte "FTE test" i
var.test(${1:x}, ${0:y})
endsnippet
snippet kvt "KV test" i
kv.test(${1:x}, ${0:y})
endsnippet
