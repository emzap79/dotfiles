priority +1

global !p
import os
from vimsnippets import complete

FIELD_TYPES = [
'character',
'data.frame',
'Date',
'integer',
'list',
'logical',
'matrix',
'numeric',
'vector']
endglobal
snippet as "Apply type on variable" w
as.$1`!p snip.rv = complete(t[1], FIELD_TYPES)`(${2}${VISUAL})
endsnippet
snippet is "Test type on variable" w
is.$1`!p snip.rv = complete(t[1], FIELD_TYPES)`(${2}${VISUAL})
endsnippet
snippet "\.\.(\S+)?" "create generic command" ir
`!p snip.rv = match.group(1) if match.group(1) is not None else "c"`(${1:${VISUAL}})
endsnippet
snippet "\:(\S+)?" "surround by parenthesis" ir
(${1:`!p snip.rv = match.group(1) if match.group(1) is not None else "c"`})
endsnippet
snippet "(\s|^)lib( (\S+))?" "Import a library" wr
library("${1:`!p snip.rv = match.group(3) if match.group(2) is not None else ""`}")$0
endsnippet
snippet knitr "Install and update package from repo" b
install.packages(c("digest", "evaluate", "formatR", "highlight", "knitr", "parser", "plyr", "Rcpp", "stringr"), repos = c('http://rforge.net', 'http://cran.rstudio.org'), type = 'source')
endsnippet
snippet inst "Install and update package from repo" b
${4:# update.packages(ask = FALSE, repos = 'http://rforge.net',
'http://cran.rstudio.org', 'http://cran.r-project.org')
}install.packages('${1:package name}',
repos = c('http://rforge.net', 'http://cran.rstudio.org', 'http://cran.r-project.org'${2:, '$3'}),
type = 'source')
library("$1")
endsnippet
snippet str "Internal structure of an object" w
str(${1:${VISUAL}})
endsnippet

snippet dim "Show objects dimension" w
dim(${1:${VISUAL}})
endsnippet
snippet names "Show objects names" w
names(${1:${VISUAL}})
endsnippet
snippet c "Concatenate" w
c(${1:${VISUAL}})
endsnippet
snippet mean "Mean" w
mean(${1:${VISUAL}})
endsnippet
snippet list "list" w
list(${1:${VISUAL}})
endsnippet
snippet range "range" w
range(${1:${VISUAL}})
endsnippet
snippet max "max" w
max(${1:${VISUAL}})
endsnippet
snippet min "min" w
min(${1:${VISUAL}})
endsnippet
snippet print "print" w
print(${1:${VISUAL}})
endsnippet
snippet get "get" w
get(${1:${VISUAL}})
endsnippet
snippet head "head" w
head(${1:${VISUAL}})
endsnippet
snippet tail "tail" w
tail(${1:${VISUAL}})
endsnippet

snippet req "Require a file"
require(${0:package})
endsnippet
snippet source "Source a file"
source('${0:file}')
endsnippet
snippet if "If statement"
if (${1}) {
	${0}
}
endsnippet
snippet eif "Else-If statement"
else if (${1}) {
	${0}
}

snippet el "Else statement"
else {
	${0}
}
endsnippet
snippet ife "if .. else"
if (${1}) {
	${2}
} else {
	${3}
}
endsnippet
snippet wh "while loop"
while(${1}) {
	${2}
}
endsnippet
snippet for "for loop"
for (${1:item} in ${2:list}) {
	${3:${VISUAL}}
}
endsnippet
snippet fun "Function definition"
${1:name} <- function (${2}) {
	${0}
}
endsnippet
snippet ret "Return call"
return(${0})
endsnippet
snippet df "Data frame"
${1:name}[${2:rows}, ${0:cols}]
endsnippet
snippet li "list function"
list(${0:items})
endsnippet
snippet mat "matrix function"
matrix(${1:data}, nrow = ${2:rows}, ncol = ${0:cols})
endsnippet
snippet apply "apply function"
apply(${1:array}, ${2:margin}, ${0:function})
endsnippet
snippet lapply "lapply function"
lapply(${1:list}, ${0:function})
endsnippet
snippet sapply "sapply function"
sapply(${1:list}, ${0:function})
endsnippet
snippet vapply "vapply function"
vapply(${1:list}, ${2:function}, ${0:type})
endsnippet
snippet mapply "mapply function"
mapply(${1:function}, ${0:...})
endsnippet
snippet tapply "tapply function"
tapply(${1:vector}, ${2:index}, ${0:function})
endsnippet
snippet rapply "rapply function"
rapply(${1:list}, ${0:function})
endsnippet
snippet pl "Plot function"
plot(${1:x}, ${0:y})
endsnippet
snippet ggp "ggplot2 plot"
ggplot(${1:data}, aes(${0:aesthetics}))
endsnippet
snippet fis "Fisher test"
fisher.test(${1:x}, ${0:y})
endsnippet
snippet chi "Chi Squared test"
chisq.test(${1:x}, ${0:y})
endsnippet
snippet tt "t-test"
t.test(${1:x}, ${0:y})
endsnippet
snippet wil "Wilcox test"
wilcox.test(${1:x}, ${0:y})
endsnippet
snippet cor "Correlation test"
cor.test(${1:x}, ${0:y})
endsnippet
snippet fte "FTE test"
var.test(${1:x}, ${0:y})
endsnippet
snippet kvt "KV test"
kv.test(${1:x}, ${0:y})
endsnippet
