#.#######################
#.#.Snippets.for.Snippets
#.#######################
snippet "(showopts)|(printopts)" "Print available ultisnip-options" !br
`!p snip.rv = "snippet"`
#.#################
#.#.Snippet-Options
#.#################
#The options currently supported are: >
#   !   Overwrite - A snippet with this option will overwrite all previously
#       defined snippets with an identical tab trigger. What previously means
#       in this context depends on the order UltiSnips traverses the
#       'runtimepath'. (Compare g:UltiSnipsDontReverseSearchPath). This might
#       depend on your installation type (Pathogen, Bzr, Vundle). The default
#       behavior is to display list of snippets matching the tab trigger and
#       let the user pick the one they want. Use this option to overwrite
#       bundled snippets with user defined ones.
#
#   b   Beginning of line - A snippet with this option is expanded only if the
#       tab trigger is the first word on the line. In other words, if only
#       whitespace precedes the tab trigger, expand. The default is to expand
#       snippets at any position regardless of the preceding non-whitespace
#       characters.
#
#   i   In-word expansion - By default a snippet is expanded only if the tab
#       trigger is the first word on the line or is preceded by one or more
#       whitespace characters. A snippet with this option is expanded
#       regardless of the preceding character. In other words, the snippet can
#       be triggered in the middle of a word.
#
#   w   Word boundary - With this option, the snippet is expanded if
#       the tab trigger start matches a word boundary and the tab trigger end
#       matches a word boundary. In other words the tab trigger must be
#       preceded and followed by non-word characters. Word characters are
#       defined by the 'iskeyword' setting. Use this option, for example, to
#       permit expansion where the tab trigger follows punctuation without
#       expanding suffixes of larger words.
#
#   r   Regular expression - With this option, the tab trigger is expected to
#       be a python regular expression. The snippet is expanded if the recently
#       typed characters match the regular expression. Note: The regular
#       expression MUST be quoted (or surrounded with another character) like a
#       multi-word tab trigger (see above) whether it has spaces or not. A
#       resulting match is passed to any python code blocks in the snippet
#       definition as the local variable "match".
#
#   t   Do not expand tabs - If a snippet definition includes leading tab
#       characters, by default UltiSnips expands the tab characters honoring
#       the Vim 'shiftwidth', 'softtabstop', 'expandtab' and 'tabstop'
#       indentation settings. (For example, if 'expandtab' is set, the tab is
#       replaced with spaces.) If this option is set, UltiSnips will ignore the
#       Vim settings and insert the tab characters as is. This option is useful
#       for snippets involved with tab delimited formats, for example.
#
#   s   Remove whitespace immediately before the cursor at the end of a line
#       before jumping to the next tabstop.  This is useful if there is a
#       tabstop with optional text at the end of a line.
`!p snip.rv = "endsnippet"`
endsnippet

# We use a little hack so that the snippet is expanded
# and parsed correctly
snippet snip "Snippet definition" b
`!p snip.rv = "snippet"` ${1:Tab_trigger} "${2:Description}" ${3:!b}
${0:${VISUAL}}
`!p snip.rv = "endsnippet"`
endsnippet
snippet snipp "Snippet definition + options" !
`!p snip.rv = "snippet"` ${1:Tab_trigger} "${2:Description}" ${3:!b}
$1 \$1\`!p snip.rv=complete(t[1], ['${4:opts}','${5:opts}','x'])\`
`!p snip.rv = "endsnippet"`

`!p snip.rv = "snippet"` "$1 x" "$2 $6" $3
${0:start snip here!}
`!p snip.rv = "endsnippet"`

`!p snip.rv = "snippet"` "$1 $4" "$2 $7" $3
`!p snip.rv = "endsnippet"`

`!p snip.rv = "snippet"` "$1 $5" "$2 $8" $3
`!p snip.rv = "endsnippet"`
endsnippet
snippet global "Global snippet" !
`!p snip.rv = "global"` !p
$0
`!p snip.rv = "endglobal"`
endsnippet
snippet vis "${VISUAL}" i
\$\{VISUAL${1:${2:default}${3:/transform/}}\}
endsnippet
# vim:ft=snippets:
