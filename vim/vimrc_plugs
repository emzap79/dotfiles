" vim: fdm=marker
"""""""""""""
"  Plugins  "
"""""""""""""

call vundle#rc()
Bundle 'gmarik/vundle'

" Bundles                                              {{{1

" active bundles

Bundle 'L9'
Bundle 'LaTeX-Box-Team/LaTeX-Box'
Bundle 'SirVer/ultisnips.git'
Bundle 'Valloric/YouCompleteMe'
Bundle 'altercation/vim-colors-solarized'
Bundle 'arecarn/frisk.git'
Bundle 'bkad/CamelCaseMotion'
Bundle 'christoomey/vim-tmux-navigator'
Bundle 'honza/vim-snippets'
Bundle 'jacquesbh/vim-showmarks'
Bundle 'jcfaria/Vim-R-plugin'
Bundle 'kshenoy/vim-origami'
Bundle 'matchit.zip'
Bundle 'matze/vim-tex-fold'
Bundle 'navicore/vis.vim'
Bundle 'nelstrom/vim-markdown-folding'
Bundle 'panozzaj/vim-autocorrect'
Bundle 'scrooloose/syntastic'
Bundle 'tpope/vim-commentary'
Bundle 'tpope/vim-dispatch.git'
Bundle 'tpope/vim-fugitive'
Bundle 'tpope/vim-git'
Bundle 'tpope/vim-obsession'
Bundle 'tpope/vim-repeat'
Bundle 'tpope/vim-surround.git'
Bundle 'tpope/vim-unimpaired'
Bundle 'tracyone/Align.git'
Bundle 'vim-scripts/ExtractLinks'
Bundle 'vim-scripts/FuzzyFinder'
Bundle 'vim-scripts/LanguageTool'
Bundle 'wellle/targets.vim'

" No more used repos
" Bundle 'mattn/flappyvird-vim'
" Bundle 'terryma/vim-expand-region'
" Bundle 'tommcdo/vim-exchange'
" Bundle 'tomtom/tcomment_vim'
" Bundle 'vim-scripts/tComment'
" Bundle 'CheckAttach.vim'
" Bundle 'Lokaltog/vim-easymotion'
" Bundle 'ScrollColors'
" Bundle 'Shougo/neocomplete.vim'
" Bundle 'SpellChecker'
" Bundle 'Tabmerge'
" Bundle 'The-NERD-Commenter'
" Bundle 'The-NERD-tree'
" Bundle 'airblade/vim-gitgutter'
" Bundle 'check-mutt-attachments.vim'
" Bundle 'email.vim'
" Bundle 'git://git.wincent.com/command-t.git'
" Bundle 'https://github.com/lightxue/SwissCalc'
" Bundle 'https://github.com/vim-scripts/AutoComplPop'
" Bundle 'https://github.com/vim-scripts/spreadsheet.vim'
" Bundle 'mru.vim'
" Bundle 'mutt-aliases'
" Bundle 'muttaliasescomplete.vim'
" Bundle 'pivotal/tmux-config'
" Bundle 'plasticboy/vim-markdown'
" Bundle 'rstacruz/sparkup', {'rtp': 'vim/'}
" Bundle 'screen.vim'
" Bundle 'scrooloose/nerdtree'
" Bundle 'suan/vim-instant-markdown'
" Bundle 'tpope/vim-rails.git'
" Bundle 'vim-scripts/DrawIt'
" Bundle 'vim-scripts/VimExplorer'

" "No more used repos


" Script-Language                                      {{{1

" Latex Box Plugin                                     {{{2

autocmd FileType tex so ~/.vim/bundle/LaTeX-Box/ftplugin/tex_LatexBox.vim

" set mupdf as viewer
" let g:LatexBox_viewer = 'mupdf'
" let g:LatexBox_latexmk_options = "-pvc -pdfps"
" let g:LatexBox_output_type="pdf"

" Vim-R-Plugin: needs to have VimCom installed!        {{{2

Bundle 'jalvesaq/VimCom'

" At startup                                           {{{3

" let vimrplugin_source = "$HOME/R,/usr/lib/R/site-library/,/usr/lib/R/library/"
let vimrplugin_r_args = "--no-save --quiet"  " arguments at R startup
let vimrplugin_vimcom_wait = 1000            " Time in ms to wait for vimcom.plus loading
let vimrplugin_vsplit = 0                    " Make Tmux split the window vertically
let vimrplugin_rconsole_width = 80           " The number of columns of R Console (Tmux split)
let vimrplugin_allnames = 1                  " Show names which begin with a dot
let vimrplugin_maxdeparse = 300

" If you use Linux or other Unix and eventually use the system console (without
" the X server) you may want to put in your vimrc:
   if $DISPLAY != ""
       let vimrplugin_openpdf = 1
   endif

" Comments + Folding                                   {{{3

let vimrplugin_rcomment_string = "# "
let r_indent_comment_column = 20
let r_syntax_folding = 1                     " Allow for syntax-folding

" Command line output                                  {{{3

let vimrplugin_term = "xterm"                " Define which terminal emulator to start
let vimrplugin_routmorecolors = 1            " R commands in the R output are highlighted
let vimrplugin_rconsole_width = 50           " The number of columns of R Console (Tmux split)

" Inside Insertmode                                    {{{3

" set <M-->=^[-
let vimrplugin_assign = 1                    " Enable mapping for 'assign'
let vimrplugin_assign_map = "_"              " Map (' <- ') to custom key in insert mode
let g:vimrplugin_insert_mode_cmds = 1        " 0 to make commands work in insert mode

" Object Browser                                       {{{3

let vimrplugin_vimpager = "no"                 " If set vim, enable html support in .Rconfig (see documentation)
let vimrplugin_help_w = 30
let vimrplugin_objbr_w = 30                    " Number of minimum columns for Objectbrowser
let vimrplugin_objbr_place = "console,left"    " Valid values for the Object Browser placement are 'script' or
                                               " 'console' and 'right' or 'left' separated by a comma.
let vimrplugin_openpdf = 1
let vimrplugin_openhtml = 1

" Sweave & KnitR                                       {{{3

" In Rnoweb files, a '<' is replaced with '<<>>=\n@'. Set to 0 to disable this feature.
let vimrplugin_rnowebchunk = 1


" Markdown                                             {{{3

" Vim-Markdown                                         {{{3

" Bundle 'plasticboy/vim-markdown'

" Set to '0' to enable folding
let g:vim_markdown_folding_disabled=0

" Set Initial Foldlevel
let g:vim_markdown_initial_foldlevel=3

" Enable/Disable (0/1) Default Key Mappings
let g:vim_markdown_no_default_key_mappings=0

" Key-Maps
" ]]: go to next header. <Plug>(Markdown_MoveToNextHeader)
" [[: go to previous header. Contrast with ]c. <Plug>(Markdown_MoveToPreviousHeader)
" ][: go to next sibling header if any. <Plug>(Markdown_MoveToNextSiblingHeader)
" []: go to previous sibling header if any. <Plug>(Markdown_MoveToPreviousSiblingHeader)
" ]c: go to Current header. <Plug>(Markdown_MoveToCurHeader)
" ]u: go to parent header (Up). <Plug>(Markdown_MoveToParentHeader)

" Vim-Markdown-Folding                                 {{{2

" If set to 0, the fold text will not be overriden:>
let g:markdown_fold_override_foldtext = 0

" Available options are stacked/nested
let g:markdown_fold_style = 'nested'

" Vim-Instant-Markdown                                 {{{2

" let g:instant_markdown_slow = 1
" let g:instant_markdown_autostart = 0


" TeX-Folding                                          {{{2

" Use these options to customize tex-fold:

" Use tex-folds own foldtext function instead of the builtin one:
let g:tex_fold_override_foldtext = 1

" Set the string to prepend the foldtext for sections: >
let g:tex_fold_sec_char = '>'

" Set the string to prepend the foldtext for environments: >
let g:tex_fold_env_char = 'E'

" Besides folding sections and environments, allow folds to be defined with
" markers: >
let g:tex_fold_allow_marker = 1


" On Text Operators                                    {{{1

" CamelCase Motions                                    {{{2

" Example: Replace the default 'w', 'b' and 'e' mappings instead of defining
" additional mappings ',w', ',b' and ',e':

map <silent> w <Plug>CamelCaseMotion_w
map <silent> b <Plug>CamelCaseMotion_b
map <silent> e <Plug>CamelCaseMotion_e
sunmap w
sunmap b
sunmap e

" Example: Replace default 'iw' text-object and define 'ib' and 'ie' motions:
" omap <silent> iw <Plug>CamelCaseMotion_iw
" xmap <silent> iw <Plug>CamelCaseMotion_iw
" omap <silent> ib <Plug>CamelCaseMotion_ib
" xmap <silent> ib <Plug>CamelCaseMotion_ib
" omap <silent> ie <Plug>CamelCaseMotion_ie
" xmap <silent> ie <Plug>CamelCaseMotion_ie

" Align                                                {{{2
" let alignctrl= Align#AlignCtrl()

" VIS                                                  {{{2
" " apply commmand only to Visual Block ":'<,'>B <command>"

" vim-commentor                                        {{{2
" define new line for comments
autocmd FileType apache set commentstring=#\ %s

" ShowMarks                                            {{{2
let g:showmarks_marks = "abcdefghijklmnopqrstuvwxyz"


" Targets                                              {{{2

" Defines the space separated list of pair objects you wish to use, along with
" optional one letter aliases for them.
let g:targets_pairs = '()b {}B []r <>a ``t --h'

" Default: let g:targets_quotes = '" '' `'
" Defines the space separated list of quoting objects you wish to use. Note that
" you have to escape the single quote by doubling it. Quote objects can
" optionally be followed by a single one letter alias. For example, to set 'd'
" as an alias for double quotes, allowing such commands as 'cid' to be
" equivalent to 'ci"', you could define:
let g:targets_quotes = '"d '' ``t'

" Default: let g:targets_separators = ', . ; : + - ~ _ * / \ |'
" Defines the space separated list of separator objects you wish to use. Like
" quote objects, separator objects can optionally be followed by a single one
" letter alias. To set 'c' as an alias for comma, allowing such commands as
" 'dic' to be equivalent to 'di,', you could define:
let g:targets_separators = ',c . ; : + - ~ _ * / \ | -h'
"

" VIM-Surround                                         {{{2

" When this replacement is used,  the user is prompted with an "environment: "
" prompt for input.  This input is inserted between each set of \1's.
" Additional inputs up to \7 can be used.

" Furthermore, one can specify a regular expression substitution to apply.
" let g:surround_108 = "\\begin{\1environment: \1}\r\\end{\1\r}.*\r\1}"

" mnemonical keybind is: <surround-strokes>le (eg. "you surround latex environment")
let g:surround_{char2nr("e")} = "\\begin{\1environment: \1}\r\\end{\1\r}.*\r\1}"
let g:surround_{char2nr("e")} = "\\begin{\1environment: \1}\r\\end{\1\r}.*\r\1}"
autocmd FileType php let b:surround_45 = "<?php \r ?>"


" UltiSnips                                            {{{2

" UltiSnips#ExpandSnippet
let g:snips_author = "Jonas Petong"
let g:UltiSnipsExpandTrigger = "<s-tab>"
let g:UltiSnipsListSnippets = "<s-c-tab>"
let g:UltiSnipsJumpForwardTrigger = "<s-c-j>"
let g:UltiSnipsJumpBackwardTrigger = "<c-k>"
let g:UltiSnipsEditSplit = "horizontal"
let g:UltiSnipsSnippetsDir = "~/.vim/emzapsnips"
let g:UltiSnipsSnippetDirectories= ["UltiSnips","emzapsnips"]
" let g:UltiSnipsUsePythonVersion = 3
" let g:UltiSnipsRemoveSelectModeMappings = 1
" let g:UltiSnipsMappingsToIgnore = [ "somePlugin", "otherPlugin" ]

" If the trigger for your snippet is lorem, you type lor, and you have no other
" snippets whose trigger matches lor then hitting <C-K> will expand to whatever
" expands to.
function! ExpandPossibleShorterSnippet()
    if len(UltiSnips#SnippetsInCurrentScope()) == 1 "only one candidate...
        let curr_key = keys(UltiSnips#SnippetsInCurrentScope())[0]
        normal diw
        exe "normal a" . curr_key
        exe "normal a "
        return 1
    endif
    return 0
endfunction
inoremap <silent> <leader>K <C-R>=(ExpandPossibleShorterSnippet() == 0? '': UltiSnips#ExpandSnippet())<CR>

" Adding anonymous snippets
inoremap <silent> $$ $$<C-R>=UltiSnips#Anon(':latex:\$1\', '$$')<cr>
inoremap <silent> [[ [[<C-R>=UltiSnips#Anon(':latex:\$1\', '[[')<cr>
inoremap <silent> (( ((<C-R>=UltiSnips#Anon('(${1:${VISUAL}})', '((', '', 'i')<cr>

" let loaded_matchit = 1
" let fortran_free_source=1                                                " use fortran free form
" let g:acp_behaviorSnipmateLength = -1                                    " allows using autocompl plugin together with snipmate

" This option when set to 1 makes <C-J> in insert mode delete
" non-descriptive (empty) placeholders and enters insert mode.
let g:Imap_DeleteEmptyPlaceHolders = 1

" When set to 1, in visual mode, <C-J> takes you to the next placeholder
" without deleting the current placeholder.
let g:Imap_StickyPlaceHolders = 1

" Fuzzyfinder Bindings                                 {{{2

let g:fuf_modesDisable = ['mrucmd']
let g:fuf_mrufile_maxItem = 50
let g:fuf_mrucmd_maxItem = 50
let g:fuf_keyOpen = '<Space>'		" default: <CR>
let g:fuf_keyOpenSplit = '<C-j>'
let g:fuf_keyOpenVsplit = '<C-k>'
let MRU_File="/home/zapata/.vim/vimplug_mru_files"

" Syntastic                                            {{{2

" Default: 0
" If enabled, syntastic will do syntax checks when buffers are first loaded as
" well as on saving >
let g:syntastic_check_on_open = 0

" Default: 1
" Normally syntastic runs syntax checks whenever buffers are written to disk.
" If you want to skip these checks when you issue |:wq|, |:x|, and |:ZZ|, set this
" variable to 0. >
let g:syntastic_check_on_wq = 0

" Default: 0
" When enabled, syntastic runs all checkers that apply to the current filetype,
" then aggregates errors found by all checkers and displays them. When disabled,
" syntastic runs each checker in turn, and stops to display the results the first
" time a checker finds any errors. >
let g:syntastic_aggregate_errors = 0

" Default: 1
" When results from multiple checkers are aggregated in a single error list
" (that is either when |syntastic_aggregate_errors| is enabled, or when checking
" a file with a composite filetype), it might not be immediately obvious which
" checker has produced a given error message. This variable instructs syntastic
" to label error messages with the names of the checkers that created them. >
let g:syntastic_id_checkers = 1

" Default: 1
" By default, when |syntastic_aggregate_errors| is enabled, errors are grouped
" by file, then sorted by line number, then grouped by type (namely, errors take
" precedence over warnings), then they are sorted by column number.  If you want
" to leave messages grouped by checker output, set this variable to 0. >
let g:syntastic_sort_aggregated_errors = 1

" Default: 1
" If enabled, syntastic will echo the error associated with the current line to
" the command window. If multiple errors are found, the first will be used. >
let g:syntastic_echo_current_error = 1

" Default: 1
" Use this option to tell syntastic whether to use the |:sign| interface to mark
" syntax errors: >
let g:syntastic_enable_signs = 1

" Use this option to control what the syntastic |:sign| text contains. Several
" error symbols can be customized:
    " syntastic_error_symbol - For syntax errors, defaults to '>>'
    " syntastic_style_error_symbol - For style errors, defaults to 'S>'
    " syntastic_warning_symbol - For syntax warnings, defaults to '>>'
    " syntastic_style_warning_symbol - For style warnings, defaults to 'S>'

" Example: >
" let g:syntastic_error_symbol = '✗'
" let g:syntastic_warning_symbol = '⚠'

" Default: 1
" Use this option to tell syntastic whether to display error messages in balloons
" when the mouse is hovered over erroneous lines: >
let g:syntastic_enable_balloons = 1

" Default: 1
" Use this option to tell syntastic whether to use syntax highlighting to mark
" errors (where possible). Highlighting can be turned off with the following >
let g:syntastic_enable_highlighting = 0

" Default: 0
" Enable this option to tell syntastic to always stick any detected errors into
" the |location-list|: >
let g:syntastic_always_populate_loc_list = 0

" Default: 0
" Enable this option if you want the cursor to jump to the first detected issue
" when saving or opening a file.
" " When set to 0 the cursor won't jump automatically. >
" " When set to 1 the cursor will always jump to the first issue detected. >
" " When set to 2 the cursor will jump to the first issue detected, but only if
" " this issue is an error. >
let g:syntastic_auto_jump = 2

" Default: 2
" Use this option to tell syntastic to automatically open and/or close the
" |location-list| (see |syntastic-error-window|).
" " When set to 0 the error window will not be opened or closed automatically. >
" " When set to 1 the error window will be automatically opened when errors are
" " detected, and closed when none are detected. >
" " When set to 2 the error window will be automatically closed when no errors are
" " detected, but not opened automatically. >
let g:syntastic_auto_loc_list = 2

" Default: 10
" Use this option to specify the height of the location lists that syntastic
" opens. >
let g:syntastic_loc_list_height = 5

" Default: []
" Use this option to specify files that syntastic should never check.  It's a
" list of |regular-expression| patterns.  The full paths of files (see |::p|) are
" matched against these patterns, and the matches are case sensitive. Use |\c|
" to specify case insensitive patterns.  Example: > ['\m^/usr/include/', '\m\c\.h$']
let g:syntastic_ignore_files = []

" Default: {}
" Use this option to map non-standard filetypes to standard ones.  Corresponding
" checkers are mapped accordingly, which allows syntastic to check files with
" non-standard filetypes: >
" let g:syntastic_filetype_map = { 'latex': 'tex',
                                   \ 'gentoo-metadata': 'xml' }

" Composite filetypes can also be mapped to simple types, which disables the
" default behaviour of running both checkers against the input file: >
" let g:syntastic_filetype_map = { 'handlebars.html': 'handlebars' }

" Default: { "mode": "active",
           " "active_filetypes": [],
           " "passive_filetypes": [] }

" Use this option to fine tune when automatic syntax checking is done (or not
" done).

" The option should be set to something like: >

let g:syntastic_mode_map = { 'mode': 'active',
            \ 'active_filetypes': ['ruby', 'php','bash'],
            \ 'passive_filetypes': ['tex'] }

" "mode" can be mapped to one of two values - "active" or "passive". When set to
" active, syntastic does automatic checking whenever a buffer is saved or
" initially opened.  When set to "passive" syntastic only checks when the user
" calls |:SyntasticCheck|.

" YouCompleteMe                                        {{{2

" settings                                             {{{3

" Support for TeX
Bundle 'bjoernd/vim-ycm-tex'

" Enable/Disable
let g:ycm_auto_trigger = 0

" List Previous Completion
let g:ycm_key_list_previous_completion=['<Up>']

" LaTeX-Support
let g:ycm_semantic_triggers = {
\  'tex'  : ['\ref{','\cite{'],
\ }

" To work with ultisnips                               {{{3

" " https://github.com/Valloric/YouCompleteMe/issues/36#issuecomment-15451411
" " UltiSnips completion function that tries to expand a snippet. If there's
" " no snippet for expanding, it checks for completion window and if it's
" " shown, selects first element. If there's no completion window it tries
" " to jump to next placeholder. If there's no placeholder it just returns
" " TAB key
" function! g:UltiSnips_Complete()
    " call UltiSnips_ExpandSnippet()
    " if g:ulti_expand_res == 0
        " if pumvisible()
            " return "\<C-n>"
        " else
            " call UltiSnips_JumpForwards()
            " if g:ulti_jump_forwards_res == 0
               " return "\<TAB>"
            " endif
        " endif
    " endif
    " return ""
" endfunction

"exec "inoremap <silent> " . g:UltiSnipsExpandTrigger . " <C-R>=g:UltiSnips_Complete()<cr>"




" Language & Spellchecking"
" Language-Tool                                        {{{2

" let g:languagetool_win_width = 18
" let g:languagetool_lang = de-DE           " language expected automatically, if unset
let g:languagetool_win_height = -1          " enable/disable languagetool-scratch buffer, if negative value: 14pt
let g:languagetool_jar = '$HOME/.dictionaries/LanguageTool-2.5-SNAPSHOT/languagetool-commandline.jar'

" vim-autocorrect                                      {{{2

" au! filetype tex call AutoCorrect()
au!  BufEnter  call                    BasicAbbreviations()
au!  filetype  noweb,rnoweb,tex  call  TexAbbreviations()
au!  filetype  mail,eml          call  MailAbbreviations()

" vim-origami                                          {{{2

" 'g:OrigamiMap'
"   Type: Dictionary, Default:
"   To set up your own mappings copy the following dictionary and edit it
      let g:OrigamiMap = {
        \ 'Leader'           : "gz",
        \ 'Align'            : "a",
        \ 'CommentedOpen'    : "O",
        \ 'CommentedClose'   : "C",
        \ 'UncommentedOpen'  : "o",
        \ 'UncommentedClose' : "c",
        \ 'Delete'           : "d",
        \ }
  " To disable a map entirely, specify it as an empty string.
  " If a key is not specified, the default value will be picked up.
  " These same characters will be used to invoke the shortcuts.


" Other Extensions                                     {{{1

" Github                                               {{{2

" vim-fugitive                                         {{{3

" watch: http://vimcasts.org/episodes/fugitive-vim-working-with-the-git-index/
" TIP: pressing '~' on a :Gblame hash to go re-blame
" http://www.reddit.com/r/vim/comments/21f4gm/best_workflow_when_using_fugitive/cgcqbc5

" fugitive statusline
" set statusline=%<%f\ %h%m%r%{fugitive#statusline()}%=%-14.(%l,%c%V%)\ %P

" Fugitive-Buffer nach verlassen löschen
autocmd BufReadPre,BufRead fugitive://* set wmh=20
autocmd BufReadPost fugitive://* set bufhidden=delete


" Frisk - Search Engine                                {{{2

call frisk#DefaultEngine('google')

" " Default Engines                                    {{{3

 " "bingImages"
 " "bing"
 " "bingVideo"
 " "imdb"
 " "google"
 " "googleImages"
 " "googleTranslate"
 " "stackOverflow"
 " "wikipedia"


" " Custom Search Operators                            {{{3

" "" General Search - a                                {{{4

call frisk#AddEngine('wikipediaEn', 'http://en.wikipedia.org/w/api.php?action=opensearch&search=')
call frisk#AddEngine('wikipediaEs', 'http://es.wikipedia.org/w/index.php?title=Especial:Buscar&search=')
" call frisk#AddEngine('wikipediaEs', 'http://es.wikipedia.org/w/api.php?action=opensearch&search=')
call frisk#AddEngine('yacy', 'http://search.yacy.net/yacysearch.html?query=')
call frisk#AddEngine('dasoertliche', 'http://services.dasoertliche.de/addons/search/?q=')
call frisk#AddEngine('dbahn', 'http://reiseauskunft.bahn.de/bin/query.exe/dn?revia=yes&existOptimizePrice=1&country=DEU&dbkanal_007=L01_S01_D001_KIN0001_qf-bahn_LZ003&start=1&S=')
call frisk#AddEngine('duckduckgo', 'https://duckduckgo.com/ac/?q=')
call frisk#AddEngine('investopedia', 'http://www.investopedia.com/search/default/?key=')
call frisk#AddEngine('openstreetmap', 'http://nominatim.openstreetmap.org/search/?q=')
call frisk#AddEngine('wikibooks', 'http://de.wikibooks.org/w/index.php?search=')
call frisk#AddEngine('reddit', 'http://de.reddit.com/search?q=')
call frisk#AddEngine('duckduckgo', 'https://duckduckgo.com/ac/?q=')


" "" Online-Shops - s                                  {{{4

call frisk#AddEngine('ebayKleinanz', 'http://kleinanzeigen.ebay.de/anzeigen/s-suchanfrage.html?keywords=')
call frisk#AddEngine('amazon', 'http://www.amazon.com/exec/obidos/external-search/?field-keywords=')
call frisk#AddEngine('ebay', 'http://shop.ebay.de/?_nkw=')
call frisk#AddEngine('ikea', 'http://www.ikea.com/de/de/search/?query=')


" "" Dictionaries - d                                  {{{4

call frisk#AddEngine('dict', 'http://dees.dict.cc/?s=')
call frisk#AddEngine('leo', 'http://dict.leo.org/?lp=ende&from=fx3&search=')
call frisk#AddEngine('linguee', 'http://www.linguee.de/deutsch-englisch/search?source=auto&query=')
call frisk#AddEngine('openthesaurus', 'http://www.openthesaurus.de/synonyme?q=')
call frisk#AddEngine('dict', 'http://dees.dict.cc/?s=')


" "" Linux/LaTeX/Coding - f                            {{{4

call frisk#AddEngine('mutt', 'http://dev.mutt.org/trac/search?q=')
call frisk#AddEngine('ctan', 'http://www.ctan.org/pkg/')
call frisk#AddEngine('github', 'https://github.com/search?q=')
call frisk#AddEngine('launchpad', 'https://launchpad.net/+search?field.text=')
call frisk#AddEngine('musicbrainz', 'http://musicbrainz.org/search?query=')
call frisk#AddEngine('mutt', 'http://www.mail-archive.com/search?l=mutt-users%40mutt.org&q=')
call frisk#AddEngine('stackexchange', 'http://unix.stackexchange.com/search?q=')
call frisk#AddEngine('stackoverflow', 'http://stackoverflow.com/search?q=')
call frisk#AddEngine('stackoverflowExcel', 'http://stackoverflow.com/search?q=[excel-vba]')
call frisk#AddEngine('superuser', 'http://superuser.com/search?q=')
call frisk#AddEngine('texexchange', 'http://tex.stackexchange.com/search?q=')
call frisk#AddEngine('ubuntuusers', 'http://ubuntuusers.de/search/?query=')
call frisk#AddEngine('vimscripts', 'http://www.vim.org/scripts/script_search_results.php?keywords=')
call frisk#AddEngine('vimwiki', 'http://vim.wikia.com/wiki/index.php?search=')
call frisk#AddEngine('mutt', 'http://dev.mutt.org/trac/search?q=')
call frisk#AddEngine('ctan', 'http://www.ctan.org/pkg/')


" "" Auskunft - g                                      {{{4

call frisk#AddEngine('dasoertliche', 'http://services.dasoertliche.de/addons/search/?q=')
call frisk#AddEngine('dbahn', 'http://reiseauskunft.bahn.de/bin/query.exe/dn?revia=yes&existOptimizePrice=1&country=DEU&dbkanal_007=L01_S01_D001_KIN0001_qf-bahn_LZ003&start=1&S=')
call frisk#AddEngine('gelbeseiten', 'http://www.gelbeseiten.de/yp/search.yp?subject=')


" "" Uni Due - h                                       {{{4

call frisk#AddEngine('googleScholar', 'http://scholar.google.de/scholar?hl=de&q=')


" "" Sport/Entertainment - j                           {{{4

call frisk#AddEngine('kicker', 'http://www.kicker.de/home/suchergebnisse.html?suchbegriff=')
call frisk#AddEngine('lastfm', 'http://www.last.fm/search?q=')
call frisk#AddEngine('metacafe', 'http://www.metacafe.com/results/')
call frisk#AddEngine('podcasts', 'http://www.allpodcasts.com/Results.aspx?cx=partner-pub-0273520528742867%3A9dltns-5q5f&cof=FORID%3A9&ie=ISO-8859-1&q=')
call frisk#AddEngine('podomatic', 'http://www.podomatic.com/search?query=')
call frisk#AddEngine('reddit', 'http://www.reddit.com/search?q=')
call frisk#AddEngine('soundcloud', 'https://soundcloud.com/search?q=')
call frisk#AddEngine('twitter', 'http://twitter.com/search?q=')
call frisk#AddEngine('vimeo', 'http://vimeo.com/search?q=')
call frisk#AddEngine('youtube', 'http://www.youtube.com/results?search_query=')



" VimCalc                                              {{{2

let g:VCalc_WindowPosition = 'top'
let g:VCalc_Max_History = 100
let g:VCalc_InsertOnEnter = 1
let g:VCalc_CWInsert = 0
let g:VCalc_Win_Size = 10

" Tmux-Extensions                                      {{{2

" Vim-Tmux-Navigator                                   {{{3

let g:tmux_navigator_no_mappings = 1


" Mutt                                                 {{{2

" Extract Links                                        {{{3

" Plugin requires additional:
Bundle 'vim-scripts/ingo-library'
Bundle 'vim-scripts/extractmatches'
Bundle 'vim-scripts/PatternsOnText'

" Dictionary (to avoid multiple identical entries) containing regular
" expressions (as keys, the values are irrelevant) to capture links in the
" buffer:
" let g:ExtractLinks_Expressions = {'\<link: \S\+\>', 1}

" The replacement of the matched link inside the buffer:
let g:ExtractLinks_ReplacementInline = '[\#]'

" The replacement of the matched link for the link table:
let g:ExtractLinks_ReplacementExtraction = '[\#] &\n'


" Deleted Plugins                                      {{{1

"" Neocomplete                                         {{{2

""Note: This option must set it in .vimrc(_vimrc).  NOT IN .gvimrc(_gvimrc)!

"" " Use neocomplete.
"let g:neocomplete#enable_at_startup = 0
"" " Enable fuzzy completion
"let g:neocomplete#enable_fuzzy_completion = 1
"" " Use smartcase.
"let g:neocomplete#enable_smart_case = 1
"" " Set minimum syntax keyword length.
"let g:neocomplete#sources#syntax#min_keyword_length = 3
"" " Lock Neocomplete in iminsert-mode
"let g:neocomplete#lock_iminsert = 0
"let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'
"" " Disable AutoComplPop.
"let g:acp_enableAtStartup = 0
"" " Make Neocomplete work with latex
"" let g:neocomplete#force_omni_input_patterns

"" Define dictionary.
"let g:neocomplete#sources#dictionary#dictionaries = {
    "\ 'default' : '',
    "\ 'tex' : $HOME.'/.vim/dictionaries/tex.dict',
    "\ 'scheme' : $HOME.'/.gosh_completions'
        "\ }

"" Define keyword.
"if !exists('g:neocomplete#keyword_patterns')
    "let g:neocomplete#keyword_patterns = {}
"endif
"let g:neocomplete#keyword_patterns['default'] = '\h\w*'

"" Plugin key-mappings.
"inoremap <expr><C-g>     neocomplete#undo_completion()
"inoremap <expr><C-l>     neocomplete#complete_common_string()

"" Recommended key-mappings.                           {{{3

"" <CR>: close popup and save indent.                  {{{3

"inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
"function! s:my_cr_function()
  "return neocomplete#close_popup() . "\<CR>"
  "" For no inserting <CR> key.
  "return pumvisible() ? neocomplete#close_popup() : "\<CR>"
"endfunction


"" <TAB> or <SPACE> completion                         {{{3

"" <TAB>: completion.
"inoremap <expr><C-TAB>  pumvisible() ? "\<C-n>" : "\<C-TAB>"
"inoremap <expr><C-TAB>  pumvisible() ? neocomplete#close_popup() : "\<C-TAB>"
"inoremap <expr><C-TAB>  pumvisible() ? neocomplete#close_popup() : "\<C-TAB>"
"" inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
"" inoremap <expr><TAB>  pumvisible() ? neocomplete#close_popup() : "\<TAB>"
"" inoremap <expr><TAB>  pumvisible() ? neocomplete#close_popup() : "\<TAB>"
"" <Space>:completion
"inoremap <expr><S-Space>  pumvisible() ? "\<S-n>" : "\<S-Space>"
"inoremap <expr><S-Space>  pumvisible() ? neocomplete#close_popup() : "\<S-Space>"
"inoremap <expr><S-Space>  pumvisible() ? neocomplete#close_popup() : "\<S-Space>"


"" <C-h>, <BS>: close popup and delete backword char.  {{{3

"inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
"inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
"inoremap <expr><C-y>  neocomplete#close_popup()
"inoremap <expr><C-e>  neocomplete#cancel_popup()


"" AutoComplPop like behavior.                         {{{3

"let g:neocomplete#enable_auto_select = 1


"" Shell like behavior(not recommended).
""set completeopt+=longest
""let g:neocomplete#enable_auto_select = 1
""let g:neocomplete#disable_auto_complete = 1
""inoremap <expr><TAB>  pumvisible() ? "\<Down>" : "\<C-x>\<C-u>"


"" Enable omni completion.
"autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
"autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
"autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
"autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
"autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
"autocmd FileType tex setlocal omnifunc=texcomplete#CompleteTags

"" Enable heavy omni completion.
"if !exists('g:neocomplete#sources#omni#input_patterns')
  "let g:neocomplete#sources#omni#input_patterns = {}
"endif
""let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
""let g:neocomplete#sources#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
""let g:neocomplete#sources#omni#input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'

