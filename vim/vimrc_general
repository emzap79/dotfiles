" vim:fdm=marker
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                               VIMRC GENERAL                                "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" File: vimrc_general
" Author: Jonas Petong
" Description: basic vimrc settings
" Last Modified: Mai 04, 2014

" font matters"{{{

" vim                 <-- starts Vim normally, reading ~/.vimrc
" vim -u ~/.vimsqlrc  <-- starts Vim using your alternative vimrc
" vim -u NONE         <-- starts Vim without any vimrc
" vim -u NORC         <-- starts Vim without any vimrc, but with plugins

" Convert from dos/unix to dos
" http://vim.wikia.com/wiki/File_format
" To convert the current file from any mixture of CRLF/LF-only line endings, so all lines end with CRLF only:
"
" :update      " Save any changes.
" :e ++ff=dos  " Edit file again, using dos file format ('fileformats' is ignored).[A 1]
" :w           " Write buffer using dos (CRLF) line endings.

" Use aliases from .bashrc
" https://github.com/tpope/vim-fugitive/issues/387
set shellcmdflag=-c
set shell=/bin/bash\ --rcfile\ ~/.bashrc

"}}}
" general config"{{{

" filetype "{{{

" filetype off        " VUNDLE requires to set off
syntax enable           " switch on syntax highlight
filetype plugin on  " This makes vim invoke Latex-Suite when you open a tex file
filetype indent on  " This enables automatic indentation as you type

"}}}
" cpoptions"{{{

set nocp            " compatible: makes VIMs behaviour similar to vi

" http://vi-improved.org/vimrc.html
set cpoptions=aABceFsmq
"             |||||||||
"             ||||||||+-- When joining lines, leave the cursor between joined lines
"             |||||||+-- When a new match is created (showmatch) pause for .5
"             ||||||+-- Set buffer options when entering the buffer
"             |||||+-- :write command updates current file name automatically add <CR> to the last line when using :@r
"             |||+-- Searching continues at the end of the match at the cursor position
"             ||+-- A backslash has no special meaning in mappings
"             |+-- :write updates alternative file name
"             +-- :read updates alternative file name

" cpoptions"}}}
" formatoptions"{{{

" How to set formatoptions depending on filetype is described here:
" http://vim.wikia.com/wiki/Disable_automatic_comment_insertion#Overriding_format_options_set_by_filetype_plugin

"       +++++-- auto-wrap text using textwidth
"       |++++-- Automatically insert the current comment leader after hitting 'o' or 'O' in Normal mode.
"       ||+++-- Trailing white space indicates a paragraph continues in the next line. A line that ends in a non-white character ends a paragraph.
"       |||++-- Automatic formatting of paragraphs. Every time text is inserted
"       |||| -- or deleted the paragraph will be reformatted. When the 'c' flag is present thisonly happens for recognized comments.
"       ||||
set fo-=towa
set fo+=cqrn
"       ||||
"       |||++-- When formatting text, recognize numbered lists. This actually uses the 'formatlistpat' option, thus any kind of list can be used
"       ||+++-- Automatically insert the current comment leader  after hitting <Enter> in Insert mode.
"       |++++-- Allow formatting of comments with "gq".
"       +++++-- Auto-wrap comments using textwidth, inserting the current comment leader automatically.

" "}}}
" settings "{{{

" set path"{{{

" default
set rtp+=$HOME/.vim
set rtp+=$VIM/vimfiles
set rtp+=$VIMRUNTIME
set rtp+=$VIM/vimfiles/after
set rtp+=$HOME/.vim/after

" extra
set rtp+=~/.vim/plugin/                " runtimepath: some extra plugins
set rtp+=~/.vim/bundle/vundle/         " runtimepath: adding vundle to runtimepath
set path=$PWD/**,$HOME/Unimaterialien  " path: sets current path variable for find command

" set path"}}}
" display settings"{{{

" Vim can highlight whitespaces for you in a convenient way:
exec "set listchars=tab:\uBB\uBB,trail:\uB7,nbsp:~"
" set listchars=tab:>.,trail:.,extends:#,nbsp:.,eol:Â¬
set list
set cuc                                   " cursorcolumn: highlight current column
set cul                                   " cursorline: show me where i am
set sc                                    " showcmd: show typed command in status bar
set sm                                    " showmatch: Show matching braces, somewhat annoying...
set smd                                   " showmode: show mode in status bar (insert/replace/...)
set ls=2                                  " laststatus: use 2 lines for the status bar
set mps+=<:>                              " matchpairs: specially for html
set mat=2                                 " matchtime: show matching bracket for 0.2 seconds
set nu                                    " number: show line numbers
set rnu                                   " rnu: relative line numbers
set so=5                                  " scrolloff: keep at least 5 lines above/below cursor
set title                                 " title: show title in console title bar
set wmnu                                  " wildmenu: completion with menu
set wmh=0                                 " winminheight: windows minimum height (values 0-3)
set wmw=1                                 " winminwidth: windows minimum width in columns (val 0-12)
au VimEnter * set wh=30                   " winheight: Minimal number of lines for the current window.
                                          " This is not a hard minimum, Vim will use fewer
                                          " lines if there is not enough room.  I
au VimEnter * set wiw=55                  " winwidth: Minimal number of columns for the current window.

" wildignore: patterns are ignored when expanding, completing file or directory names
set wig+=*.fff,*.out,*.ttt,*.o,*.obj,*.bak,*.exe,*.py[co],*.swp,*~,*.pyc,.svn
set wig+=*.log,*.aux,*.dvi,*.aut,*.aux,*.pdf,*.dvi,*.ps,*.toc,*.bbl,*.blg
set wig+=*.o,*~,*.cmo,*.cmi,*.a,*.cmx,*.cmxa,*.lo


"}}}
" editor settings"{{{

set ek                                               " esckeys: map missed escape sequences (enables keypad keys)
set ffs=unix,dos,mac                                 " fileformats: only detect unix fileformat, displays that ^M with dos files
"set ffs=mac                                         " ffs: only detect unix fileformat, displays that ^M with dos files

"}}}
" advanced settings "{{{

set t_Co=257
set enc=utf-8                          " encoding: 8-bit (latin1, iso-8859), 2-bit or unicode (utf-8)
set ls=2                               " laststatus: always show status line
set nf=octal,hex                       " nrformats: defines characters to increase by CTRL+A.
                                       " options: octal,hex,alpha
set cf                                 " confirm: get a dialog when :q, :w, or :wq fails
set lz                                 " lazyredraw: screen will only redraw once the macro has completed (speed up macros)
set vi='20,\"500                       " viminfo: remember copy registers after quitting in the .viminfo file -- 20 jump links, regs up to 500 lines'
set nopaste                            " paste: this is needed for use of abbreviations to be off
set cb-=unnamed                        " clipboard: yank and copy to X clipboard
set cb-=unnamedplus                    " clipboard: use yanking to clipboard as default
set tf                                 " ttyfast: smoother changes
set tsl=0                              " ttyscroll: turn off scrolling, didn't work well with PuTTY
set ml                                 " modeline: last lines in document sets vim mode
set mls=3                              " modelines: number lines checked for modelines

set nosol                              " startofline: jump to first character when paging
set ofu=syntaxcomplete#Complete        " omnifunc: completion http://vim.wikia.com/wiki/Omni_completion
set swb+=useopen,usetab                " switchbuf: This option controls the behavior when switching between buffers.
                                       " options: useopen, usetab, split, newtab
set noaw                               " autowrite: auto saves changes when quitting and swiching buffer
set noar                               " autoread: Set to auto read when a file is changed from the outside
set sm                                 " showmatch: Show matching braces, somewhat annoying...
set ul=1000                            " undolevels: number of undos
set hi=2000                            " history: remember last 2000 typed commands
set hid                                " hidden: It hides buffers instead of closing
                                       " them. This means that you can have
                                       " unwritten changes to a file and open
                                       " a new  file using :e, without being
                                       " forced to write or undo your changes
                                       " first. Also, undo buffers and marks
                                       " are preserved while the buffer is open.
set nobk                               " backup: backup~ files.
set bkc=auto
set bsk=/tmp/*,$TMPDIR/*,$TMP/*,$TEMP/*,*test*,*temp*,*tmp*,*tst*,*~,*bak   " backupskip
set su=.bak,~,.swp,.o,.info,.aux,.log,.dvi,.bbl,.blg,.out,.toc                " suffixes: for file names completion

"}}}
" search settings"{{{

set magic  " magic: change the way backslashes are used in search patterns
set hls    " hlsearch: When there is a previous search pattern, highlight all
set is     " incsearch: While typing a search command, show results immediately
set ic     " ignorecase: Ignore case in search patterns.
set sc     " smartcase: Override the 'ignorecase' option if the search
           " pattern contains upper case characters.
set ws     " wrapscan: end of search has been achieved!

" search settings"}}}

""}}}
" statusline & rulerline"{{{

" rulerline
set ru                                    " ruler: show cursor position in status bar
set ruf=%25(%n%m%r:\ %Y\ [%l,%v]\ %p%%%)  " rulerformat

" statusline
set ls=2  " last window will have a status line
" 0: never
" 1: only if there are at least two windows
" 2: always

" " number of current buffer
set stl=%n:
" " filename and -type
set stl+=[%f],[%{&fileencoding},%{&fileformat}]%<
" " options
set stl+=%m%r%h%w
" " formatoptions
set stl+=,[%{&fo}]
" " editorname
set stl+=,%y
" " current positon in file
set stl+=%=%-10.(%<\%l,%v%)\ %p%%

" statusline & rulerline"}}}
" session & viminfo settings"{{{

" " sessionoptions"{{{

" sessionoptions: saving a session to :mks [name] and reload with vim -S [name]
set ssop-=options,buffers
set ssop+=curdir,winsize
let g:PathToSessions = "$HOME/.vim/sessions"
" let g:PathToSessions += "."

""}}}
" " viminfo"{{{

" Tell vim to remember certain things when we exit
"  '10  :  marks will be remembered for up to 10 previously edited files
"  "100 :  will save up to 100 lines for each register
"  :20  :  up to 20 lines of command-line history will be remembered
"  %    :  saves and restores the buffer list
"  n... :  where to save the viminfo files
set vi='10,\"100,:20,%,n~/.viminfo     " viminfo

" comments: A comma separated list of strings that can start a comment line.
set com+=s2:/*,mb:*,ex:*/,://,b:#,:%,:XCOMM,n:>,b:-
" set com+=:%,:\\begin{,:\\end{,:\\title{,:\\author{,:\\subtitle{,:\\part{,:\\chapter{,:\\section{,:\\subsection{,:\\subsubsection{,:\\paragraph,:\\subparagraph{,:\\usepackage{,:\\documenclass{,:\\usepackage[,:\\item[,:\\item,:#

""}}}

"}}}

"}}}
" wrapping, folding & indentation"{{{

" folding"{{{

" fold settings

" foldopen: specifies for which type of commands folds will be opened, if the
" command moves the cursor into a closed fold.  It is a comma separated list of items.
set fdo+=block     " fdo: "(", "{", "[[", "[{", etc.
set fdo+=hor       " fdo: horizontal movements: "l", "w", "fx", etc.
set fdo+=insert    " fdo: any command in Insert mode
set fdo+=jump      " fdo: far jumps: "G", "gg", etc.
set fdo+=mark      " fdo: jumping to a mark: "'m", CTRL-O, etc.
set fdo+=percent   " fdo: "%"
set fdo+=quickfix  " fdo: ":cn", ":crew", ":make", etc.
set fdo+=search    " fdo: search for a pattern: "/", "n", "*", "gd", etc.  (not for
           " a search pattern in a ":" command) Also for |[s| and |]s|.
set fdo+=tag       " fdo: jumping to a tag: ":ta", CTRL-T, etc.
set fdo+=undo      " fdo: undo or redo: "u" and CTRL-R
" set fdo=all      " fdo: any

set fen            " fen: enable folding
set fdl=1          " foldlevel: Folds with a higher level will be closed.
           " Setting this option to zero will close all folds.  Higher numbers will
           " close fewer folds.
set fdls=0         " foldlevelstart: Sets 'foldlevel' when starting to edit another buffer in a window.
           " Useful to always start editing with all folds closed (value zero),
           " some folds closed (one) or no folds closed (99).
set fdc=4          " foldcolumn: sets rows to show fold information
set fcl=all        " foldclose: When set to "all", a fold is closed when the cursor isn't in it and
           " its level is higher than 'foldlevel'.  Useful if you want folds to
           " automatically close when moving out of them.
set fdn=2          " foldnestmax: Sets the maximum nesting of folds for the "indent" and "syntax" methods (with max = 20)
set fdm=syntax     " foldmethod: manual, indent, expr, marker, syntax or diff

" define folds for different syntaxes
" http://stackoverflow.com/a/4789615
let javaScript_fold=1             " JavaScript
let perl_fold=1                   " Perl
let php_folding=1                 " PHP
let r_syntax_folding=1            " R
let ruby_fold=1                   " Ruby
let sh_fold_enabled=1             " sh
let vimsyn_folding='af'           " Vim script
let xml_syntax_folding=1          " XML


" TeX
" http://www.kph.tuwien.ac.at/bertle/tex_vim/README.txt
let tex_fold=1
let tex_fold_multilinecomments=1
let tex_fold_environments=1

"}}}
" indentation "{{{

set sta                  " smarttab: smart tab handling for indenting
set bs=indent,eol,start  " backspace: Allow backspacing over everything in insert mode
set et                   " expandtab: tabs are converted to spaces, use only when required
set nocin                " indent: enables automatic C program indenting.
             " options: smart-/auto-/cindent
set ci                   " copyindent: copy the previous indentation on autoindenting
set si                   " smartindent: turn on smart indenting. Availabile

" If you prefer to work with tab characters then it is a good idea to ensure that tabstop == softtabstop. This makes it less likely that youâll end up with a mixture of tabs and spaces for indentation.

" If you prefer to work with spaces, then it is preferable to ensure that softtabstop == shiftwidth. This way, you can expect the same number of spaces to be inserted whether you press the tab key in insert mode, or use the indentation commands in normal/visual modes.
set sw=4                 " shiftwidth: number of spaces to use for autoindenting
set sts=4                " softtabstop: make the four spaces feel like a tab
set ts=4                 " tabstop: number of spaces a tab counts for

" indentkeys: a list of keys that, when typed in insert mode, cause reindenting of
" the current line. only happens if 'indentexpr' isn't empty.
setlocal indk+=}
setlocal indk+=\\item
setlocal indk+=\\bibitem
setlocal indk+=\\else
setlocal indk+=\\fi
setlocal indk+=\\or
setlocal indk+=\\]

"}}}
" linewrapping"{{{

set sbr=""              " showbreak: note trailing space at end of next line
set sr                  " shiftround: use multiple of shiftwidth when indenting with '<' and '>'
set lbr                 " linebreak: wrap at word
set ww=b,s,h,l,<,>,[,]  " whichwrap: allow specified keys that move the cursor left/right.
" set tw=0              " textwidth: set linebreak. default: 80
" set nowrap            " nowrap: wrap/nowrap: this option is better set through formatoptions

"}}}
" automatically remove trailing whitespace"{{{

autocmd BufWritePre *.tex :%s/\s\+$//e

""}}}

"}}}
" miscellanious"{{{

" functions"{{{

" enhanced increase number"{{{

" http://vim.wikia.com/wiki/Increasing_or_decreasing_numbers?action=edit&section=3
function! AddSubtract(char, back)
  let pattern = &nrformats =~ 'alpha' ? '[[:alpha:][:digit:]]' : '[[:digit:]]'
  call search(pattern, 'cw' . a:back)
  execute 'normal! ' . v:count1 . a:char
  silent! call repeat#set(":\<c-u>call AddSubtract('" .a:char. "', '" .a:back. "')\<cr>")
endfunction
nnoremap <silent>         <c-a> :<c-u>call AddSubtract("\<c-a>", '')<cr>
nnoremap <silent> <leader><c-a> :<c-u>call AddSubtract("\<c-a>", 'b')<cr>
nnoremap <silent>         <c-x> :<c-u>call AddSubtract("\<c-x>", '')<cr>
nnoremap <silent> <leader><c-x> :<c-u>call AddSubtract("\<c-x>", 'b')<cr>

""}}}
" restore key position"{{{

function! ResCur()
  if line("'\"") <= line("$")
    normal! g`"
    return 1
  endif
endfunction

" ""}}}

"}}}
" augroups"{{{

" change delay-time depending on mode"{{{

" http://www.reddit.com/r/vim/comments/2362q1/let_mapleader_now_how_do_i_get_rid_of_that_delay/

augroup FastEscape
    autocmd!
    au InsertEnter * set timeoutlen=10
    au InsertLeave * set timeoutlen=1000
augroup END

" ""}}}
" restores the cursor position and its autocmd so that it gets triggered"{{{

augroup ResCur
  autocmd!
  autocmd BufWinEnter * call ResCur()
augroup END

" """}}}

"}}}
" error messages"{{{

set ch=3                        " cmdheight: Number of screen lines to use for the
                       " command-line. surpress errormessage when
                       " working with buffers
set cwh=3                        " cmdwinheight
set shm=atI                      " shortmess: Abbreviate messages
" a         all abbreviations
" t         truncate file message at the start if it is too long to fit
        " on the command-line, "<" will appear in the left most column.
        " Ignored in Ex mode.
" I         don't give the intro message when starting Vim |:intro|.
set noeb                       " noerrorbells: do/don't beep when error
set vb t_vb=                   " visualbell: When no beep or flash is wanted, use "vb t_vb="

"}}}
" dictionary & thesaurus"{{{

set dict=~/.aspell.de.pws
set dict+=~/.vim/spell                                                     " dict: set dirs of dictionaries
set nospell                                                                " spell: set spell spelllang=de,en
set cpt+=k                                                            " complete: enable dictionary completion
set thesaurus+=~/.vim/thesaurus/thes_de.txt,~/.vim/thesaurus/thes_eng.txt  " thesaurus: using thesaurus by CTR+X CTRL+T in insert mode.
" set iskeyword+=32-127,^,                                                 " iskeyword: thesaurus uses phrases witch contain spaces so account for them
set iskeyword+="@,48-57,_,192-255"                                         " iskeyword: Keywords for recognizing beginning/end of word eg. in movements like w,e...
setlocal keywordprg=trs\ {en=@en+de}                                            " googletranslate word under cursor - english
setlocal keywordprg=trs\ {es=@es+de}                                            " googletranslate word under cursor - espaÃ±ol
set nolisp                                                                 " nolisp: When <Enter> is typed in insert mode set the indent for the next line to Lisp
                                       " standards (default: off)

" "}}}

"}}}
