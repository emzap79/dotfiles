" vim:fdm=marker
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" VIMRC GENERAL "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" File: vimrc_general
" Author: Jonas Petong
" Description: basic vimrc settings
" Last Modified: Mai 13, 2014

" font matters"{{{

" description"{{{

" vim <-- starts Vim normally, reading ~/.vimrc
" vim -u ~/.vimsqlrc <-- starts Vim using your alternative vimrc
" vim -u NONE <-- starts Vim without any vimrc
" vim -u NORC <-- starts Vim without any vimrc, but with plugins

" Convert from dos/unix to dos
" http://vim.wikia.com/wiki/File_format
" To convert the current file from any mixture of CRLF/LF-only line endings, so all lines end with CRLF only:
"
" :update " Save any changes.
" :e ++ff=dos " Edit file again, using dos file format ('fileformats' is ignored).[A 1]
" :w " Write buffer using dos (CRLF) line endings.

" description"}}}
" set shell"{{{

" Use aliases from .bashrc
" https://github.com/tpope/vim-fugitive/issues/387
set shellcmdflag=-c
set shell=/bin/bash\ --rcfile\ ~/.bashrc

" set shell"}}}
" filetype "{{{

filetype off       " VUNDLE requires to set off
syntax enable      " switch on syntax highlight
filetype plugin on " This makes vim invoke Latex-Suite when you open a tex file
filetype indent on " This enables automatic indentation as you type

" filetype "}}}

" font matters"}}}
" general config"{{{

" display"{{{

set list
set ut=1000                                    " updatetime: interval in msec for bufferupdate (def: 4000)
set cuc                                        " cursorcolumn: highlight current column
set cul                                        " cursorline: show me where i am
set sc                                         " showcmd: show typed command in status bar
set sm                                         " showmatch: Show matching braces, somewhat annoying...
set smd                                        " showmode: show mode in status bar (insert/replace/...)
set mps+=<:>                                   " matchpairs: specially for html
set mat=2                                      " matchtime: show matching bracket for 0.2 seconds
set nu                                         " number: show line numbers
set rnu                                        " rnu: relative line numbers
set so=5                                       " scrolloff: keep at least 5 lines above/below cursor
set title                                      " title: show title in console title bar
set t_ut=                                      " fix tmux color issues
set cwh=3                                      " cmdwinheight
set ch=3                                       " cmdheight: Number of screen lines to use for the
                                            " command-line. surpress errormessage when
                                            " working with buffers
set wmh=0                                      " winminheight: windows minimum height (values 0-3)
set wmw=1                                      " winminwidth: windows minimum width in columns (val 0-12)
au VimEnter * set wh=30                        " winheight: Minimal number of lines for the current window.
                                            " This is not a hard minimum, Vim will use fewer
                                            " lines if there is not enough room. I
au VimEnter * set wiw=55                       " winwidth: Minimal number of columns for the current window.

" rulerline
set ru                                         " ruler: show cursor position in status bar
set ruf=%25(%n%m%r:\ %Y\ [%l,%v]\ %p%%%)       " rulerformat

" statusline
set ls=2                                       " last window will have a status line, options:
                                            " 0 - never,
                                            " 1 - only if there are at least two windows,
                                            " 2 - always

" listchars: vim can highlight whitespaces for you in a convenient way
exec "set lcs=tab:\uBB\uBB,trail:\uB7,nbsp:~"

" display"}}}
" editor"{{{

set ek                           " esckeys: map missed escape sequences (enables keypad keys)
set t_Co=257
set enc=utf-8                    " encoding: 8-bit (latin1, iso-8859), 2-bit or unicode (utf-8)
set nf=octal,hex                 " nrformats: defines characters to increase by CTRL+A.
                                " options: octal,hex,alpha
set cf                           " confirm: get a dialog when :q, :w, or :wq fails
set lz                           " lazyredraw: screen will only redraw once the macro has completed (speed up macros)
set nopaste                      " paste: this is needed for use of abbreviations to be off
set cb-=unnamed                  " clipboard: yank and copy to X clipboard
set cb-=unnamedplus              " clipboard: use yanking to clipboard as default
set tf                           " ttyfast: smoother changes
set tsl=0                        " ttyscroll: turn off scrolling, didn't work well with PuTTY
set ml                           " modeline: last lines in document sets vim mode
set mls=3                        " modelines: number lines checked for modelines
set nosol                        " startofline: jump to first character when paging
set ofu=syntaxcomplete#Complete  " omnifunc: completion http://vim.wikia.com/wiki/Omni_completion
set swb+=useopen,usetab          " switchbuf: This option controls the behavior when switching between buffers.
                                " options are - useopen, usetab, split, newtab
set noaw                         " autowrite: auto saves changes when quitting and swiching buffer
set noar                         " autoread: Set to auto read when a file is changed from the outside
set sm                           " showmatch: Show matching braces, somewhat annoying...
set ul=1000                      " undolevels: number of undos
set hi=2000                      " history: remember last 2000 typed commands
set hid                          " hidden: It hides
                                " buffers instead of closing them. This means that you can have unwritten
                                " changes to a file and open a new file using :e, without being forced to
                                " write or undo your changes first. Also, undo buffers and marks are
                                " preserved while the buffer is open.
set nobk                         " backup: backup~ files.
set bkc=auto                     " When writing a file and a backup is made, this option tells how it's done.

" editor"}}}
" search"{{{

set magic                                      " magic: change the way backslashes are used in search patterns
set hls                                        " hlsearch: When there is a previous search pattern, highlight all
set is                                         " incsearch: While typing a search command, show results immediately
set ic
set sc                                         " smartcase: Override the 'ignorecase' option if the search
                                            " pattern contains upper case characters.
set ws                                         " wrapscan: end of search has been achieved!

" search"}}}
" folding"{{{

" fold settings
set fen                                        " fen: enable folding
set fdl=1                                      " foldlevel: Folds with a higher level will be closed.
                                            " Setting this option to zero will close all folds. Higher numbers will
                                            " close fewer folds.
set fdls=0                                     " foldlevelstart: Sets 'foldlevel' when starting to edit another buffer in a window.
                                            " Useful to always start editing with all folds closed (value zero),
                                            " some folds closed (one) or no folds closed (99).
set fcl=all                                    " foldclose: When set to "all", a fold is closed when the cursor isn't in it and
                                            " its level is higher than 'foldlevel'. Useful if you want folds to
                                            " automatically close when moving out of them.
set fdc=4                                      " foldcolumn: sets rows to show fold information
set fdn=2                                      " foldnestmax: Sets the maximum nesting of folds for the "indent" and "syntax" methods (with max = 20)
" set fdm=marker                                 " foldmethod: manual, indent, expr, marker, syntax or diff

" foldtext: a string option that specifies an expression. This
" expression is evaluated to obtain the text displayed for a closed fold.
set fdt=MyFoldText()
" func_myfoldtext"{{{

fun! MyFoldText()
let line = getline(v:foldstart)
let sub = substitute(line, '/\*\|\*/\|{{{\d\=', '', 'g')
return v:folddashes . sub
endfunction "}}}

" func_myfoldtext"}}}

" define folds for different syntaxes
" http://stackoverflow.com/a/4789615
let javaScript_fold=1                          " JavaScript
let perl_fold=1                                " Perl
let php_folding=1                              " PHP
let r_syntax_folding=1                         " R
let ruby_fold=1                                " Ruby
let sh_fold_enabled=1                          " sh
let vimsyn_folding='af'                        " Vim script
let xml_syntax_folding=1                       " XML
let markdown_syntax_folding=1                  " Markdown

" TeX
" http://www.kph.tuwien.ac.at/bertle/tex_vim/README.txt
let tex_fold=1
let tex_fold_multilinecomments=1
let tex_fold_environments=1

" folding"}}}
" indentation "{{{

set sta                                        " smarttab: smart tab handling for indenting
set bs=indent,eol,start                        " backspace: Allow backspacing over everything in insert mode
set et                                         " expandtab: tabs are converted to spaces, use only when required
set sr                                         " shiftround: use multiple of shiftwidth when indenting with '<' and '>'
set ci                                         " copyindent: copy the previous indentation on autoindenting
set si                                         " smartindent: turn on smart indenting. Availabile
                                            " options: smart-/auto-/cindent

set sw=4                                       " shiftwidth: number of spaces to use for autoindenting
set sts=4                                      " softtabstop: make the four spaces feel like a tab
set ts=4                                       " tabstop: number of spaces a tab counts for

" If you prefer to work with tab characters then it is a good idea to ensure
" that tabstop == softtabstop. This makes it less likely that you’ll end up
" with a mixture of tabs and spaces for indentation.

" If you prefer to work with spaces, then it is preferable to ensure that
" softtabstop == shiftwidth. This way, you can expect the same number of
" spaces to be inserted whether you press the tab key in insert mode, or use
" the indentation commands in normal/visual modes.

" indentation "}}}
" linewrapping"{{{

set sbr=""                                     " showbreak: note trailing space at end of next line
set lbr                                        " linebreak: wrap at word
set ww=b,s,h,l,<,>,[,]                         " whichwrap: allow specified keys that move the cursor left/right.

" linewrapping"}}}
" error messages"{{{

set noeb                                       " noerrorbells: do/don't beep when error
set vb t_vb=                                   " visualbell: no beep or flash is wanted, use

" error messages"}}}
" dictionary & thesaurus"{{{

set dict+=~/.aspell.de.pws
set dict+=~/.vim/spell                         " dict: set dirs of dictionaries
set cpt+=k                                     " complete: enable dictionary completion
set tsr+=~/.vim/thesaurus/thes_de.txt
set tsr+=~/.vim/thesaurus/thes_eng.txt         " thesaurus: using thesaurus by CTR+X CTRL+T in insert mode.
setlocal keywordprg=trs\ {en=@en+de}           " googletranslate word under cursor - english
setlocal keywordprg=trs\ {es=@es+de}           " googletranslate word under cursor - español
set nolisp                                     " nolisp: When <Enter> is typed in insert mode set the indent for the next line to Lisp
                                            " standards (default: off)
set nospell                                    " spell: set spell spelllang=de,en

" dictionary & thesaurus"}}}

" general config"}}}
" advanced settings "{{{

" cpoptions"{{{

set nocp " compatible: makes VIMs behaviour similar to vi

" http://vi-improved.org/vimrc.html
set cpo+=aABceFsmq
"        |||||||||
"        ||||||||+-- When joining lines, leave the cursor between joined lines
"        |||||||+-- When a new match is created (showmatch) pause for .5
"        ||||||+-- Set buffer options when entering the buffer
"        |||||+-- :write command updates current file name automatically add <CR> to the last line when using :@r
"        |||+-- Searching continues at the end of the match at the cursor position
"        ||+-- A backslash has no special meaning in mappings
"        |+-- :write updates alternative file name
"        +-- :read updates alternative file name

" cpoptions"}}}
" formatoptions"{{{

" How to set formatoptions depending on filetype is described here:
" http://vim.wikia.com/wiki/Disable_automatic_comment_insertion#Overriding_format_options_set_by_filetype_plugin

"       +-- auto-wrap text using textwidth
"       |+-- Automatically insert the current comment leader after hitting 'o' or 'O' in Normal mode.
"       ||+-- Trailing white space indicates a paragraph continues in the next line. A line that ends in a non-white character ends a paragraph.
"       |||+--- Automatic formatting of paragraphs. Every time text is inserted
"       |||>    or deleted the paragraph will be reformatted. When the 'c' flag is present thisonly happens for recognized comments.
"       ||||
set fo-=towa
set fo+=cqrnl
"       |||||
"       ||||+-- Long lines are not broken in insert mode.
"       |||+-- When formatting text, recognize numbered lists. This actually uses the 'formatlistpat' option, thus any kind of list can be used
"       ||+-- Automatically insert the current comment leader after hitting <Enter> in Insert mode.
"       |+-- Allow formatting of comments with "gq".
"       +-- Auto-wrap comments using textwidth, inserting the current comment leader automatically.

" formatoptions"}}}
" shortmessage"{{{

" shortmess: abbreviate messages
set shm+=atI
"        |||
"        ||+--  don't give the intro message when starting Vim
"        |+--  truncate file message at the start if it is too long to fit
"        +--  all abbreviations (filmnrwx) - see :h 'shm'

" shortmessage"}}}
" runtimepath"{{{

" default
set rtp+=$HOME/.vim
set rtp+=$VIM/vimfiles
set rtp+=$VIMRUNTIME
set rtp+=$VIM/vimfiles/after
set rtp+=$HOME/.vim/after

" extra
set rtp+=~/.vim/plugin/                " runtimepath: some extra plugins
set rtp+=~/.vim/bundle/vundle/         " runtimepath: adding vundle to runtimepath

set path=$PWD/**,$HOME/Unimaterialien  " path: sets current path variable for find command

" runtimepath"}}}
" fileformats"{{{

" fileformats: only detect unix fileformat, displays ^M for 'newline'
" with dos files
set ffs+=unix
set ffs+=dos
set ffs+=mac

" fileformats"}}}
" wildignore"{{{

" When 'wildmenu' is on, command-line completion operates in an enhanced
" mode.  On pressing 'wildchar' (usually <Tab>) to invoke completion,
" the possible matches are shown just above the command line, with the
" first match highlighted (overwriting the status line, if there is one).
set wmnu      " wildmenu: completion with menu
set wc=<Tab>  " wildchar: Character you have to type to start wildcard
            " expansion in the command-line, as specified with 'wildmode'.

" wildignore: patterns are ignored when expanding, completing file or
" directory names

set wig+=*.a
set wig+=*.aut
set wig+=*.aux
set wig+=*.bak
set wig+=*.bbl
set wig+=*.blg
set wig+=*.cmi
set wig+=*.cmo
set wig+=*.cmx
set wig+=*.cmxa
set wig+=*.dvi
set wig+=*.exe
set wig+=*.fff
set wig+=*.lo
set wig+=*.log
set wig+=*.o
set wig+=*.obj
set wig+=*.out
set wig+=*.pdf
set wig+=*.ps
set wig+=*.py[co]
set wig+=*.swp
set wig+=*.toc
set wig+=*.ttt
set wig+=*~
set wig+=.svn

" wildignore"}}}
" viminfo"{{{

" Tell vim to remember certain things when we exit
set vi='10          " marks will be remembered for up to 10 previously edited files
set vi+=\"500       " will save up to 500 lines for each register
set vi+=:20         " up to 20 lines of command-line history will be remembered
set vi+=%           " saves and restores the buffer list
set vi+=n~/.viminfo " n... : where to save the viminfo files

" viminfo"}}}
" comments"{{{

" comments: a comma separated list of strings that can start a comment line.
set com+=s2:/*
set com+=mb:*
set com+=ex:*/
set com+=://
set com+=b:#
set com+=:%
set com+=:XCOMM
set com+=n:>
set com+=b:-

" set com+=:%
" set com+=:\\begin{
" set com+=:\\end{
" set com+=:\\title{
" set com+=:\\author{
" set com+=:\\subtitle{
" set com+=:\\part{
" set com+=:\\chapter{
" set com+=:\\section{
" set com+=:\\subsection{
" set com+=:\\subsubsection{
" set com+=:\\paragraph
" set com+=:\\subparagraph{
" set com+=:\\usepackage{
" set com+=:\\documenclass{
" set com+=:\\usepackage[
" set com+=:\\item[
" set com+=:\\item
" set com+=:#

" comments"}}}
" iskeyword/-fname/-print"{{{

" iskeyword: Keywords for recognizing beginning/end of word eg. in movements like w,e...
set isk-=.  " add dots as end of word (isk-=.)

set isk+="@
set isk+=48-57
set isk+=_
set isk+=192-255"

" isfname: The characters specified by this option are included in file names and path
" names. Filenames are used for commands like "gf", "[i" and in the tags file.
" It is also used for "\f" in a pattern.
" set isf+=

" isident: included in identifiers. Identifiers are used in recognizing environment
" variables and after a match of the 'define' option. It is also used for "\i"
" in a pattern.
" set isi+=

" isfname/-keyword/-print"}}}
" backupskip"{{{

" backupskip: When one of the patterns matches with the name of the file which
" is written, no backup file is created. Both the specified file name and the
" full path name of the file are used.

set bsk=/tmp/*
set bsk+=$TMPDIR/*
set bsk+=$TMP/*
set bsk+=$TEMP/*
set bsk+=*test*
set bsk+=*temp*
set bsk+=*tmp*
set bsk+=*tst*
set bsk+=*~
set bsk+=*bak

" backupskip"}}}
" indentkeys"{{{

" indentkeys: a list of keys that, when typed in insert mode, cause reindenting of
" the current line. only happens if 'indentexpr' isn't empty.
setlocal indk+=}
setlocal indk+=\\item
setlocal indk+=\\bibitem
setlocal indk+=\\else
setlocal indk+=\\fi
setlocal indk+=\\or
setlocal indk+=\\]

" indentkeys"}}}
" suffixes"{{{

set su=.bak
set su+=~
set su+=.swp
set su+=.o
set su+=.info
set su+=.aux
set su+=.log
set su+=.dvi
set su+=.bbl
set su+=.blg
set su+=.out
set su+=.toc " suffixes: for file names completion

" suffixes"}}}
" foldopen"{{{

" foldopen: specifies for which type of commands folds will be opened, if the
" command moves the cursor into a closed fold. It is a comma separated list of items.
set fdo+=block     " "(", "{", "[[", "[{", etc.
set fdo+=hor       " horizontal movements: "l", "w", "fx", etc.
set fdo+=insert    " any command in Insert mode
set fdo+=jump      " far jumps: "G", "gg", etc.
set fdo+=mark      " jumping to a mark: "'m", CTRL-O, etc.
set fdo+=percent   " "%"
set fdo+=quickfix  " ":cn", ":crew", ":make", etc.
set fdo+=search    " search for a pattern: "/", "n", "*", "gd", etc. (not for
                " a search pattern in a ":" command) Also for |[s| and |]s|.
set fdo+=tag       " jumping to a tag: ":ta", CTRL-T, etc.
set fdo+=undo      " undo or redo: "u" and CTRL-R
" set fdo=all      " any

" foldopen"}}}
" statusline"{{{

" laststatus: always show status line
set ls=2

" number of current buffer
set stl=%02n\|
" filename
set stl+=%t\|
" formatoptions
set stl+=\|%{&fo}\|
" filetype
set stl+=\|%{strlen(&ft)?&ft:'none'}\|

" filencoding, fileformat
" http://stackoverflow.com/a/5375338/3569509
set stl+=%=%({%{&ff}\|%{(&fenc==\"\"?&enc:&fenc)}%k\|%Y}%)
" " current positon in file
set stl+=\ %(\|%l,%v\|\|%p%%\|\ %)

" statusline"}}}

" advanced settings "}}}
" autogroups"{{{

" To enter autocommands for a specific group, use this method:
" 1. Select the group with ":augroup {name}".
" 2. Delete any old autocommands with ":au!".
" 3. Define the autocommands.
" 4. Go back to the default group with "augroup END".

" VimEnter"{{{

aug VE
au!
aug END

" VimEnter"}}}
" InsertEnter"{{{

aug IE
au!
" change delay-time depending on mode
" http://www.reddit.com/r/vim/comments/2362q1/let_mapleader_now_how_do_i_get_rid_of_that_delay/
au InsertEnter * set timeoutlen=10
au InsertLeave * set timeoutlen=1000
aug END

" InsertEnter"}}}
" BufWritePre"{{{

aug BWP
au!
" automatically remove trailing whitespace
au BufWritePre * :%s/\s\+$//e
aug END

" BufWritePre"}}}
" BufWinEnter"{{{

aug BWE
au!
" restores the cursor position and its au so that it gets triggered
au BufWinEnter * call ResCur()
" show all marks for [count] movements when entering buffer
au BufWinEnter * :15ShowMarksOnce
aug END

" BufWinEnter"}}}
" Filetypedetect"{{{
" http://www.r-bloggers.com/sweave-syntax-highlighting-in-vim/

augroup filetypedetect
au! BufRead,BufNewFile *.r         setf r
au! BufRead,BufNewFile *.R         setf r
au! BufRead,BufNewFile *.Rnw       setf noweb
au! BufRead,BufNewFile *.textmpl   setf textmpl
augroup END

" Filetypedetect"}}}
" autogroups"}}}
" autocmds"{{{

" Markdown
" au BufNewFile,BufReadPost *.markdown,*.mdown,*.mkd,*.mkdn,README.md  set ft=markdown

" autocmds"}}}
