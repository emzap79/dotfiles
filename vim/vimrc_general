" vim:ft=vim fdm=marker
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" VIMRC GENERAL "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" File: vimrc_general
" Author: Jonas Petong
" Description: basic vimrc settings
" Last Modified: August 20, 2014

" Font Matters                                                " {{{1

" description                                                 " {{{2

" vim <-- starts Vim normally, reading ~/.vimrc
" vim -u ~/.vimsqlrc <-- starts Vim using your alternative vimrc
" vim -u NONE <-- starts Vim without any vimrc
" vim -u NORC <-- starts Vim without any vimrc, but with plugins

" Convert from dos/unix to dos
" http://vim.wikia.com/wiki/File_format
" To convert the current file from any mixture of CRLF/LF-only line endings, so all lines end with CRLF only:
"
" :update " Save any changes.
" :e ++ff=dos " Edit file again, using dos file format ('fileformats' is ignored).[A 1]
" :w " Write buffer using dos (CRLF) line endings.

" set shell                                                   " {{{2

" Use aliases from .bashrc
" https://github.com/tpope/vim-fugitive/issues/387
set shellcmdflag=-c
set shell=/bin/bash\ --rcfile\ ~/.bashrc

" filetype                                                    " {{{2

filetype off       " VUNDLE requires to set off
syntax enable      " switch on syntax highlight
filetype plugin on " This makes vim invoke Latex-Suite when you open a tex file
filetype indent on " This enables automatic indentation as you type


" General Config                                              " {{{1

" display                                                     " {{{2

set cuc        " cursorcolumn: highlight current column
set cul        " cursorline: show me where i am
set go-=Lr     " guioptions: remove sidebar, scrollbar
set list       " list: useful to see the difference between tabs and spaces
               " and for trailing blanks. Further changed by the 'listchars' option.
set mat=2      " matchtime: show matching bracket for 0.2 seconds
set mouse-=a   " mouse support for terminal vim
set mps+=<:>   " matchpairs: specially for html
set nojs       " joinspaces: when joining paragraphs, don't seperate by space
set nu         " number: show line numbers
set rnu        " rnu: relative line numbers
set sc         " showcmd: show typed command in status bar
set sm         " showmatch: Show matching braces, somewhat annoying...
set smc=200    " synmaxcol: vim is often slow with long lines that are syntax
               " highlighted, so limit to 200 characters in length
set smd        " showmode: show mode in status bar (insert/replace/...)
set so=5       " scrolloff: keep at least 5 lines above/below cursor
set t_ut=      " fix tmux color issues
set title      " terminal title set to buffer name
set ut=1000    " updatetime: interval in msec for bufferupdate (def: 4000)

" winheigth & -width
set cwh=3      " cmdwinheight
set ch=3       " cmdheight: Number of screen lines to use for the
               " command-line. surpress errormessage when
               " working with buffers
set wmh=0      " winminheight: windows minimum height (values 0-3)
set wmw=1      " winminwidth: windows minimum width in columns (val 0-12)
" winheight/-width: Minimal number of lines for the current window. This
" is not a hard minimum, Vim will use fewer lines if there is not enough room.

" open split buffers below and to right instead of above and to left
set sb         " splitbelow
set spr        " splitright

" exclude predefined filetypes from windowsettings
" http://stackoverflow.com/a/10410590/3569509
let blacklist = ['gitcommit', 'quickfix']
aug whatever
    au!
    au VimEnter,BufWritePre * if index(blacklist, &ft) < 0 | set wh=30
    au VimEnter,BufWritePre * if index(blacklist, &ft) < 0 | set wiw=55
aug END

" rulerline
set ru                                         " ruler: show cursor position in status bar
set ruf=%25(%n%m%r:\ %Y\ [%l,%v]\ %p%%%)       " rulerformat

" listchars: vim can highlight whitespaces for you in a convenient way
exec "set lcs=tab:\uBB\uBB,trail:\uB7,nbsp:~"

" editor                                                      " {{{2

set ek                          " esckeys: no delay for ESC, but cannot use ESC as beginning of key sequence
set t_Co=257
set enc=utf-8                   " encoding: 8-bit (latin1, iso-8859), 2-bit or unicode (utf-8)
set nf=octal,hex                " nrformats: defines characters to increase by CTRL+A.
                                " options: octal,hex,alpha
set cf                          " confirm: get a dialog when :q, :w, or :wq fails
set lz                          " lazyredraw: screen will only redraw once the macro has completed (speed up macros)
set nopaste                     " paste: this is needed for use of abbreviations to be off
set cb-=unnamed,unnamedplus     " clipboard: yank and copy to clipboard, X clipboard by default
set tf                          " ttyfast: smoother changes
set tsl=0                       " ttyscroll: turn off scrolling, didn't work well with PuTTY
set ml                          " modeline: last lines in document sets vim mode
set mls=3                       " modelines: number lines checked for modelines
set nosol                       " startofline: jump to first character when paging
set ofu=syntaxcomplete#Complete " omnifunc: completion http://vim.wikia.com/wiki/Omni_completion
set swb+=useopen,usetab         " switchbuf: This option controls the behavior when switching between buffers.
                                " options are - useopen, usetab, split, newtab
set noaw                        " autowrite: auto saves changes when quitting and swiching buffer
set noar                        " autoread: Set to auto read when a file is changed from the outside
set sm                          " showmatch: Show matching braces, somewhat annoying...
set ul=1000                     " undolevels: number of undos
set hid                         " hidden: It hides buffers instead of
                                " closing them. Also, undo buffers and marks are
                                " preserved while the buffer is open.
set nobk                        " backup: backup~ files.
set bkc=auto                    " When writing a file and a backup is made, this option tells how it's done.

" search                                                      " {{{2

set nows      " wrapscan: messaging when 'end of search has been achieved'
set magic     " magic: change the way backslashes are used in search patterns
set hls       " hlsearch: When there is a previous search pattern, highlight all
set is        " incsearch: While typing a search command, show results immediately
set ic
set sc        " smartcase: Override the 'ignorecase' option if the search
              " pattern contains upper case characters.

" diffopt                                                     " {{{2

" diffopt: Option settings for diff mode.
set dip=filler,context:6

" filler: Show filler lines, to keep the
" text synchronized with a window that has
" inserted lines at the same position.

" context: Use a context of {n} lines
" between a change and a fold that
" contains unchanged lines. When omitted a
" context of six lines is used.

" folding                                                     " {{{2

" fold settings
set fen           " fen: enable folding
set fdl=1         " foldlevel: Folds with a higher level will be closed.
                  " Setting this option to zero will close all folds. Higher numbers will
                  " close fewer folds.
set fdls=0        " foldlevelstart: Sets 'foldlevel' when starting to edit another buffer in a window.
                  " Useful to always start editing with all folds closed (value zero),
                  " some folds closed (one) or no folds closed (99).
set fcl=all       " foldclose: When set to " all", a fold is closed when the cursor isn't in it and
                  " its level is higher than 'foldlevel'. Useful if you want folds to
                  " automatically close when moving out of them.
set fdc=4         " foldcolumn: sets rows to show fold information
set fdn=2         " foldnestmax: Sets the maximum nesting of folds for the
                  " indent" and "syntax" methods (with max = 20)
set fml=2         " foldminlines: minimum number of screen lines for a fold to
                  " be displayed closed

" foldtext: a string option that specifies an expression. This
" expression is evaluated to obtain the text displayed for a closed fold.
set fdt=MyFoldText()
" func: myfoldtext                                             " {{{3

fun! MyFoldText()
let line = getline(v:foldstart)
let sub = substitute(line, '/\*\|\*/\|{{{\d\=', '', 'g')
return v:folddashes . sub
endfunction


" define folds for different syntaxes
" http://stackoverflow.com/a/4789615
let javaScript_fold=1                          " JavaScript
let perl_fold=1                                " Perl
let php_folding=1                              " PHP
let r_syntax_folding=1                         " R
let ruby_fold=1                                " Ruby
let sh_fold_enabled=1                          " sh
let vimsyn_folding='af'                        " Vim script
let xml_syntax_folding=1                       " XML
let markdown_syntax_folding=1                  " Markdown

" TeX
" http://www.kph.tuwien.ac.at/bertle/tex_vim/README.txt
let tex_fold=1
let tex_fold_multilinecomments=1
let tex_fold_environments=1

" timeout                                                     " {{{2

set to tm=3000 ttm=100      " timeout, timeoutlen, ttimeoutlen: time out on
                            " mapping after three seconds, time out on key
                            " codes after a tenth of a second.

" indentation                                                 " {{{2

set bs=indent,eol,start " backspace: Allow backspacing over everything in insert mode
set sr                  " shiftround: use multiple of shiftwidth when indenting with '<' and '>'
set nosi                " smartindent: turn on smart indenting.
set ai                  " autoindent: automatically indent new line
set ci                  " copyindent: copy the previous indentation on autoindenting

" tabstops                                                    " {{{2

set sta                 " smarttab: smart tab handling for indenting
set et                  " expandtab: tabs are converted to spaces
set sw=4                " shiftwidth: number of spaces to use for autoindenting
set sts=4               " softtabstop: make the four spaces feel like a tab
set ts=4                " tabstop: number of spaces a tab counts for

" If you prefer to work with tab characters then it is a good idea to ensure
" that tabstop == softtabstop. This makes it less likely that you’ll end up
" with a mixture of tabs and spaces for indentation.

" If you prefer to work with spaces, then it is preferable to ensure that
" softtabstop == shiftwidth. This way, you can expect the same number of
" spaces to be inserted whether you press the tab key in insert mode, or use
" the indentation commands in normal/visual modes.

" linewrapping                                                " {{{2

set sbr=""                                     " showbreak: note trailing space at end of next line
set lbr                                        " linebreak: wrap at word
set ww=b,s,h,l,<,>,[,]                         " whichwrap: allow specified keys that move the cursor left/right

" error messages                                              " {{{2

set noeb                                       " noerrorbells: do/don't beep when error
set vb t_vb=                                   " visualbell: no beep or flash is wanted, use

" dictionary & thesaurus                                      " {{{2

set dict+=$HOME/.aspell.de.pws
set dict+=$HOME/.vim/spell                 " dict: set dirs of dictionaries
set tsr+=$HOME/.vim/thesaurus/thes_de.txt
set tsr-=$HOME/.vim/thesaurus/thes_eng.txt " thesaurus: using thesaurus by CTR+X CTRL+T in insert mode.
set cpt+=k                                 " complete: enable dictionary completion
setl kp=trs\ {en=@en+de}                   " keywordprg: trigger googletranslate for word under cursor with 'K'
setl kp=trs\ {es=@es+de}
set nolisp                                 " lisp: When <Enter> is typed in insert mode set the indent for the next line to Lisp standards
set nospell                                " spell: set spell spelllang=de,...
set nodg                                   " digraph: with the digraph option set you can enter 'a <BS> >' to retreive â


" Advanced Settings                                           " {{{1

" cpoptions                                                   " {{{2

set nocp " compatible: makes VIMs behaviour similar to vi

" http://vi-improved.org/vimrc.html

"        +-- necessary to make 'iab' work with functions
"        |
set cpo-=<
set cpo+=aABceFsmq
"        |||||||||
"        ||||||||+-- When joining lines, leave the cursor between joined lines
"        |||||||+-- When a new match is created (showmatch) pause for .5
"        ||||||+-- Set buffer options when entering the buffer
"        |||||+-- :write command updates current file name automatically add
"        |||||>   <CR> to the last line when using :@r
"        |||+-- Searching continues at the end of the match at the cursor position
"        ||+-- A backslash has no special meaning in mappings
"        |+-- :write updates alternative file name
"        +-- :read updates alternative file name

" formatoptions                                               " {{{2

" How to set formatoptions depending on filetype is described here:
" http://vim.wikia.com/wiki/Disable_automatic_comment_insertion#Overriding_format_options_set_by_filetype_plugin

"       +-- Trailing white space indicates a paragraph continues in the next
"       >   line. A line that ends in a non-white character ends a paragraph.
"       |+--- Automatic formatting of paragraphs. Every time text is inserted
"       |>    or deleted the paragraph will be reformatted. When the 'c'
"       |>    flag is present thisonly happens for recognized comments.
"       ||
set fo-=wa
set fo+=tocqrnl
"       |||||||
"       ||||||+-- Long lines are not broken in insert mode.
"       |||||+-- When formatting text, recognize numbered lists. This actually
"       |||||>   uses the 'formatlistpat' option, thus any kind of list can be used
"       ||||+-- Automatically insert the current comment leader after hitting <Enter> in Insert mode.
"       |||+-- Allow formatting of comments with "gq".
"       ||+-- Auto-wrap comments using textwidth, inserting the current comment leader automatically.
"       |+-- Automatically insert the current comment leader after hitting 'o' or 'O' in Normal mode.
"       +-- auto-wrap text using textwidth

" formatlistpat                                               " {{{2

" A pattern that is used to recognize a list header. This is used for the "n"
" flag in 'formatoptions'. The default is: ^\s*\d\+[\]:.)}\t ]\s*

" recognizes numbered lists
" http://stackoverflow.com/a/22703433/3569509
let &flp='^\s*\(\d\+[\]:.)}\t ]\|[*-]\s\)\s*'

" shortmessage                                                " {{{2

" shortmess: abbreviate messages
set shm+=atI
"        |||
"        ||+--  don't give the intro message when starting Vim
"        |+--  truncate file message at the start if it is too long to fit
"        +--  all abbreviations (filmnrwx) - see :h 'shm'

" runtimepath                                                 " {{{2

" default
set rtp+=$HOME/.vim
set rtp+=$VIM/vimfiles
set rtp+=$VIMRUNTIME
set rtp+=$VIM/vimfiles/after
set rtp+=$HOME/.vim/after

" extra
set rtp+=$HOME/.vim/plugin/                " runtimepath: some extra plugins
set rtp+=$HOME/.vim/bundle/vundle/         " runtimepath: adding vundle to runtimepath

set path=$PWD/**,$HOME/Unimaterialien  " path: sets current path variable for find command

" fileformats                                                 " {{{2

" fileformats: only detect unix fileformat, displays ^M for 'newline'
" with dos files
set ffs+=unix
set ffs+=dos
set ffs+=mac

" wildignore                                                  " {{{2

" When 'wildmenu' is on, command-line completion operates in an enhanced
" mode.  On pressing 'wildchar' (usually <Tab>) to invoke completion,
" the possible matches are shown just above the command line, with the
" first match highlighted (overwriting the status line, if there is one).
set wmnu      " wildmenu: completion with menu
set wc=<Tab>  " wildchar: Character you have to type to start wildcard
            " expansion in the command-line, as specified with 'wildmode'.

" wildignore: patterns are ignored when expanding, completing file or
" directory names

set wig+=*.a
set wig+=*.aut
set wig+=*.aux
set wig+=*.bak
set wig+=*.bbl
set wig+=*.blg
set wig+=*.cmi
set wig+=*.cmo
set wig+=*.cmx
set wig+=*.cmxa
set wig+=*.dvi
set wig+=*.exe
set wig+=*.fff
set wig+=*.lo
set wig+=*.log
set wig+=*.o
set wig+=*.obj
set wig+=*.out
set wig+=*.pdf
set wig+=*.ps
set wig+=*.py[co]
set wig+=*.swp
set wig+=*.toc
set wig+=*.ttt
set wig+=*~
set wig+=.svn

" viminfo                                                     " {{{2

" Tell vim to remember certain things when we exit
set vi='10          " marks will be remembered for up to 10 previously edited files
set vi+=\"500       " will save up to 500 lines for each register
set vi+=:20         " up to 20 lines of command-line history will be remembered
set vi+=%           " saves and restores the buffer list
set vi+=n~/.viminfo " n... : where to save the viminfo files

" comments                                                    " {{{2

" comments: list of strings that can start a comment line.
set com+=://
set com+=:%
set com+=:XCOMM
" blank (space after string)
set com+=b:-
" nested (nesting with mixed parts is allowed)
set com+=n:>
set com+=n:*
set com+=n:#
" start, middle, end of three-piece comment
set com+=s2:/*
set com+=mb:*
set com+=ex:*/

" set com+=:%
" set com+=:\\begin{
" set com+=:\\end{
" set com+=:\\title{
" set com+=:\\author{
" set com+=:\\subtitle{
" set com+=:\\part{
" set com+=:\\chapter{
" set com+=:\\section{
" set com+=:\\subsection{
" set com+=:\\subsubsection{
" set com+=:\\paragraph
" set com+=:\\subparagraph{
" set com+=:\\usepackage{
" set com+=:\\documenclass{
" set com+=:\\usepackage[
" set com+=:\\item[
" set com+=:\\item
" set com+=:#

set cms+=#\ %s           " commentstring: The "%s" in the value is replaced with the comment text.
set cms+=%\ %s

" iskeyword/-fname/-print                                     " {{{2

" iskeyword: Keywords for recognizing beginning/end of word eg. in movements like w,e...

" adjust configuration for such hostile environment as Windows  {{{2
" http://stackoverflow.com/a/6846949/3569509
if has("win32") || has("win16")
    lang C
    set viminfo='20,\"512,nc:/tmp/_viminfo
    set isk=48-57
set isk+=65-90
set isk+=97-122
set isk+=_
set isk+=161
set isk+=163
set isk+=166
set isk+=172
set isk+=177
set isk+=179
set isk+=182
set isk+=188
set isk+=191
set isk+=198
set isk+=202
set isk+=209
set isk+=211
set isk+=230
set isk+=234
set isk+=241
set isk+=243
set isk+=143
set isk+=156
set isk+=159
set isk+=165
set isk+=175
set isk+=185
" elseif has('mac')
elseif has('unix')
    set shell=/bin/sh
    set isk+="@
    set isk+=48-57
    set isk+=_
    set isk+=192-255"
    set isk-=.  " add dots as end of word
endif


" isfname: The characters specified by this option are included in file names and path
" names. Filenames are used for commands like "gf", "[i" and in the tags file.
" It is also used for "\f" in a pattern.
" set isf+=

" isident: included in identifiers. Identifiers are used in recognizing environment
" variables and after a match of the 'define' option. It is also used for "\i"
" in a pattern.
" set isi+=

" backupskip                                                  " {{{2

" backupskip: When one of the patterns matches with the name of the file which
" is written, no backup file is created. Both the specified file name and the
" full path name of the file are used.

set bsk=/tmp/*
set bsk+=$TMPDIR/*
set bsk+=$TMP/*
set bsk+=$TEMP/*
set bsk+=*test*
set bsk+=*temp*
set bsk+=*tmp*
set bsk+=*tst*
set bsk+=*~
set bsk+=*bak

" indentkeys                                                  " {{{2

" indentkeys: a list of keys that, when typed in insert mode, cause reindenting of
" the current line. only happens if 'indentexpr' isn't empty.
setlocal indk+=}
setlocal indk+=\\item
setlocal indk+=\\bibitem
setlocal indk+=\\else
setlocal indk+=\\fi
setlocal indk+=\\or
setlocal indk+=\\]

" suffixes                                                    " {{{2

set su=.bak
set su+=~
set su+=.swp
set su+=.o
set su+=.info
set su+=.aux
set su+=.log
set su+=.dvi
set su+=.bbl
set su+=.blg
set su+=.out
set su+=.toc " suffixes: for file names completion

" foldopen                                                    " {{{2

" foldopen: specifies for which type of commands folds will be opened, if the
" command moves the cursor into a closed fold. It is a comma separated list of items.
set fdo+=block     " "(", "{", "[[", "[{", etc.
set fdo+=hor       " horizontal movements: "l", "w", "fx", etc.
set fdo+=insert    " any command in Insert mode
set fdo+=jump      " far jumps: "G", "gg", etc.
set fdo+=mark      " jumping to a mark: "'m", CTRL-O, etc.
set fdo+=percent   " "%"
set fdo+=quickfix  " ":cn", ":crew", ":make", etc.
set fdo+=search    " search for a pattern: "/", "n", "*", "gd", etc. (not for
                " a search pattern in a ":" command) Also for |[s| and |]s|.
set fdo+=tag       " jumping to a tag: ":ta", CTRL-T, etc.
set fdo+=undo      " undo or redo: "u" and CTRL-R
" set fdo=all      " any

" statusline                                                  " {{{2

" printf blank spaces
" http://www.codingunit.com/printf-format-specifiers-format-conversions-and-formatted-output
" %d    print as a decimal integer
" %6d   print as a decimal integer with a width of at least 6 wide
" %f    print as a floating point
" %4f   print as a floating point with a width of at least 4 wide
" %.4f  print as a floating point with a precision of four characters after the decimal point
" %3.2f print as a floating point at least 3 wide and a precision of 2
" %=%   right align
" xy%<  always show 'xy'
" xy%>  contract until 'xy' (if necessary)

" enable statusline
set ls=2
" 0 - never,
" 1 - only if there are at least two windows,
" 2 - always

" statusline: <%nr> defines <usernr> in colorscheme
set stl=%1*%02n                                                   " current buffer
set stl+=%2*\|%t\|                                                " filename
set stl+=%1*%{&fo}\|                                              " formatoptions

" test whether home or office
" http://superuser.com/a/194844/322005
let hostname = substitute(hostname(), '\n', '', '')
if hostname =~ "zapata"
    " statusline: show current branch
    set stl+=%3*%{(fugitive#head()!=\"\"?'\(':'')}                   " git branch
    set stl+=%3*%<%{(fugitive#head()!=\"\"?fugitive#head():'')}
    set stl+=%3*%{(fugitive#head()!=\"\"?'\)':'')}
endif

" statusline: filencoding, fileformat
" http://stackoverflow.com/a/5375338/3569509
set stl+=%2*%=%((%{&ff}\|%{(strlen(&fenc)?&enc:&fenc)}%k\|%Y)%)
set stl+=%2*\ %(%l,%v\|%02p%%\ %)                                 " current positon in file


" history                                                       {{{2
set hi=1000                     " history: remember last n typed commands

" Functions & Autocommands                                    " {{{1

" autogroups                                                  " {{{2

" To enter autocommands for a specific group, use this method:
" 1. Select the group with ":augroup {name}".
" 2. Delete any old autocommands with ":au!".
" 3. Define the autocommands.
" 4. Go back to the default group with "augroup END".

" VimEnter                                                    " {{{2

aug VE
au!
aug END

" InsertEnter                                                 " {{{2

aug IE
au!
" change delay-time depending on mode
" http://www.reddit.com/r/vim/comments/2362q1/let_mapleader_now_how_do_i_get_rid_of_that_delay/
au InsertEnter * set timeoutlen=10
au InsertLeave * set timeoutlen=1000
aug END

" BufWritePre                                                 " {{{2

aug BWP
au!
aug END

" BufWinEnter                                                 " {{{2

aug BWE
    au!
    " restores the cursor position and its au so that it gets triggered
    au BufWinEnter * call ResCur()
    " show all marks for [count] movements when entering buffer
    au BufWinEnter * :15ShowMarksOnce
aug END

" Filetypedetect                                              " {{{2
" http://www.r-bloggers.com/sweave-syntax-highlighting-in-vim/

augroup filetypedetect
au! BufRead,BufNewFile *.textmpl   setf textmpl
augroup END
" Filetype                                                    " {{{2

aug Filetype
    " automatically remove trailing whitespaces
    au! filetype tex,rnoweb,noweb,vim,r :%s/\s\+$//e
aug END
