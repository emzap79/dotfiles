" vim: fdm=marker
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                   MAPPINGS                                   "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" File: vimrc_mappings
" Author: Jonas Petong
" Description: VIM related Mappings & Keybinds
" Last Modified: Mai 16, 2014

" Basic Mappings"{{{

" config"{{{

" mapping examples "{{{

" map (all modes)
" vnoremap (visual mode)
" inoremap (insert mode)
" nnoremap (normal mode)
" smap (select mode)

" <f1> through <f12>
" <s-...>       shift-key
" <c-...>       control-key
" <m-...>       alt-key or meta-key
" <a-...>       same as <m-...>
" enter: <cr> or <enter> or <return>
" all special keys
" see - :h keycodes

" a workaround for the <Alt> vs. <ESC> issue:
" http://stackoverflow.com/a/10216459

" mapping examples "}}}
" set leader-keys"{{{

" change the mapleader from \ to,

let plug=";"
let mapleader="\<space>"
let maplocalleader=","
" let r-plugin-localleader="\<space>"
" xmodmap -e 'clear Lock' -e 'keycode 0x42 = Escape'

" set leader-keys"}}}

" config"}}}
" f-keys"{{{

" <f1>  " show current directory "{{{

" change local buffer to current dir
nnoremap <f1> :lcd %:p:h<cr>:echo expand('%:p')<cr>
inoremap <f1> <esc>:lcd %:p:h<cr>:echo expand('%:p')<cr>
vnoremap <f1> <esc>:lcd %:p:h<cr>:echo expand('%:p')<cr>

" change to current dir
nnoremap <C-F1> :lcd %:p:h<cr>:echo expand('%:p')<cr>
inoremap <C-F1> <esc>:lcd %:p:h<cr>:echo expand('%:p')<cr>
vnoremap <C-F1> <esc>:lcd %:p:h<cr>:echo expand('%:p')<cr>

" show full path
nnoremap <s-f1> :echo expand('%:p')<cr>
inoremap <s-f1> <esc>:echo expand('%:p')<cr>
vnoremap <s-f1> <esc>:echo expand('%:p')<cr>

" <f1>  " show current directory "}}}
" <f2>  " save file "{{{

"save file and source vimrc
if has("gui_running")
    nnoremap <silent><f2> :exe "w \| so $MYGVIMRC \| %foldo!"<cr>
    inoremap <silent><f2> <esc>:exe "w \| so $MYGVIMRC \| %foldo!"<cr>
else
    nnoremap <silent><f2> :exe "w \| so $MYVIMRC \| %foldo!"<cr>
    inoremap <silent><f2> <esc>:exe "w \| so $MYVIMRC \| %foldo!"<cr>
endif

"save & exit
nnoremap <s-c-f2> :mks!<cr>:wqall!<cr>
inoremap <s-c-f2> <esc>:mks!<cr>:wqall!<cr>

" <f2>  " save file "}}}
" <f3>  " bufferlist "{{{

" " select buffer
"call fuzzyfinder
nnoremap <f3> :FufBuffer<cr>
inoremap <f3> <esc>:FufBuffer<cr>

"alternativ: plugin selectbuf.vim
nnoremap <s-f3> :buffer<cr>
inoremap <s-f3> <esc>:buffer<cr>

" <f3>  " bufferlist "}}}
" <f4>  " open file "{{{

"call fuzzyfinder for files in current buffer
nnoremap <f4> :FufFileWithCurrentBufferDir<cr>
inoremap <f4> <esc>:FufFileWithCurrentBufferDir<cr>

"call fuzzyfinder for mru-files
nnoremap <s-f4> :FufMruFile<cr>
inoremap <s-f4> <esc>:FufMruFile<cr>

"call fuzzyfinder for files in homedir
nnoremap <c-f4> :FufFile<cr>
inoremap <c-f4> <esc>:FufFile<cr>

" <f4>  " open file "}}}
" <F5>  " enable plugins"{{{

" toggle YouCompleteMe
nnoremap <F5> :call ToggleYCM()<CR>
inoremap <F5> <ESC>:call ToggleYCM()<CR>

" "Enable Neocomplete <Plugin>"{{{

" nnoremap <S-F5> :NeoCompleteToggle<cr>
" vnoremap <S-F5> <esc>:NeoCompleteToggle<cr>

"nnoremap <F5> :NeoCompleteEnable<CR>
"inoremap <F5> <ESC>:NeoCompleteEnable<CR>
"vnoremap <F5> <ESC>:NeoCompleteEnable<CR>

"}}}
" note: disabled due to performance issues!
"""""""""""""""""""""""""""""""""""""""""""
" "call fuzzyfinder for mru-files
" nnoremap <f5> :fufmrufile<cr>
" inoremap <f5> <esc>:fufmrufile<cr>

" " call most recent used commands
" nnoremap <s-f5> :fufmrucmd<cr>
" inoremap <s-f5> <esc>:fufmrucmd<cr>
"""""""""""""""""""""""""""""""""""""""""""

" <F5>  " enable plugins"}}}
" <f6>  " manage plugins through vundle "{{{

"call bundlelist
nnoremap <f6> :BundleList<cr>
inoremap <f6> <esc>:BundleList<cr>

"call bundleclean!
nnoremap <c-f6> :BundleClean!<cr>
inoremap <c-f6> <esc>:BundleClean!<cr>

"call bundleinstall!
nnoremap <s-f6> :BundleInstall<cr>
inoremap <s-f6> <esc> :BundleInstall<cr>

"call bundleinstall
nnoremap <s-c-f6> :BundleInstall!<cr>
inoremap <s-c-f6> <esc>:BundleInstall!<cr>

" <f6>  " manage plugins through vundle "}}}
" <f7>  " *** no functions yet *** " {{{

"}}}
" <f8>  " toggle linewrapping, -numbers and foldcolumn etc."{{{

" toggling textwidth
" func: toggle through textwidth"{{{

let b:mytextwidth=0
let g:mytextwidthlist=["0","72","80","115"]
fun! ToggleTextwidth()
    call clearmatches()
    let b:mytextwidth=b:mytextwidth+1
    if b:mytextwidth>=len(g:mytextwidthlist) | let b:mytextwidth=0 | endif
    if b:mytextwidth==0
        setlocal textwidth=0
    else
        execute "setlocal textwidth=".get(g:mytextwidthlist, b:mytextwidth)
        execute "call matchadd('ColorColumn', '\\%" . &textwidth . "v', 100)"
    endif
    if &fo =~ "t" | echo "wrap" | else | echo "nowrap" | endif
    echo "current textwidth:" g:mytextwidthlist[b:mytextwidth]
    redraw
endfun

" func: toggle through textwidth"}}}
nnoremap <f8> :call ToggleTextwidth()<CR>
vnoremap <f8> <ESC>:call ToggleTextwidth()<CR>
inoremap <f8> <ESC>:call ToggleTextwidth()<CR>

"toggle linewrapping
" func: ToggleWrap{{{

fun! ToggleWrap()
    if &fo =~ "t"
        set fo-=t
        call clearmatches()
    else
        set fo+=t
    endif
    if &fo =~ "t" | echo "wrap" | else | echo "nowrap" | endif
    echo "current textwidth:" &g:textwidth
    redraw
endfun

" func: ToggleWrap"}}}
nnoremap <s-f8> :call ToggleWrap()<cr>
nnoremap <s-f8> <esc>:call ToggleWrap()<cr>

" toggle foldcolumn on left
"" func: toggle foldcolumn {{{

fun! ToggleFoldColumn()
    if &foldcolumn
        setlocal foldcolumn=0
    else
        setlocal foldcolumn=4
    endif
endfun

" "}}}
nnoremap <c-f8> :call ToggleFoldColumn()<cr>
vnoremap <c-f8> <ESC>:call ToggleFoldColumn()<cr>
inoremap <c-f8> <ESC>:call ToggleFoldColumn()<cr>

" call matchadd('ColorColumn', '\%81v', 100)
nnoremap <s-c-f8> :call TogglePaste()<cr>
inoremap <s-c-f8> <c-o>:call TogglePaste()<cr>

" <f8>  " toggle linewrapping, -numbers and foldcolumn etc."}}}
" <f9>  " language tools & spellcheck"{{{

" switch spellcheck languages
" func: toggle languages"{{{

" http://vim.wikia.com/wiki/toggle_spellcheck_with_function_keys

let b:mylang=0
let g:mylanglist=["nospell","de_de","en_us","es"]
fun! ToggleSpell()
    let b:mylang=b:mylang+1
    if b:mylang>=len(g:mylanglist) | let b:mylang=0 | endif
    if b:mylang==0
        setlocal nospell
    else
        execute "setlocal spell spelllang=".get(g:mylanglist, b:mylang)
    endif
    echo "spell checking language:" g:mylanglist[b:mylang]
endfun

"}}}
nnoremap <f9> :call ToggleSpell()<cr>
inoremap <f9> <c-o>:call ToggleSpell()<cr>

"enable languagetool
"for use with latex: http://tex.stackexchange.com/questions/6333/grammar-checking-tool-for-use-with-latex/6552#6552
noremap <s-f9> :LanguageToolCheck<cr>:lopen 25<CR>
inoremap <s-f9> :LanguageToolCheck<cr>:lopen 25<CR>
vnoremap <s-f9> :LanguageToolCheck<cr>:lopen 25<CR>

"aspell spellcheck
nnoremap <c-f9> :w!<cr>:!/usr/bin/aspell --dont-backup --dont-tex-check-comments check %<cr>:e! %<cr>
inoremap <c-f9> :w!<cr>:!/usr/bin/aspell --dont-backup --dont-tex-check-comments check %<cr>:e! %<cr>

"count words in latex
nnoremap <a-f9> :w !detex \| wc -w<cr>
inoremap <a-f9> :w !detex \| wc -w<cr>

" Autocorrect typos
nnoremap <s-m-f9> :call AutoCorrect()<CR>
vnoremap <s-m-f9> <ESC>:call AutoCorrect()<CR>
inoremap <s-m-f9> <ESC>:call AutoCorrect()<CR>

" <f9>  " language tools & spellcheck"}}}
" <f10> " show vim-explorer/nerdtree"{{{

"displaying vim-explorer
nnoremap <silent> <f10> :VE %:p:h<cr> " to display vimexplorer
inoremap <silent> <f10> :VE %:p:h<cr> " to display vimexplorer
vnoremap <silent> <f10> :VE %:p:h<cr> " to display vimexplorer

"displaying nerdtree
nnoremap <silent> <s-f10> :NERDTree %:p:h<cr> " to display NERDTree
inoremap <silent> <s-f10> :NERDTree %:p:h<cr> " to display NERDTree"
vnoremap <silent> <s-f10> :NERDTree %:p:h<cr> " to display NERDTree"

" <f10> " show vim-explorer/nerdtree"}}}
" <f11> " *** no functions yet***{{{

"}}}
" <f12> " add abbreviations "{{{

"mapping to automatically add an abbreviation
nnoremap <leader><f12> <sid>:call AddAbbr()<cr>
vnoremap <leader><f12> <sid>:call AddAbbr()<cr>
""" func: abbreviations"{{{

"" an abbreviation is a short form of long text e.g. mfg mit freundlichen grüßen
"" its found in ~/.vim/ftplugin/tex.vim (at the eof)

"abbreviation
fun! AddAbbr()
    normal! byw
    let stringchar = lh#visual#selection()
    let val = input("enter the abbreviation you wish to use for '". stringchar. "' :")
    exec "ia" stringchar val
    silent call SaveAbbr(stringchar, val)
endfun

fun! SaveAbbr(val, abbr)
    redir >>~/.vim/ftplugin/tex.vim
    echo "iab" a:abbr a:val
    redir end
endfun

" "}}}

" <f12> " add abbreviations "}}}

" f-keys"}}}
" basic key remaps "{{{

" save file in normal-mode"{{{

" save file by hitting <space>
nnoremap <space><space> :wall!<CR>
vnoremap <space><space> <ESC>:wall!<CR>

""}}}
" paste to clipboard"{{{

" http://sheerun.net/2014/03/21/how-to-boost-your-vim-productivity/
vnoremap <Leader>y "+y
vnoremap <Leader>d "+d
nnoremap <Leader>P "+P
vnoremap <Leader>P "+P

"}}}
" visual mode mappings"{{{

" change visual mappings"{{{

nnoremap v <C-V>
nnoremap <S-V> v
nnoremap <C-V> <S-V>

vnoremap v <C-V>
vnoremap <S-V> v
vnoremap <C-V> <S-V>

""}}}

"visual mode mappings"}}}
" yank from cursor to eol with Y"{{{

" yank from the cursor to the end of the line, to be consistent with c and d.
nnoremap Y y$

"}}}
" productivity-boosts

" Automatically jump to end of text you pasted:"{{{
" http://sheerun.net/2014/03/21/how-to-boost-your-vim-productivity/

" vnoremap <silent> y y`]
" vnoremap <silent> p p`]
" nnoremap <silent> p p`]

"}}}
" Quickly select text you just pasted:"{{{

noremap gV `[v`]

" Quickly select text you just pasted:"}}}

" producitivity boosts

" basic key remaps"}}}
" open & edit vimrc-files"{{{

" edit config file in horizontal split mode
nnoremap <silent> <leader>erc :sp ~/.vimrc<cr>
nnoremap <silent> <leader>es :UltiSnipsEdit<cr>
nnoremap <silent> <leader>ee :sp ~/.vim/vimrc_general<cr>
nnoremap <silent> <leader>ef :sp ~/.vim/vimrc_foldexpr<cr>
nnoremap <silent> <leader>ea :sp ~/.vim/vimrc_abbrev<cr>
nnoremap <silent> <leader>ec :sp ~/.vim/vimrc_colors<cr>
nnoremap <silent> <leader>eb :sp ~/.vim/vimrc_mappings<cr>
nnoremap <silent> <leader>em :sp ~/.vim/vimrc_mutt<cr>
nnoremap <silent> <leader>er :sp ~/.vim/after/ftplugin/r.vim<cr>
nnoremap <silent> <leader>et :sp ~/.vim/after/ftplugin/tex.vim<cr>
nnoremap <silent> <leader>ea :sp ~/.vim/plugin/vim-autocorrect/plugin/autocorrect.vim<cr>
nnoremap <silent> <leader>ep :sp ~/.vim/vimrc_plugs<cr>

" set (local) path
nnoremap <leader>sp :cd %:p:h <cr>
nnoremap <leader>slp :lcd %:p:h <cr> "set local path of currently edited file.

""}}}

" Basic Mappings"}}}
" Functions"{{{

" " Func: YouCompleteMe <Plugin>"{{{

fun! ToggleYCM()
    if g:ycm_auto_trigger == 1
        let g:ycm_auto_trigger = 0
        echo "Plugin YCM disabled"
    else
        let g:ycm_auto_trigger = 1
        echo "Plugin YCM enabled"
    endif
endfun

" "}}}
" Func: Foldexpressions"{{{

" fold braces
" http://vim.wikia.com/wiki/Folding_functions_with_the_prototype_included
function! FoldBrace()
  if getline(v:lnum+1)[0] == '{'
    return 1
  endif
  if getline(v:lnum) =~ '{'
    return 1
  endif
  if getline(v:lnum)[0] =~ '}'
    return '<1'
  endif
  return -1
endfunction

" }}}
" Func: Save and Restore Cursorposition"{{{

" http://vim.wikia.com/wiki/Maintain_cursor_and_screen_position

function! CurPos(action)
  if a:action == "save"
    let b:saveve = &virtualedit
    let b:savesiso = &sidescrolloff
    set virtualedit=all
    set sidescrolloff=0
    let b:curline = line(".")
    let b:curvcol = virtcol(".")
    let b:curwcol = wincol()
    normal! g0
    let b:algvcol = virtcol(".")
    normal! M
    let b:midline = line(".")
    execute "normal! ".b:curline."G".b:curvcol."|"
    let &virtualedit = b:saveve
    let &sidescrolloff = b:savesiso
  elseif a:action == "restore"
    let b:saveve = &virtualedit
    let b:savesiso = &sidescrolloff
    set virtualedit=all
    set sidescrolloff=0
    execute "normal! ".b:midline."Gzz".b:curline."G0"
    let nw = wincol() - 1
    if b:curvcol != b:curwcol - nw
      execute "normal! ".b:algvcol."|zs"
      let s = wincol() - nw - 1
      if s != 0
        execute "normal! ".s."zl"
      endif
    endif
    execute "normal! ".b:curvcol."|"
    let &virtualedit = b:saveve
    let &sidescrolloff = b:savesiso
    unlet b:saveve b:savesiso b:curline b:curvcol b:curwcol b:algvcol b:midline
  endif
  return ""
endfunction

"}}}
" Func: Get Visual Selection"{{{

function! GetVisualSelection()
    let old_reg = @v
    normal! gv"vy
    let raw_search = @v
    let @v = old_reg
    return substitute(escape(raw_search, '\/.*$^~[]'), "\n", '\\n', "g")
endfunction

"}}}
" Func: Save Folds"{{{
" https://github.com/tpope/vim-fugitive/issues/194

function! SaveFolds()
    let match = matchstr(bufname('%'), '^\(\(fugitive.*\)\@!.\)*$')
    if !empty(match)
        au! BufWinLeave silent mkview!
        au! BufWinEnter silent loadview
        silent loadview
    endif
endfunction
au BufReadPost * call SaveFolds()

" Func: Save Folds"}}}
" Func: Clear all registers"{{{

" http://kba49.wordpress.com/2013/03/21/clear-all-registers-and-macros-in-vim/
function! ClearRegisters()
    let regs='abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789/-="*+'
    let i=0
    while (i<strlen(regs))
        exec 'let @'.regs[i].'=""'
        let i=i+1
    endwhile
endfunction

command! ClearRegisters call ClearRegisters()

" Func: Clear all registers"}}}
" Func: Enhanced Increase Number"{{{

" http://vim.wikia.com/wiki/Increasing_or_decreasing_numbers?action=edit&section=3
function! AddSubtract(char, back)
  let pattern = &nrformats =~ 'alpha' ? '[[:alpha:][:digit:]]' : '[[:digit:]]'
  call search(pattern, 'cw' . a:back)
  execute 'normal! ' . v:count1 . a:char
  silent! call repeat#set(":\<c-u>call AddSubtract('" .a:char. "', '" .a:back. "')\<cr>")
endfunction
nnoremap <silent>         <c-a> :<c-u>call AddSubtract("\<c-a>", '')<cr>
nnoremap <silent> <leader><c-a> :<c-u>call AddSubtract("\<c-a>", 'b')<cr>
nnoremap <silent>         <c-x> :<c-u>call AddSubtract("\<c-x>", '')<cr>
nnoremap <silent> <leader><c-x> :<c-u>call AddSubtract("\<c-x>", 'b')<cr>

""}}}
" Func: Restore Key Position"{{{

function! ResCur()
  if line("'\"") <= line("$")
    normal! g`"
    return 1
  endif
endfunction

" ""}}}

" Functions"}}}
" Other Mappings"{{{

" Plugin-Maps"{{{

" better-/hudigraphs <plugin>"{{{

inoremap <expr> <K> BDG_GetDigraph()
" inoremap <expr> <K> HUDG_GetDigraph()

""}}}
" vmath <plugin>"{{{

" press ++ to get mathematical data of visual block
vnoremap <expr> ++ VMATH_YankAndAnalyse()
nnoremap ++ vip++

""}}}
" region expanding <plugin>"{{{

" https://github.com/terryma/vim-expand-region
vnoremap v <Plug>(expand_region_expand)
vnoremap <C-v> <Plug>(expand_region_shrink)

""}}}
" listtrans <plugin>"{{{

nnoremap <leader>lt  :call ListTrans_toggle_format()<CR>
vnoremap <leader>lt :call ListTrans_toggle_format('visual')<CR>

""}}}
" calculator <plugin>"{{{

" http://vim.wikia.com/wiki/scientific_calculator
" :command! -nargs=- calc :py print <args>
" :py from math import *

nnoremap <leader>clc :calc<cr>
nnoremap <leader>slc :scalcvsplit<cr>

"}}}
" alignment <plugin>"{{{

" Align
nnoremap <leader>aa :%Align!<space>p
nnoremap <leader>al :'a,'sAlign!<space>p
vnoremap <leader>al :'<,'>Align!<space>p
nnoremap <leader>ap :'{,'}Align!<space>p
vnoremap <leader>ap <esc>:'{,'}Align!<space>p

" AlignCtrl
nnoremap <leader>ag :AlignCtrl g<space>
vnoremap <leader>ag <esc>:AlignCtrl g<space>
nnoremap <leader>av :AlignCtrl v<space>
vnoremap <leader>av <esc>:AlignCtrl v<space>

" alignment <plugin>"}}}
" frisk <plugin>"{{{

nnoremap <leader>fr :frisk<space>-
vnoremap <leader>fr :frisk<space>=GetVisualSelection()<cr>

"}}}
" visual-block movement <plugin>"{{{

vnoremap  <expr>  <LEFT>   DVB_Drag('left')
vnoremap  <expr>  <RIGHT>  DVB_Drag('right')
vnoremap  <expr>  <DOWN>   DVB_Drag('down')
vnoremap  <expr>  <UP>     DVB_Drag('up')
vnoremap  <expr>  D        DVB_Duplicate()

"}}}
" fugitive <plugin>"{{{

" fugitive git bindings
" map fugitive commands to <leader>g
" http://www.reddit.com/r/vim/comments/21f4gm/best_workflow_when_using_fugitive/cgciltz
nnoremap <space>ga :Git add %:p<CR><CR>
nnoremap <space>gs :Gstatus<CR>
nnoremap <space>gc :Gcommit -v -q<CR>
nnoremap <space>gt :Gcommit -v -q %:p<CR>
nnoremap <space>gd :exe "Gdiff \| %foldo!"<CR>
nnoremap <space>ge :Gedit<CR>
nnoremap <space>gr :Gread<CR>
nnoremap <space>gw :Gwrite<CR><CR>
nnoremap <space>gl :silent! Glog<CR>:bot copen<CR>
nnoremap <space>gp :Ggrep<Space>
nnoremap <space>gm :Gmove<Space>
nnoremap <space>gb :Git branch<Space>
nnoremap <space>go :Git checkout<Space>
nnoremap <space>gps :Dispatch! git push<CR>
nnoremap <space>gpl :Dispatch! git pull<CR>

" autocomd so that 'd' in visual mode doesn't cause a pause outside of diff-mode
" http://www.reddit.com/r/vim/comments/21f4gm/best_workflow_when_using_fugitive/cgcrfwz
autocmd BufRead fugitive\:* xnoremap <buffer> dp :diffput<cr>
autocmd BufRead fugitive\:* xnoremap <buffer> do :diffget<cr>

" fugitive"}}}
" tmux-navigator <plugin>"{{{

nnoremap <silent> <c-l> :TmuxNavigateRight<cr>
nnoremap <silent> <c-j> :TmuxNavigateDown<cr>
nnoremap <silent> <c-k> :TmuxNavigateUp<cr>
nnoremap <silent> <c-h> :TmuxNavigateLeft<cr>
nnoremap <silent> <c-\> :TmuxNavigatePrevious<cr>

" tmux-navigator <plugin>"}}}
" showmarks <plugin>"{{{

" show marks
nnoremap <silent><leader>ms :DoShowMarks<CR>
vnoremap <silent><leader>ms <ESC>:DoShowMarks<CR>
inoremap <silent><localleader>ms <ESC>:DoShowMarks<CR>

" unshow marks
nnoremap <silent><leader>mn :NoShowMarks<CR>
vnoremap <silent><leader>mn <ESC>:NoShowMarks<CR>
inoremap <silent><localleader>mn <ESC>:NoShowMarks<CR>

" delete marks
nnoremap <silent><leader>md :exe 'delm! \| delm A-Z0-9 \| echom "all marks removed!"'<CR>
vnoremap <silent><leader>md <ESC>:exe 'delm! \| delm A-Z0-9 \| echom "all marks removed!"'<CR>
inoremap <silent><localleader>md <ESC>:exe 'delm! \| delm A-Z0-9 \| echom "all marks removed!"'<CR>

" :[count]ShowMarksOnce
   " Display marks for [count] Cursorhold
   " events. Mostly for mapping it like :
   " nnoremap ` :ShowMarksOnce<cr>`

" :[count]PreviewMarks
   " Display marks of current buffer in pvw.
   " Like ':marks', but at the top of the window ;-).
   " [count] is the same as above.

" showmarks <plugin>"}}}
" NERDCommenter <plugin>"{{{

nmap css <plug>NERDCommenterSexy
nmap cii <plug>NERDCommenterInvert
nmap cu <plug>NERDCommenterUncomment
nmap cy <plug>NERDCommenterYank
nmap cp <plug>NERDCommenterYankp

vmap cu <plug>NERDCommenterUncomment
vmap cs <plug>NERDCommenterSexy
vmap ci <plug>NERDCommenterInvert
vmap cy <plug>NERDCommenterYank
vmap cp <plug>NERDCommenterYankp

" NERDCommenter <plugin>"}}}

" Plugin-Maps"}}}
" Folds & Marks"{{{

" jump back to marked position"{{{

nnoremap M `m :ShowMarksOnce<enter>
vnoremap M `m :ShowMarksOnce<enter>

" jump back to marked position"}}}
" fold commands"{{{

" activating 'visual-folding' by pressing <enter>
" http://vim.wikia.com/wiki/Folding
" nnoremap <silent> <space> @=(foldlevel('.')?'za':"\<Space>")<space>

" add emptyline between beginning / ending of folds
nnoremap <silent><leader>fo :exe "%s/\\v^.*(\\}\\}\\})/\\r\&/g \| %v/}}}\\n.*{{{/s/\\v(\\{\\{\\{)/&\\r/g \| %s/^$\\n^$//g"<cr>

" set foldmarkers automatically
nnoremap <silent><leader>fl :normal yyma<cr>
nnoremap <silent><leader>fk :normal pzf'a<cr>
vnoremap <silent><leader>fk :normal pzf'a<cr>

" fold commands"}}}

" Folds & Marks"}}}
" Buffers & Tabs"{{{

" tab movements"{{{

" change to next tab"{{{

if has("gui_running")
    nnoremap <s-space> :tabn<cr>
    nnoremap <c-@> <s-space>
endif

""}}}

"}}}
" window-movements"{{{

" swap position of two open buffer-windows"{{{

" " func: window swap"{{{

" http://stackoverflow.com/a/4903681
" move to the window to mark for the swap via ctrl-w movement
" type,mw move to the window you want to swap type,pw
" voila! swapped buffers without screwing up your window layout!
fun! MarkWindowSwap()
    let g:markedwinnum = winnr()
endfun

fun! DoWindowSwap()
    mark destination
    let curnum = winnr()
    let curbuf = bufnr( "%" )
    exe g:markedwinnum. "wincmd w"
    " switch to source and shuffle dest->source
    let markedbuf = bufnr( "%" )
    " hide and open so that we aren't prompted and keep history
    exe 'hide buf' curbuf
    " switch to dest and shuffle source->dest
    exe curnum. "wincmd w"
    " hide and open so that we aren't prompted and keep history
    exe 'hide buf' markedbuf
endfun

" }}}
nnoremap <silent> <leader>mw :call MarkWindowSwap()<cr>
nnoremap <silent> <leader>pw :call DoWindowSwap()<cr>

" }}}
" switching buffers"{{{

" changes to previous buffer
nnoremap <esc>ß :b #<cr>

" " move around between buffers
" nnoremap <c-k> <c-w><up>
" nnoremap <c-j> <c-w><down>
" nnoremap <c-h> <c-w><left>
" nnoremap <c-l> <c-w><right>

" }}}
" switch to alternate file"{{{

nnoremap <c-tab> :bnext<cr>
nnoremap <c-s-tab> :bprevious<cr>

" }}}

"}}}
" reload session.vim"{{{

nnoremap <leader>ss :lcd %:p:h<CR>:so Session.vim<CR>
vnoremap <leader>ss <ESC>:lcd %:p:h<CR>:so Session.vim<CR>

""}}}
" open/edit/close buffers"{{{

" close non-open buffers"{{{

" func: Wipeout"{{{

" http://stackoverflow.com/a/1536094
function! Wipeout()
    " list of *all* buffer numbers
    let l:buffers = range(1, bufnr('$'))

    " what tab page are we in?
    let l:currentTab = tabpagenr()
    try
        " go through all tab pages
        let l:tab = 0
        while l:tab < tabpagenr('$')
            let l:tab += 1

            " go through all windows
            let l:win = 0
            while l:win < winnr('$')
                let l:win += 1
                " whatever buffer is in this window in this tab, remove it from
                " l:buffers list
                let l:thisbuf = winbufnr(l:win)
                call remove(l:buffers, index(l:buffers, l:thisbuf))
            endwhile
        endwhile

        " if there are any buffers left, delete them
        if len(l:buffers)
            execute 'bwipeout' join(l:buffers)
        endif
    finally
        " go back to our original tab page
        execute 'tabnext' l:currentTab
    endtry

endfunction"}}}
nnoremap <leader>co :call Wipeout()<CR>
vnoremap <leader>co <ESC>:call Wipeout()<CR>

"}}}
" open new buffer"{{{

nnoremap <leader>e :lcd %:p:h<cr>:e<space>
nnoremap <leader>vf :ldc %:p:h<cr>:vertical find<space>
nnoremap <leader>ht :helptags ~/.vim/doc<cr>
nnoremap <leader>v :lcd %:p:h<cr>:vertical<space>
nnoremap <leader>vb :lcd %:p:h<cr>:vertical sb<space>

"}}}
" open nonexisting file under cursor"{{{

" http://stackoverflow.com/a/6159415
nnoremap gF :lcd %:p:h<cr>:e! ./<cfile><cr>

""}}}

"}}}
" buffer to 2/3 width

nnoremap <silent> <Leader>+ :exe "vert resize " . (winwidth(0) * 3/2)<CR>
nnoremap <silent> <Leader>- :exe "vert resize " . (winwidth(0) * 2/3)<CR>

" buffer to 2/3 width

" buffers & tabs"}}}
" String-Searches & Spell-Checking"{{{

" online searches{{{

"open link under curser in firefox"{{{

" " will search the word in firefox where
" " the cursor is when typing <leader>fg in visual mode
" " found on http://la.firme.perso.esil.univmed.fr/website/article.php3?id_article=70
nnoremap \ :exe "!firefox " . shellescape(expand("<cword>"))<cr>
xnoremap \ :<c-u>!firefox <c-r>=GetVisualSelection()<cr>

"}}}
"search wikipedia from within vim"{{{

nnoremap <leader>fw <esc>:! firefox 'http://de.wikipedia.org/w/index.php?search=<c-r>=wikipedia()<cr>'<cr><cr>
"search tex-stackexchange from within vim
nnoremap <leader>ft <esc>:! firefox 'http://tex.stackexchange.com/search?q=<c-r>=tex()<cr>'<cr><cr>

""}}}
" func: execute online searches (eg. wikipedia)"{{{

"" found on http://alexanderle.com/blog/2012/my-vimrc.html
" key mapping for tex-stackexchange search

fun! Tex()
    call inputsave()
    let searchterm = input('stackexchange: ')
    call inputrestore()
    return searchterm
endfun

" key mapping for wikipedia search

fun! Wikipedia()
    call inputsave()
    let searchterm = input('wikipedia: ')
    call inputrestore()
    return searchterm
endfun

" key mapping for wikipedia search "}}}

"}}}
" offline searches"{{{

"appending to the previous search pattern the current word under the cursor"{{{

"http://stackoverflow.com/a/9261779
nnoremap <leader>as :let @/.='\\|\<'.expand("<cword>").'\>'<cr>

" "}}}
"search for a word in ding/dict/thes"{{{

nnoremap <leader>ding :exe "!ding " . shellescape(expand("<cword>"))<cr>
vnoremap <leader>ding :<c-u>!ding <c-r>=getvisualselection()<cr>
nnoremap <leader>dict :exe "!dict " . shellescape(expand("<cword>"))<cr>
vnoremap <leader>dict :<c-u>!dict <c-r>=getvisualselection()<cr>
nnoremap <leader>thes :exe "!thes " . shellescape(expand("<cword>"))<cr>
vnoremap <leader>thes :<c-u>!othes <c-r>=getvisualselection()<cr>

"}}}
" search word under cursor with grep"{{{

" http://learnvimscriptthehardway.stevelosh.com/chapters/33.html

nnoremap <leader>g :set operatorfunc=GrepOperator<cr>g@
vnoremap <leader>g :<c-u>call GrepOperator(visualmode())<cr>
" fun: grep word under cursor "{{{

function! GrepOperator(type)
    if a:type ==# 'v'
        normal! `<v`>y
    elseif a:type ==# 'char'
        normal! `[v`]y
    else
        return
    endif
    silent execute "grep! -r " . shellescape(@@) . " ."
    copen
endfunction

"}}}

""}}}

" offline searches"}}}
" spell-checking"{{{

" enable general spell-check:"{{{

noremap <leader>sc :set spell spelllang=de,en,es<cr>
vnoremap <leader>sc :set spell spelllang=de,en,es<cr>

"}}}
" spellcheck: german"{{{

"enable spell checking for german:
noremap <leader>scg :call <sid>spell_de()<cr>
vnoremap <leader>scg :call <sid>spell_de()<cr>

" " painless spell checking
" " for german, you'll need
" " wget -p ~/.vim/spell/ http://ftp.vim.org/pub/vim/runtime/spell/de.utf-8.sug
" " wget -p ~/.vim/spell/ http://ftp.vim.org/pub/vim/runtime/spell/de.utf-8.spl
" func: spell-de "{{{

fun! s:spell_de()
    if !exists("s:spell_check") || s:spell_check == 0
        echo "spell checking activated (german)"
        let s:spell_check = 1
        setlocal spell spelllang=de
    else
        echo "spell checking canceled"
        let s:spell_check = 0
        setlocal spell spelllang=
    endif
endfun

"}}}

"}}}
" spellcheck: english"{{{

"enable spell checking for english :
noremap <leader>sce :call <sid>spell_en()<cr>
vnoremap <leader>sce :call <sid>spell_en()<cr>
fun! s:spell_en()
    if !exists("s:spell_check") || s:spell_check == 0
        echo "spell checking activated (english)"
        let s:spell_check = 1
        setlocal spell spelllang=en
    else
        echo "spell checking canceled"
        let s:spell_check = 0
        setlocal spell spelllang=
    endif
endfun

"}}}

""}}}
" 'very magic' string search as default"{{{

" nnoremap / /\v
cnoremap :s/ :s/\v

" 'very magic' string search as default"}}}

" String-Searches & Spell-Checking"}}}
" Edit Words & Lines"{{{

" flip text horizontally"{{{

nnoremap <leader>fh :Mirror<CR>
command! -bar -range Mirror <line1>,<line2>call setline('.', join(reverse(split(getline('.'), '\zs')), ''))

""}}}
" uppercase beginning of word/line"{{{

" first character of word capitalised
nnoremap <silent><s-u> :normal! mzlbgUl`z<cr>:nohl<cr>
nnoremap <silent><leader>u :normal! mzlbgUl`z<cr>:nohl<cr>

" first character of line capitalised
nnoremap <silent><leader>u^ :normal! mz^gUl`z<cr>:nohl<cr>

" first character of every words in line capitalised
nnoremap <silent><leader>uu mz :s/\<\w\+/\u\0/g<cr>:nohl<cr>`z

"}}}
" change word under curser{{{

" replace words by hitting '.'
nnoremap <leader>x *``cgn
nnoremap <leader>X #``cgN

" replace word under cursor in paragraph/buffer
nnoremap <leader>r :'{,'}s/\<<C-r>=expand('<cWORD>')<CR>\>/
nnoremap <leader>R :%s/\<<C-r>=expand('<cWORD>')<CR>\>/

" replace word under cursor in visual selection
xnoremap <leader>r :<C-u>'{,'}s/<C-r>=GetVisualSelection()<CR>/
xnoremap <leader>R :<C-u>%s/<C-r>=GetVisualSelection()<CR>/

" change word under cursor "}}}

" Edit Words & Lines"}}}
" Miscellaneous"{{{

" remove (trailing) spaces"{{{

" remove duplicate lines
" http://vim.wikia.com/wiki/Power_of_g
nnoremap <silent><leader>dd :exe '%g/^\(.*\)\(\r\?\n\1\)\+$/d \| %!uniq'<cr>``

" remove trailing whitespaces
" http://vim.wikia.com/wiki/Remove_unwanted_spaces
nnoremap <silent><space>dp :'{,'}s/\s\s\+/ /g<CR>:nohl<CR>``
vnoremap <silent><space>dv :B s/\s\s\+/ /g<cr>:nohl<cr>
nnoremap <silent><space>d0 :'{,'}s/^\s\+//g<CR>:nohl<CR>``
nnoremap <silent><space>d$ :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar>:nohl<CR>``
nnoremap <silent><space>da :%s/\s\s\+/ /g<CR>:nohl<CR>``

"}}}
" count character under cursor in line"{{{

nnoremap <leader>ct xP:s/<c-r>-/&/gn<CR><esc>

" }}}

" paste yanked input at end of line"{{{

nnoremap <s-c-p> :call CurPos("save")<cr>$p :call CurPos("restore")<cr>

"}}}
" moving to middle of line (instead of 'screen')"{{{

" see: http://superuser.com/a/216423
nnoremap gm :call cursor(0, virtcol('$')/2)<cr>

""}}}
" deactivate highlighting of search results"{{{

nnoremap <silent> <esc> :nohl<cr>

"}}}
" Compile and show documents"{{{

" compile and start latex viewer
" see: http://plankenau.com/blog/post-8/latexInVim
nnoremap <leader>ct :TexCompilePDF<CR>
inoremap <localleader>ct <ESC>:TexCompilePDF<CR>
vnoremap <leader>ct <ESC>:TexCompilePDF<CR>
nnoremap <leader>cl :LatexCompilePDF<CR>
inoremap <localleader>cl <ESC>:LatexCompilePDF<CR>
vnoremap <leader>cl <ESC>:LatexCompilePDF<CR>
nnoremap <leader>cx :XeLatexCompilePDF<CR>
inoremap <localleader>cx <ESC>:XeLatexCompilePDF<CR>
vnoremap <leader>cx <ESC>:XeLatexCompilePDF<CR>

" Open any kind of files as pdf (requires pandoc installed!)
" http://stackoverflow.com/a/20799071
" pandoc , markdown
command! -nargs=* RunSilent
      \ | execute ':silent !'.'<args>'
      \ | execute ':redraw!'
noremap <Leader>cp :RunSilent pandoc -o /tmp/vim-pandoc-out.pdf %<CR>
noremap <Leader>pp :RunSilent gnome-open /tmp/vim-pandoc-out.pdf<CR>


" Compile and show documents"}}}
" when you forgot to sudo before editing a file that requires root privileges"{{{

"(typically /etc/hosts). this lets you use w!! to do that after you opened the
"file already
cmap w!! w !sudo tee % >/dev/null

"}}}

" execute cmd within visual"{{{

nnoremap <leader>v :'<,'>
vnoremap <leader>v <ESC>:'<,'>
inoremap <localleader>v <ESC>:'<,'>

"}}}
" execute cmd within sentencse"{{{

nnoremap <leader>s :'(,')
vnoremap <leader>s <ESC>:'(,')
inoremap <localleader>s <ESC>:'(,')

"}}}
" execute cmd within paragraph"{{{

nnoremap <leader>p :'{,'}
vnoremap <leader>p <ESC>:'{,'}
inoremap <localleader>p <ESC>:'{,'}

"}}}
" execute cmd within marks 'a and 's"{{{

nnoremap <leader>m :'a,'s

"}}}

""}}}

" Other Mappings"}}}
