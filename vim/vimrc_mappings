""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                   MAPPINGS                                   "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" File: vimrc_mappings
" Author: Jonas Petong
" Description: VIM related Mappings & Keybinds
" Last Modified: Januar 04, 2014
"
""""""""""""
"  Config  "
""""""""""""
" mapping examples {{{
" map (all modes)
" vnoremap (visual mode)
" inoremap (insert mode)
" nnoremap (normal mode)
" smap (select mode)

" add to config file
" map key_sequence operation
" example: map <f5> dd
" shift, ctrl, alt, meta, shift: <s-...>
" shift: <s-...>
" example: shift s
" <s-s>
" ctrl: <c-...>
" example: ctrl s
" <c-s>
" alt and meta are the same: <a-...> <m-...>
" example: alt s
" <a-s> or <m-s>
" special characters
" this maps to 'no operation' (do nothing): <nop>

" basic
" <f1> through <f12>
" enter: <cr> or <enter> or <return>
" space bar: <space>
" esc key: <esc>
" all special keys
" see: http://vimdoc.sourceforge.net/htmldoc/intro.html#keycodes
"}}}
" set leader-keys"{{{
"the <leader> key is mapped to \ by default. so if
"you have a map of <leader>t, you can execute it by 
"default with \t

" change the mapleader from \ to,

let mapleader="\<space>"
let maplocalleader=","
let plug=";"
""}}}

""""""""""""""
"  Mappings  "
""""""""""""""
" f-keys"{{{
" <f1>  " show current directory "{{{

" change local buffer to current dir
nnoremap <f1> :lcd %:p:h<cr>:echo expand('%:p')<cr>
inoremap <f1> <esc>:lcd %:p:h<cr>:echo expand('%:p')<cr>
vnoremap <f1> <esc>:lcd %:p:h<cr>:echo expand('%:p')<cr>

" change to current dir
nnoremap <C-F1> :lcd %:p:h<cr>:echo expand('%:p')<cr>
inoremap <C-F1> <esc>:lcd %:p:h<cr>:echo expand('%:p')<cr>
vnoremap <C-F1> <esc>:lcd %:p:h<cr>:echo expand('%:p')<cr>

" show full path
nnoremap <s-f1> :echo expand('%:p')<cr>
inoremap <s-f1> <esc>:echo expand('%:p')<cr>
vnoremap <s-f1> <esc>:echo expand('%:p')<cr>
"}}}
" <f2>  " save file "{{{
" save file
nnoremap <f2> :w<cr>
inoremap <f2> <esc>:w<cr>
vnoremap <f2> <esc>:w<cr>
" inoremap <f2> <c-o>:w<esc><cr>
" vnoremap <f2> <c-o>:w<esc><cr>

"save file and source vimrc
if has("gui_running")
    nnoremap <s-f2> :w<cr> :so ~/.gvimrc<cr>
    inoremap <s-f2> <esc>:w<cr> :so ~/.gvimrc<cr>
else
    nnoremap <s-f2> :w<cr> :so $MYVIMRC<cr>
    inoremap <s-f2> <esc>:w<cr>:so $MYVIMRC<cr>
endif

" force save
nnoremap <c-f2> :wqall<cr>
inoremap <c-f2> <esc>:wqall<cr>

"save & exit
nnoremap <s-c-f2> :mks!<cr>:wqall!<cr>
inoremap <s-c-f2> <esc>:mks!<cr>:wqall!<cr>
"}}}
" <f3>  " bufferlist "{{{
" " select buffer
"call fuzzyfinder
nnoremap <f3> :FufBuffer<cr>
inoremap <f3> <esc>:FufBuffer<cr>

"alternativ: plugin selectbuf.vim
nnoremap <s-f3> :buffer<cr>
inoremap <s-f3> <esc>:buffer<cr>
"}}}
" <f4>  " open file {{{
"call fuzzyfinder for files in current buffer
nnoremap <f4> :FufFileWithCurrentBufferDir<cr>
inoremap <f4> <esc>:FufFileWithCurrentBufferDir<cr>

"call fuzzyfinder for mru-files
nnoremap <s-f4> :FufMruFile<cr>
inoremap <s-f4> <esc>:FufMruFile<cr>

"call fuzzyfinder for files in homedir
nnoremap <c-f4> :FufFile<cr>
inoremap <c-f4> <esc>:FufFile<cr>
" "}}}
" <F5>  " enable plugins"{{{
" Toggle YouCompleteMe"{{{
fun! ToggleYCM()
if g:ycm_auto_trigger == 1
    let g:ycm_auto_trigger = 0
    echo "Plugin YCM disabled"
else
    let g:ycm_auto_trigger = 1
    echo "Plugin YCM enabled"
endif
endfun
"}}}
nnoremap <F5> :call ToggleYCM()<CR>
vnoremap <F5> <ESC>:call ToggleYCM()<CR>
inoremap <F5> <ESC>:call ToggleYCM()<CR>

" "Enable Neocomplete <Plugin>"{{{
"nnoremap <F5> :NeoCompleteEnable<CR>
"inoremap <F5> <ESC>:NeoCompleteEnable<CR>
"vnoremap <F5> <ESC>:NeoCompleteEnable<CR>
"}}}
" note: disabled due to performance issues!
"""""""""""""""""""""""""""""""""""""""""""
" "call fuzzyfinder for mru-files
" nnoremap <f5> :fufmrufile<cr>
" inoremap <f5> <esc>:fufmrufile<cr>

" " call most recent used commands
" nnoremap <s-f5> :fufmrucmd<cr>
" inoremap <s-f5> <esc>:fufmrucmd<cr>
"""""""""""""""""""""""""""""""""""""""""""
"}}}
" <f6>  " manage plugins through vundle "{{{
"call bundlelist
nnoremap <f6> :e ~/.vim/vimrc_plugs<cr> :BundleList<cr>
inoremap <f6> <esc>:e ~/.vim/vimrc_plugs<cr> :BundleList<cr>

"call bundleclean!
nnoremap <c-f6> :e ~/.vim/vimrc_plugs<cr> :BundleClean!<cr>
inoremap <c-f6> <esc>:e ~/.vim/vimrc_plugs<cr> :BundleClean!<cr>

"call bundleinstall!
nnoremap <s-f6> :e ~/.vim/vimrc_plugs<cr> :BundleInstall<cr>
inoremap <s-f6> <esc>:e ~/.vim/vimrc_plugs<cr> :BundleInstall<cr>

"call bundleinstall
nnoremap <s-c-f6> :e ~/.vim/vimrc_plugs<cr> :BundleInstall!<cr>
inoremap <s-c-f6> <esc>:e ~/.vim/vimrc_plugs<cr> :BundleInstall!<cr>
"}}}
" <f7>  " latex-commands{{{
"mapping to automatically add an abbreviation
map <c-s-f7> <sid>:call AddAbbr()<cr>
inoremap <c-s-f7> <sid>:call AddAbbr()<cr>
vnoremap <c-s-f7> <sid>:call AddAbbr()<cr>
""" func: abbreviations"{{{
"" an abbreviation is a short form of long text e.g. mfg mit freundlichen grüßen
"" its found in ~/.vim/ftplugin/tex.vim (at the eof)

"abbreviation
fun! AddAbbr()
    normal byw
    let stringchar = lh#visual#selection()
    let val = input("enter the abbreviation you wish to use for '". stringchar. "' :")
    exec "ia" stringchar val
    silent call SaveAbbr(stringchar, val)
endfun

fun! SaveAbbr(val, abbr)
    redir >>~/.vim/ftplugin/tex.vim
    echo "iab" a:abbr a:val
    redir end
endfun
" "}}}
"}}}
" <f8>  " toggle linewrapping, -numbers and foldcolumn etc.{{{
"" "toggle linewrapping
map <f8> :call ToggleWrap()<cr>
map! <f8> ^[:call ToggleWrap()<cr>
""" func: ToggleWrap{{{
fun! ToggleWrap()
    if &fo =~ "t"
        set fo-=t
        echo "nowrap"
    else
        set fo+=t
        echo "wrap"
    endif
endfun
" "}}}

" paste mode toggle (needed when using autoindent/smartindent) 
" "" func: toggle paste {{{
fun! TogglePaste()
    if &paste
        setlocal nopaste
        echo "nopaste"
    else
        setlocal paste
        echo "paste"
    endif
endfun
" "}}}
map <s-c-f8> :call TogglePaste()<cr>
inoremap <s-c-f8> <c-o>:call TogglePaste()<cr>

" toggle foldcolumn on left
map <c-f8> :call ToggleFoldColumn()<cr>
map! <c-f8> ^[:call ToggleFoldColumn()<cr>
" "" func: toggle foldcolumn {{{
fun! ToggleFoldColumn()
    if &foldcolumn
        setlocal foldcolumn=0
    else
        setlocal foldcolumn=4
    endif
endfun
" "}}}

" Autocorrect typos
nnoremap <m-f8> :call AutoCorrect()<CR>
vnoremap <m-f8> <ESC>:call AutoCorrect()<CR>
inoremap <m-f8> <ESC>:call AutoCorrect()<CR>

" remove trailing whitespaces
" http://vim.wikia.com/wiki/Remove_unwanted_spaces
nnoremap <silent> <s-c-f8> :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar>:nohl<CR>

" " f-keys"}}}
" <f9>  " language tools & spellcheck"{{{

" next in location list
noremap <f9> :lnext<cr>
inoremap <f9> :lnext<cr>
vnoremap <f9> :lnext<cr>

"enable languagetool
"for use with latex: http://tex.stackexchange.com/questions/6333/grammar-checking-tool-for-use-with-latex/6552#6552
noremap <s-f9> :LanguageToolCheck<cr>:lopen 25<CR>
inoremap <s-f9> :LanguageToolCheck<cr>:lopen 25<CR>
vnoremap <s-f9> :LanguageToolCheck<cr>:lopen 25<CR>

"aspell spellcheck
nnoremap <c-f9> :w!<cr>:!/usr/bin/aspell --dont-backup --dont-tex-check-comments check %<cr>:e! %<cr>
inoremap <c-f9> :w!<cr>:!/usr/bin/aspell --dont-backup --dont-tex-check-comments check %<cr>:e! %<cr>

"switch spellcheck languages
"func: toggle languages"{{{
"http://vim.wikia.com/wiki/toggle_spellcheck_with_function_keys
" spell check
let b:mylang=0
let g:mylanglist=["nospell","de_de","en_us","es"]
fun! ToggleSpell()
    let b:mylang=b:mylang+1
    if b:mylang>=len(g:mylanglist) | let b:mylang=0 | endif
    if b:mylang==0
        setlocal nospell
    else
        execute "setlocal spell spelllang=".get(g:mylanglist, b:mylang)
    endif
    echo "spell checking language:" g:mylanglist[b:mylang]
endfun
"}}}
map <s-c-f9> :call ToggleSpell()<cr>
inoremap <s-c-f9> <c-o>:call ToggleSpell()<cr>

"count words in latex
nnoremap <a-f9> :w !detex \| wc -w<cr>
inoremap <a-f9> :w !detex \| wc -w<cr>
"}}}
" <f10> " show vim-explorer/nerdtree"{{{
"displaying vim-explorer
nnoremap <silent> <f10> :VE %:p:h<cr> " to display vimexplorer
inoremap <silent> <f10> :VE %:p:h<cr> " to display vimexplorer
vnoremap <silent> <f10> :VE %:p:h<cr> " to display vimexplorer

"displaying nerdtree
nnoremap <silent> <s-f10> :NERDTree %:p:h<cr> " to display NERDTree
inoremap <silent> <s-f10> :NERDTree %:p:h<cr> " to display NERDTree"
vnoremap <silent> <s-f10> :NERDTree %:p:h<cr> " to display NERDTree"

"}}}
" <f11> " *** no functions yet***{{{
"}}}
" <f12> " compile latex and tex documents{{{
" compiling and viewing its.tex file
" compile and start latex viewer
" see: http://plankenau.com/blog/post-8/latexInVim
nnoremap <a-f12> :TexCompilePDF<CR>
inoremap <a-f12> <ESC>:TexCompilePDF<CR>
vnoremap <a-f12> <ESC>:TexCompilePDF<CR>
nnoremap <s-f12> :LatexCompilePDF<CR>
inoremap <s-f12> <ESC>:LatexCompilePDF<CR>
vnoremap <s-f12> <ESC>:LatexCompilePDF<CR>
nnoremap <s-c-f12> :XeLatexCompilePDF<CR>
inoremap <s-c-f12> <ESC>:XeLatexCompilePDF<CR>
vnoremap <s-c-f12> <ESC>:XeLatexCompilePDF<CR>
" ----------------------------"}}}
"}}}
" plugins{{{
" better-/hudigraphs <plugin>"{{{
inoremap <expr> <K> BDG_GetDigraph()
" inoremap <expr> <K> HUDG_GetDigraph()
""}}}
" vmath <plugin>"{{{
" press ++ to get mathematical data of visual block
vnoremap <expr> ++ VMATH_YankAndAnalyse()
nnoremap ++ vip++
""}}}
" region expanding <plugin>
" https://github.com/terryma/vim-expand-region
vnoremap v <Plug>(expand_region_expand)
vnoremap <C-v> <Plug>(expand_region_shrink)
"
" listtrans <plugin>"{{{
nnoremap <leader>lt  :call ListTrans_toggle_format()<CR>
vnoremap <leader>lt :call ListTrans_toggle_format('visual')<CR>
""}}}
" calculator <plugin>"{{{
" http://vim.wikia.com/wiki/scientific_calculator
" :command! -nargs=- calc :py print <args>
" :py from math import *
nnoremap <leader>clc :calc<cr>
nnoremap <leader>slc :scalcvsplit<cr>
"}}}
" alignment <plugin>"{{{
nnoremap <leader>ac :AlignCtrl lp1p
vnoremap <leader>ac <esc>:AlignCtrl lp1p
nnoremap <leader>al :'a,.Align<space>
vnoremap <leader>al <esc>:'a,.Align<space>
"}}}
" frisk <plugin>"{{{
nnoremap <leader>fr :frisk<space>-
vnoremap <leader>fr :frisk<space>=GetVisualSelection()<cr>
"}}}
" visual-block movement <plugin>"{{{
vnoremap  <expr>  <LEFT>   DVB_Drag('left')
vnoremap  <expr>  <RIGHT>  DVB_Drag('right')
vnoremap  <expr>  <DOWN>   DVB_Drag('down')
vnoremap  <expr>  <UP>     DVB_Drag('up')
vnoremap  <expr>  D        DVB_Duplicate()
"}}}
"plugins"}}}
" basic key remaps "{{{
" paste to clipboard"{{{
" http://sheerun.net/2014/03/21/how-to-boost-your-vim-productivity/
vnoremap <Leader>y "+y
vnoremap <Leader>d "+d
nnoremap <Leader>p "+p
nnoremap <Leader>P "+P
vnoremap <Leader>p "+p
vnoremap <Leader>P "+P
"}}}
" visual mode mappings"{{{
" change visual mode to visual-block-mode"{{{
" nnoremap v <C-V>
" nnoremap <C-V> v
" vnoremap v <C-V>
" vnoremap <C-V> v
""}}}
"}}}
"visual mode mappings"}}}
" yank from the cursor to the end of the line, to be consistent with c and d."{{{
nnoremap Y y$
"}}}
" productivity-boosts"{{{
" http://sheerun.net/2014/03/21/how-to-boost-your-vim-productivity/
" Automatically jump to end of text you pasted:"{{{
" vnoremap <silent> y y`]
" vnoremap <silent> p p`]
" nnoremap <silent> p p`]
"}}}
" Quickly select text you just pasted:"{{{
noremap gV `[v`]
"}}}
" producitivity boosts"}}}
" basic key remaps"}}}
" open & edit vimrc-files"{{{
" edit config file in horizontal split mode
nnoremap <silent> <leader>ecs :sp ~/.vim/vimrc_colors<cr> 
nnoremap <silent> <leader>ec :sp ~/.vim/vimrc_general<cr> 
nnoremap <silent> <leader>el :sp ~/.vim/vimrc_latex<cr> 
nnoremap <silent> <leader>eb :sp ~/.vim/vimrc_mappings<cr>
nnoremap <silent> <leader>ep :sp ~/.vim/vimrc_plugs<cr>
nnoremap <silent> <leader>em :sp ~/.vim/vimrc_mutt<cr>
nnoremap <silent> <leader>er :sp ~/.vim/vimrc_r<cr>
nnoremap <silent> <leader>et :sp ~/.vim/vimrc_latex<cr>
nnoremap <silent> <leader>ea :sp ~/.vim/plugin/vim-autocorrect/plugin/autocorrect.vim<cr>
nnoremap <silent> <leader>es :UltiSnipsEdit<cr>
nnoremap <leader>sp :cd %:p:h <cr>
nnoremap <leader>slp :lcd %:p:h <cr> "set local path of currently edited file.
""}}}

" Word- Searches, Spell-Checking & String-Replacements
" online searches{{{
"search wikipedia from within vim"{{{
nnoremap <leader>fw <esc>:! chromium-browser 'http://de.wikipedia.org/w/index.php?search=<c-r>=wikipedia()<cr>'<cr><cr>
"search tex-stackexchange from within vim
nnoremap <leader>ft <esc>:! chromium-browser 'http://tex.stackexchange.com/search?q=<c-r>=tex()<cr>'<cr><cr>
""}}}
" func: execute online searches (eg. wikipedia)"{{{
"" found on http://alexanderle.com/blog/2012/my-vimrc.html
" key mapping for tex-stackexchange search
fun! TeX()
    call inputsave()
    let searchterm = input('stackexchange: ')
    call inputrestore()
    return searchterm
endfun

" key mapping for wikipedia search
fun! Wikipedia()
    call inputsave()
    let searchterm = input('wikipedia: ')
    call inputrestore()
    return searchterm
endfun
" ----------------------------"}}}
"}}}
" offline searches"{{{
"open link under curser in chrome"{{{
" " will search the word in chromium where
" " the cursor is when typing <leader>fg in visual mode
" " found on http://la.firme.perso.esil.univmed.fr/website/article.php3?id_article=70 
nnoremap <leader>o "oyiW :<c-u>!chromium-browser "<C-r>o" >& /dev/null<cr><cr>
xnoremap <leader>o :<c-u>!chromium-browser <C-r>=GetVisualSelection()<cr>
"}}}
"appending to the previous search pattern the current word under the cursor"{{{"{{{
"http://stackoverflow.com/a/9261779
nnoremap <leader>as :let @/.='\\|\<'.expand("<cword>").'\>'<cr>
" "}}}
" offline searches"}}}
"search for a word in ding"{{{
vnoremap <leader>fd :<c-u>!ding -r "<cword>" >& /dev/null <cr><cr>
vnoremap <leader>fot :<c-u>!othes <cword> >& /dev/null<cr><cr>
"}}}
"}}}
" spell-checking"{{{
" enable general spell-check:"{{{
noremap <leader>sc :set spell spelllang=de,en,es<cr>
vnoremap <leader>sc :set spell spelllang=de,en,es<cr>
"}}}
" spellcheck: german"{{{
"enable spell checking for german:
noremap <leader>scg :call <sid>Spell_de()<cr>
vnoremap <leader>scg :call <sid>Spell_de()<cr>
"
" " painless spell checking
" " for german, you'll need
" " wget -p ~/.vim/spell/ http://ftp.vim.org/pub/vim/runtime/spell/de.utf-8.sug
" " wget -p ~/.vim/spell/ http://ftp.vim.org/pub/vim/runtime/spell/de.utf-8.spl
" Func: Spell-DE "{{{
fun! s:Spell_de()
    if !exists("s:Spell_check") || s:Spell_check == 0
        echo "spell checking activated (german)"
        let s:Spell_check = 1
        setlocal spell spelllang=de
    else
        echo "spell checking canceled"
        let s:Spell_check = 0
        setlocal spell spelllang=
    endif
endfun
"}}}
"}}}
" spellcheck: english"{{{
"enable spell checking for english :
noremap <leader>sce :call <sid>Spell_en()<cr>
vnoremap <leader>sce :call <sid>Spell_en()<cr>
fun! s:Spell_en()
    if !exists("s:Spell_check") || s:Spell_check == 0
        echo "spell checking activated (english)"
        let s:Spell_check = 1
        setlocal spell spelllang=en
    else
        echo "spell checking canceled"
        let s:Spell_check = 0
        setlocal spell spelllang=
    endif
endfun
"}}}
" ----------------------------"}}}
" substitutions & replacements{{{
" replace words by hitting '.'
nnoremap <leader>x *``cgn
nnoremap <leader>X #``cgN

" replace word under cursor in paragraph/buffer
nnoremap <leader>r :'{,'}s/\<<C-r>=expand('<cword>')<CR>\>/
nnoremap <leader>R :%s/\<<C-r>=expand('<cword>')<CR>\>/

" replace word under cursor in visual selection
xnoremap <leader>r :<C-u>'{,'}s/<C-r>=GetVisualSelection()<CR>/
xnoremap <leader>R :<C-u>%s/<C-r>=GetVisualSelection()<CR>/
" " Func: Replace Word in Visual Selection"{{{
function! GetVisualSelection()
    let old_reg = @v
    normal! gv"vy
    let raw_search = @v
    let @v = old_reg
    return substitute(escape(raw_search, '\/.*$^~[]'), "\n", '\\n', "g")
endfunction
"}}}
" substitution & replacements "}}}

" Folding, Buffers & Tabs
" fold commands"{{{
" activating 'visual-folding' by pressing <enter>
" http://vim.wikia.com/wiki/Folding
" nnoremap <silent> <space> @=(foldlevel('.')?'za':"\<Space>")<space>
vnoremap <CR> zf
"}}}
" tab movements"{{{
" change to next tab"{{{
if has("gui_running")
    nnoremap <s-space> :tabn<cr>
    nnoremap <c-@> <s-space>
endif
""}}}
"}}}
" reload session.vim"{{{
nnoremap <leader>ss :lcd %:p:h<CR>:so Session.vim<CR>
vnoremap <leader>ss <ESC>:lcd %:p:h<CR>:so Session.vim<CR>
""}}}
" open/edit/close buffers"{{{
" close non-open buffers"{{{
" func: Wipeout"{{{
" http://stackoverflow.com/a/1536094
function! Wipeout()
    " list of *all* buffer numbers
    let l:buffers = range(1, bufnr('$'))

    " what tab page are we in?
    let l:currentTab = tabpagenr()
    try
        " go through all tab pages
        let l:tab = 0
        while l:tab < tabpagenr('$')
            let l:tab += 1

            " go through all windows
            let l:win = 0
            while l:win < winnr('$')
                let l:win += 1
                " whatever buffer is in this window in this tab, remove it from
                " l:buffers list
                let l:thisbuf = winbufnr(l:win)
                call remove(l:buffers, index(l:buffers, l:thisbuf))
            endwhile
        endwhile

        " if there are any buffers left, delete them
        if len(l:buffers)
            execute 'bwipeout' join(l:buffers)
        endif
    finally
        " go back to our original tab page
        execute 'tabnext' l:currentTab
    endtry
endfunction"}}}
nnoremap <leader>co :call Wipeout()<CR>
vnoremap <leader>co <ESC>:call Wipeout()<CR>
"}}}
" open new buffer"{{{
nnoremap <leader>e :lcd %:p:h<cr>:e<space>
nnoremap <leader>vf :ldc %:p:h<cr>:vertical find<space>
nnoremap <leader>ht :helptags ~/.vim/doc<cr>
nnoremap <leader>v :lcd %:p:h<cr>:vertical<space>
nnoremap <leader>vb :lcd %:p:h<cr>:vertical sb<space>
"}}}
" open nonexisting file under cursor"{{{
" http://stackoverflow.com/a/6159415
map <leader>gf :lcd %:p:h<cr>:e! ./<cfile><cr>
""}}}
"}}}
" window-movements"{{{
" "" map ctrl-movement keys to window switching"{{{
map <c-k> <c-w><up>
map <c-j> <c-w><down>
map <c-l> <c-w><right>
map <c-h> <c-w><left>
"}}}
" "" swap position of two open buffer-windows"{{{
""" " func: window swap"{{{
" "http://stackoverflow.com/a/4903681
" "move to the window to mark for the swap via ctrl-w movement
" "type,mw move to the window you want to swap type,pw
" "voila! swapped buffers without screwing up your window layout!
fun! MarkWindowSwap()
    let g:markedwinnum = winnr()
endfun

fun! DoWindowSwap()
    "mark destination
    let curnum = winnr()
    let curbuf = bufnr( "%" )
    exe g:markedwinnum. "wincmd w"
    "switch to source and shuffle dest->source
    let markedbuf = bufnr( "%" )
    "hide and open so that we aren't prompted and keep history
    exe 'hide buf' curbuf
    "switch to dest and shuffle source->dest
    exe curnum. "wincmd w"
    "hide and open so that we aren't prompted and keep history
    exe 'hide buf' markedbuf 
endfun
"}}}
nnoremap <silent> <leader>mw :call MarkWindowSwap()<cr>
nnoremap <silent> <leader>pw :call DoWindowSwap()<cr>
"}}}
" "" switching buffers"{{{
nnoremap <silent> <leader>bp :bprevious<cr> " closing mb on/off
nnoremap <silent> <leader>bn :bnext<cr> " closing mb on/off

nnoremap <esc>ß :b #<cr> " changes to previous buffer
nnoremap <esc>1 :b 1<cr>
nnoremap <esc>2 :b 2<cr>
nnoremap <esc>3 :b 3<cr>
nnoremap <esc>4 :b 4<cr>
nnoremap <esc>5 :b 5<cr>
nnoremap <esc>6 :b 6<cr>
nnoremap <esc>7 :b 7<cr>
nnoremap <esc>8 :b 8<cr>
nnoremap <esc>9 :b 9<cr>
nnoremap <esc>0 :b 10<cr>
"}}}
" " "" change to window from bufferlist"{{{
" " http://vim.wikia.com/wiki/easier_buffer_switching
" command -nargs=? -bang Buffer if <q-args> != '' | exe 'buffer '.<q-args> | else | ls<bang> | let buffer_nn=input('Which one: ') | if buffer_nn != '' | exe buffer_nn != 0 ? 'buffer '.buffer_nn : 'enew' | endif | endif
" "}}}
" "" switch to alternate file"{{{
map <c-tab> :bnext<cr>
map <c-s-tab> :bprevious<cr>
" "}}}
"}}}

" Advanced Movements
" jump back to marked position"{{{
nnoremap M `m
vnoremap M `m
""}}}
" moving to middle of line (instead of 'screen')"{{{
" see: http://superuser.com/a/216423
nnoremap gm :call cursor(0, virtcol('$')/2)<cr>
""}}}

" Miscellaneous
" change formatting"{{{
nnoremap <silent>d<space> :'{,'}s/\s\s/ /g<CR>
nnoremap <silent>da<space> :%s/^\ \ \+//g<CR>
nnoremap <silent>d^ vap:s/^\ *//g<CR>g;g;g;
"}}}
" insert path to graphics"{{{
" http://superuser.com/questions/428423/get-path-of-existing-directory-or-file-paste-at-cursor-position
nnoremap <leader>ff :r!basename<space>
vnoremap <leader>ff <ESC>:r!basename<space>
"}}}
" word completion"{{{
"" example of a set of mappings that first close any popups that are open
"" which means you can seamlessly switch between omni and user completions
"" http://vim.wikia.com/wiki/vimtip1386
set completeopt=longest,menuone
inoremap <expr> <cr> pumvisible() ? "\<c-y>" : "\<c-g>u\<cr>"
inoremap <expr> <c-n> pumvisible() ? '<c-n>' :
            \ '<c-n><c-r>=pumvisible() ? "\<lt>down>" : ""<cr>'
inoremap <expr> <m-,> pumvisible() ? '<c-n>' :
            \ '<c-x><c-o><c-n><c-p><c-r>=pumvisible() ? "\<lt>down>" : ""<cr>'
"}}}
" count character under cursor in line"{{{
nnoremap <leader>ct xhp:s/<c-r>-/&/gn<CR><esc>
" }}}
" substituting strings"{{{
"" first character of line capitalised
map <leader>gu :s/\([[:blank:]].\)/\u\1/g<cr> :s/^\(.\)/\u\1/g<cr>
"}}}
" paste yanked input at end of line"{{{
" http://vim.wikia.com/wiki/Maintain_cursor_and_screen_position

function! CurPos(action)"{{{
  if a:action == "save"
    let b:saveve = &virtualedit
    let b:savesiso = &sidescrolloff
    set virtualedit=all
    set sidescrolloff=0
    let b:curline = line(".")
    let b:curvcol = virtcol(".")
    let b:curwcol = wincol()
    normal! g0
    let b:algvcol = virtcol(".")
    normal! M
    let b:midline = line(".")
    execute "normal! ".b:curline."G".b:curvcol."|"
    let &virtualedit = b:saveve
    let &sidescrolloff = b:savesiso
  elseif a:action == "restore"
    let b:saveve = &virtualedit
    let b:savesiso = &sidescrolloff
    set virtualedit=all
    set sidescrolloff=0
    execute "normal! ".b:midline."Gzz".b:curline."G0"
    let nw = wincol() - 1
    if b:curvcol != b:curwcol - nw
      execute "normal! ".b:algvcol."|zs"
      let s = wincol() - nw - 1
      if s != 0
        execute "normal! ".s."zl"
      endif
    endif
    execute "normal! ".b:curvcol."|"
    let &virtualedit = b:saveve
    let &sidescrolloff = b:savesiso
    unlet b:saveve b:savesiso b:curline b:curvcol b:curwcol b:algvcol b:midline
  endif
  return ""
endfunction
""}}}
nnoremap <s-c-p> :call CurPos("save")<cr>$p :call CurPos("restore")<cr>

"}}}
" desactivate highlighting of search results"{{{
nnoremap <silent> <esc> :nohl<cr>
"}}}
" printout date in current line"{{{
nnoremap <leader>sd o<c-r>=strftime("%c")<cr><esc>
"}}}
" execute cmd between mark 'a and 's"{{{
nnoremap <leader>m :'a,'s
"}}}
" when you forgot to sudo before editing a file that requires root privileges"{{{
"(typically /etc/hosts). this lets you use w!! to do that after you opened the
"file already
cmap w!! w !sudo tee % >/dev/null
"}}}

" Toggle Plugins
" toggle neocomplete "{{{
nnoremap <leader>tnc :NeoCompleteToggle<cr>
vnoremap <leader>tnc <esc>:NeoCompleteToggle<cr>
"}}}
