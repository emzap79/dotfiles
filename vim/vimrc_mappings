" vim:ft=vim fdm=marker
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                   MAPPINGS                                   "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" File: vimrc_mappings
" Author: Jonas Petong
" Description: vim mapping configuration
" Last Modified: September 19, 2014

" Conflicting Mappings                                                         {{{1
" Https://Www.Reddit.Com/R/Vim/Comments/2o53tb/Issues_with_key_mappings_and_various_plugins/Cmjsiwj
"
" In Some Cases, Som Keymappings Will Conflict With Some Plugins So That
" They'Re Not Executable At All. In Such Occasions It'S Regardable To Look Out
" For The Conflicting Mapping By Executing:
"
" :Verb Map <Mapping>, Where " <Mapping> Has To Get Replaced By The Regarding
" Keymap, Eg. Gf

" Basic Mappings                                                               {{{1

" config                                                                       {{{2

" mapping examples                                                             {{{2

" map (all modes)
" vnoremap (visual mode)
" inoremap (insert mode)
" nnoremap (normal mode)
" smap (select mode)

" <f1> through <f12>
" <s-...>       shift-key
" <c-...>       control-key
" <m-...>       alt-key or meta-key
" <a-...>       same as <m-...>
" enter: <cr> or <enter> or <return>
" all special keys
" see - :h keycodes

" a workaround for the <Alt> vs. <ESC> issue:
" http://stackoverflow.com/a/10216459

" set leader-keys                                                              {{{2

" change the mapleader from \ to,

let plug=";"
let mapleader="\<space>"
let maplocalleader=","
" let r-plugin-localleader="\<space>"
" xmodmap -e 'clear Lock' -e 'keycode 0x42 = Escape'

" f-keys                                                                       {{{2

" <f1>  " show current directory                                               {{{3

" change local buffer to current dir
" nnoremap <f1> :echom "s: cd to path \| c: cd to localpath \| a: show full path"<cr>
" inoremap <f1><esc>:echom "s: cd to path \| c: cd to localpath \| a: show full path"<cr>
" vnoremap <f1><esc>:echom "s: cd to path \| c: cd to localpath \| a: show full path"<cr>

" change local buffer to current dir
nnoremap <F1> :cd %:p:h<cr>:echo expand('%:p')<cr>
inoremap <F1> <esc>:cd %:p:h<cr>:echo expand('%:p')<cr>
vnoremap <F1> <esc>:cd %:p:h<cr>:echo expand('%:p')<cr>

" change to current dir
nnoremap <C-F1> :lcd %:p:h<cr>:echo expand('%:p')<cr>
inoremap <C-F1> <esc>:lcd %:p:h<cr>:echo expand('%:p')<cr>
vnoremap <C-F1> <esc>:lcd %:p:h<cr>:echo expand('%:p')<cr>

" show full path
nnoremap <s-a-f1> :echo expand('%:p')<cr>
inoremap <s-a-f1> <esc>:echo expand('%:p')<cr>
vnoremap <s-a-f1> <esc>:echo expand('%:p')<cr>

" <f2>  " save file                                                            {{{3

" echo options
nnoremap <A-f2> :echom "s: save file and source vimrc \| c: make session and source vimrc"<cr>
inoremap <a-f2><esc>:echom "s: save file and source vimrc \| c: make session and source vimrc"<cr>
vnoremap <a-f2><esc>:echom "s: save file and source vimrc \| c: make session and source vimrc"<cr>

" save file and source vimrc
if has("gui_running")
    nnoremap <silent><f2> :exe "w \| so $MYGVIMRC \| %foldo!"<cr>
    inoremap <silent><f2> <esc>:exe "w \| so $MYGVIMRC \| %foldo!"<cr>
else
    nnoremap <silent><f2> :exe "w \| so $MYVIMRC \| if foldclosed(\".\") >= 0 \| %foldo! \| endif"<cr>
    inoremap <silent><f2> <esc>:exe "w \| so $MYVIMRC \| if foldclosed(\".\") >= 0 \| %foldo! \| endif"<cr>
endif

"save & exit
nnoremap <c-f2> :mks!<cr>:wqall!<cr>
inoremap <c-f2> <esc>:mks!<cr>:wqall!<cr>

" <f3>  " bufferlist                                                           {{{3

" echo options
nnoremap <f3> :echom "s: save file and source vimrc \| c: make session and source vimrc"<cr>
inoremap <f3><esc>:echom "s: save file and source vimrc \| c: make session and source vimrc"<cr>
vnoremap <f3><esc>:echom "s: save file and source vimrc \| c: make session and source vimrc"<cr>

" " select buffer
"call fuzzyfinder
nnoremap <f3> :FufBuffer<cr>
inoremap <f3> <esc>:FufBuffer<cr>

"alternativ: plugin selectbuf.vim
nnoremap <s-f3> :buffer<cr>
inoremap <s-f3> <esc>:buffer<cr>

" <f4>  " open file                                                            {{{3

"call fuzzyfinder for files in current buffer
nnoremap <f4> :FufFileWithCurrentBufferDir<cr>
inoremap <f4> <esc>:FufFileWithCurrentBufferDir<cr>

"call fuzzyfinder for files in current buffer
nnoremap <s-f4> :FufFileWithFullCwd<cr>
inoremap <s-f4> <esc>:FufFileWithFullCwd<cr>

"call fuzzyfinder for files in homedir
nnoremap <c-f4> :FufFile<cr>
inoremap <c-f4> <esc>:FufFile<cr>

" <f5>  " open mru file                                                        {{{3

"call fuzzyfinder for mru-files
nnoremap <f5> :FufMruFile<cr>
inoremap <f5> <esc>:FufMruFile<cr>

" <f6>  " syntax                                                               {{{3
" func: ToggleSyntax                                                           {{{4

fun! ToggleSyntax()
    if exists("g:syntax_on")
        syntax off
    else
        syntax enable
    endif
    if exists("g:syntax_on") | echo "syntax enabled" | else | echo "syntax disabled" | endif
endfun

" switch on syntax highlight
nnoremap <f6> :call ToggleSyntax()<cr>
inoremap <f6> <c-o>:call ToggleSyntax()<cr>

" <f7>  " language tool                                                        {{{3

"enable languagetool
"for use with latex: http://tex.stackexchange.com/questions/6333/grammar-checking-tool-for-use-with-latex/6552#6552
nnoremap  <f7>  :'{,'}LanguageToolCheck<cr>:vertical  lopen  80<CR>
vnoremap  <f7>  :LanguageToolCheck<cr>:vertical  lopen  80<CR>

" <f8>  " spellcheck                                                           {{{3

" switch spellcheck languages
" func: toggle languages                                                       {{{4
" http://vim.wikia.com/wiki/toggle_spellcheck_with_function_keys

let b:mylang=0
let g:mylanglist=["nospell","de_de","en_us","es","de_de,en_us"]
fun! ToggleSpell()
    let b:mylang=b:mylang+1
    if b:mylang>=len(g:mylanglist) | let b:mylang=0 | endif
    if b:mylang==0
        setlocal nospell
    else
        execute "setlocal spell spelllang=".get(g:mylanglist, b:mylang)
    endif
    echo "spell checking language:" g:mylanglist[b:mylang]
endfun

nnoremap <f8> :call ToggleSpell()<cr>
inoremap <f8> <c-o>:call ToggleSpell()<cr>

"aspell spellcheck
nnoremap <c-f8> :w!<cr>:!/usr/bin/aspell --dont-backup --dont-tex-check-comments check %<cr>:e! %<cr>
inoremap <c-f8> :w!<cr>:!/usr/bin/aspell --dont-backup --dont-tex-check-comments check %<cr>:e! %<cr>

"count words in latex
nnoremap <a-f8> :w !detex \| wc -w<cr>
inoremap <a-f8> :w !detex \| wc -w<cr>

" Autocorrect typos
nnoremap <s-m-f8> :call AutoCorrect()<CR>
vnoremap <s-m-f8> <ESC>:call AutoCorrect()<CR>
inoremap <s-m-f8> <ESC>:call AutoCorrect()<CR>

" <f9>  " toggle linewrapping, -numbers and foldcolumn etc.                    {{{3

" func: toggle through textwidth                                               {{{4

let b:mytextwidth=0
let g:mytextwidthlist=["0","72","80","115"]
fun! ToggleTextwidth()
    call clearmatches()
    let b:mytextwidth=b:mytextwidth+1
    if b:mytextwidth>=len(g:mytextwidthlist) | let b:mytextwidth=0 | endif
    if b:mytextwidth==0
        setlocal textwidth=0
    else
        execute "setlocal textwidth=".get(g:mytextwidthlist, b:mytextwidth)
        execute "call matchadd('ColorColumn', '\\%" . &textwidth . "v', 100)"
    endif
    if &fo =~ "t" | echo "wrap" | else | echo "nowrap" | endif
    echo "current textwidth:" g:mytextwidthlist[b:mytextwidth]
    redraw
endfun

nnoremap <f9> :call ToggleTextwidth()<CR>
vnoremap <f9> <ESC>:call ToggleTextwidth()<CR>
inoremap <f9> <ESC>:call ToggleTextwidth()<CR>

"toggle linewrapping
" func: ToggleWrap                                                             {{{4

fun! ToggleWrap()
    if &fo =~ "t"
        set fo-=t
        call clearmatches()
    else
        set fo+=t
    endif
    if &fo =~ "t" | echo "wrap" | else | echo "nowrap" | endif
    echo "current textwidth:" &g:textwidth
    redraw
endfun

nnoremap <s-f9> :call ToggleWrap()<cr>
nnoremap <s-f9> <esc>:call ToggleWrap()<cr>

" toggle foldcolumn on left
" func: ToggleFoldColumn

fun! ToggleFoldColumn()
    if &foldcolumn
        setlocal foldcolumn=0
    else
        setlocal foldcolumn=4
    endif
endfun

nnoremap <c-f9> :call ToggleFoldColumn()<cr>
vnoremap <c-f9> <ESC>:call ToggleFoldColumn()<cr>
inoremap <c-f9> <ESC>:call ToggleFoldColumn()<cr>

" <f10>  " enable plugins                                                      {{{3

" toggle YouCompleteMe
nnoremap <f10> :call ToggleYCM()<CR>
inoremap <f10> <ESC>:call ToggleYCM()<CR>

" "Enable Neocomplete <Plugin>                                                 {{{4

" nnoremap <S-f10> :NeoCompleteToggle<cr>
" vnoremap <S-f10> <esc>:NeoCompleteToggle<cr>

"nnoremap <f10> :NeoCompleteEnable<CR>
"inoremap <f10> <ESC>:NeoCompleteEnable<CR>
"vnoremap <f10> <ESC>:NeoCompleteEnable<CR>

" note: disabled due to performance issues!
"""""""""""""""""""""""""""""""""""""""""""
" "call fuzzyfinder for mru-files
" nnoremap <f10> :fufmrufile<cr>
" inoremap <f10> <esc>:fufmrufile<cr>

" " call most recent used commands
" nnoremap <s-f10> :fufmrucmd<cr>
" inoremap <s-f10> <esc>:fufmrucmd<cr>
"""""""""""""""""""""""""""""""""""""""""""

" <f11> " *** no functions yet***                                              {{{3
" <f12> " *** no functions yet***                                              {{{3


" basic key remaps                                                             {{{2

" save file in normal-mode                                                     {{{2

" save file by hitting <space>
nnoremap <space><space> :wall!<CR>
vnoremap <space><space> <ESC>:wall!<CR>

" paste to clipboard                                                           {{{2

" http://sheerun.net/2014/03/21/how-to-boost-your-vim-productivity/
vnoremap <Leader>y "+y
vnoremap <Leader>d "+d
nnoremap <Leader>P "+P
vnoremap <Leader>P "+P

" visual mode mappings                                                         {{{2

" change visual mappings                                                       {{{2

nnoremap v <C-V>
nnoremap <S-V> v
nnoremap <C-V> <S-V>

vnoremap v <C-V>
vnoremap <S-V> v
vnoremap <C-V> <S-V>

" visually select rows from exe                                                {{{2

" http://unix.stackexchange.com/a/58748
command! -range Vis call setpos('.', [0,<line1>,0,0]) |
                    \ exe "normal V" |
                    \ call setpos('.', [0,<line2>,0,0])

" yank/delete from cursor to eol with Y                                        {{{2

" yank from the cursor to the end of the line, to be consistent with c and d.
nnoremap Y y$
nnoremap D d$

" quickly select text you just pasted:                                         {{{2

noremap gV `[v`]

" open & edit vimrc-files                                                      {{{2

" edit config file in horizontal split mode
nnoremap <silent> <leader>erc :sp ~/.vimrc<cr>
nnoremap <silent> <leader>es :UltiSnipsEdit<cr>
nnoremap <silent> <leader>ee :sp ~/.vim/vimrc_general<cr>
nnoremap <silent> <leader>ev :sp ~/.vim/vimrc_vimgolf<cr>
nnoremap <silent> <leader>ef :sp ~/.vim/vimrc_foldexpr<cr>
nnoremap <silent> <leader>ec :sp ~/.vim/vimrc_colors<cr>
nnoremap <silent> <leader>eb :sp ~/.vim/vimrc_mappings<cr>
nnoremap <silent> <leader>em :sp ~/.vim/vimrc_mutt<cr>
nnoremap <silent> <leader>er :sp ~/.vim/ftplugin/r.vim<cr>
nnoremap <silent> <leader>et :sp ~/.vim/ftplugin/tex.vim<cr>
nnoremap <silent> <leader>ea :sp ~/.vim/plugin/vim-autocorrect.vim<cr>
nnoremap <silent> <leader>ep :sp ~/.vim/vimrc_plugs<cr>

" Plugin-Maps                                                                  {{{1

" better-/hudigraphs <plugin>                                                  {{{2

inoremap <expr> <K> BDG_GetDigraph()
" inoremap <expr> <K> HUDG_GetDigraph()

" vmath <plugin>                                                               {{{2

" press ++ to get mathematical data of visual block
vnoremap <expr> ++ VMATH_YankAndAnalyse()
nnoremap ++ vip++

" region expanding <plugin>                                                    {{{2

" https://github.com/terryma/vim-expand-region
vnoremap v <Plug>(expand_region_expand)
vnoremap <C-v> <Plug>(expand_region_shrink)

" listtrans <plugin>                                                           {{{2

nnoremap <leader>lt  :call ListTrans_toggle_format()<CR>
vnoremap <leader>lt :call ListTrans_toggle_format('visual')<CR>

" calculator <plugin>                                                          {{{2

" http://vim.wikia.com/wiki/scientific_calculator
" :command! -nargs=- calc :py print <args>
" :py from math import *

nnoremap <leader>clc :calc<cr>
nnoremap <leader>slc :scalcvsplit<cr>

" alignment <plugin>                                                           {{{2

" Align
nnoremap <leader>aa :%Align!<space>p
nnoremap <leader>al :%Align!<space>p
vnoremap <leader>al :%Align!<space>p
nnoremap <leader>am :'a,'sAlign!<space>p
vnoremap <leader>am :'<,'>Align!<space>p
nnoremap <leader>ap :'{,'}Align!<space>p
vnoremap <leader>ap <esc>:'{,'}Align!<space>p

" AlignCtrl
nnoremap <leader>ac :AlignCtrl<space>
vnoremap <leader>ac <esc>:AlignCtrl<space>

" AlignCtrl
nnoremap <leader>ag :AlignCtrl g<space>
vnoremap <leader>ag <esc>:AlignCtrl g<space>
nnoremap <leader>av :AlignCtrl v<space>
vnoremap <leader>av <esc>:AlignCtrl v<space>

" frisk <plugin>                                                               {{{2

nnoremap <leader>fr :frisk<space>-
vnoremap <leader>fr :frisk<space>=GetVisualSelection()<cr>

" visual-block movement <plugin>                                               {{{2

vnoremap  <expr>  <LEFT>   DVB_Drag('left')
vnoremap  <expr>  <RIGHT>  DVB_Drag('right')
vnoremap  <expr>  <DOWN>   DVB_Drag('down')
vnoremap  <expr>  <UP>     DVB_Drag('up')
vnoremap  <expr>  D        DVB_Duplicate()

" fugitive <plugin>                                                            {{{2

" fugitive git bindings
" map fugitive commands to <leader>g
" http://www.reddit.com/r/vim/comments/21f4gm/best_workflow_when_using_fugitive/cgciltz
nnoremap <space>ga :Git add %:p<CR><CR>
nnoremap <space>gs :Gstatus<CR>
nnoremap <space>gc :Gcommit -v -q<CR>
nnoremap <space>gt :Gcommit -v -q %:p<CR>
nnoremap <space>gd :exe "Gdiff \| %foldo!"<CR>
nnoremap <space>ge :Gedit<CR>
nnoremap <space>gr :Gread<CR>
nnoremap <space>gw :Gwrite<CR><CR>
nnoremap <space>gl :silent! Glog<CR>:bot copen<CR>
nnoremap <space>gp :Ggrep<Space>
nnoremap <space>gm :Gmove<Space>
nnoremap <space>gb :Git branch<Space>
nnoremap <space>go :Git checkout<Space>
nnoremap <space>gps :Dispatch! git push<CR>
nnoremap <space>gpl :Dispatch! git pull<CR>

" autocomd so that 'd' in visual mode doesn't cause a pause outside of diff-mode
" http://www.reddit.com/r/vim/comments/21f4gm/best_workflow_when_using_fugitive/cgcrfwz
autocmd BufRead fugitive\:* xnoremap <buffer> dp :diffput<cr>
autocmd BufRead fugitive\:* xnoremap <buffer> do :diffget<cr>

" tmux-navigator <plugin>                                                      {{{2

" " https://github.com/christoomey/vim-tmux-navigator#vim-1
" " must disable c-[ljkh] mappings first
" nnoremap <silent> <c-l> :TmuxNavigateRight<cr>
" nnoremap <silent> <c-j> :TmuxNavigateDown<cr>
" nnoremap <silent> <c-k> :TmuxNavigateUp<cr>
" nnoremap <silent> <c-h> :TmuxNavigateLeft<cr>
" nnoremap <silent> <c-\> :TmuxNavigatePrevious<cr>

" obsession <plugin>                                                           {{{2

nnoremap <silent><leader>ob :Obsession <CR>
vnoremap <silent><leader>ob :Obsession <ESC><CR>
inoremap <silent><localleader>ob :Obsession <ESC><CR>

" showmarks <plugin>                                                           {{{2

" show marks
nnoremap <silent><leader>ms :DoShowMarks<CR>
vnoremap <silent><leader>ms <ESC>:DoShowMarks<CR>
inoremap <silent><localleader>ms <ESC>:DoShowMarks<CR>

" unshow marks
nnoremap <silent><leader>mn :NoShowMarks<CR>
vnoremap <silent><leader>mn <ESC>:NoShowMarks<CR>
inoremap <silent><localleader>mn <ESC>:NoShowMarks<CR>

" delete marks
nnoremap <silent><leader>md :exe 'delm! \|
            \ delm A-Z0-9 \|
            \ echom "all marks removed!"'<CR>
vnoremap <silent><leader>md <ESC>:exe 'delm! \|
            \ delm A-Z0-9 \|
            \ echom "all marks removed!"'<CR>
inoremap <silent><localleader>md <ESC>:exe 'delm! \|
            \ delm A-Z0-9 \|
            \ echom "all marks removed!"'<CR>

" :[count]ShowMarksOnce
   " Display marks for [count] Cursorhold
   " events. Mostly for mapping it like :
   " nnoremap ` :ShowMarksOnce<cr>`

" :[count]PreviewMarks
   " Display marks of current buffer in pvw.
   " Like ':marks', but at the top of the window ;-).
   " [count] is the same as above.

   "" Show Marks while opening closed folds
   " nnoremap M :exe "ShowMarksOnce \|
   " \ if foldclosed(\".\") >= 0 \|
   " \ %foldo! \|
   " \ endif"<cr>

" tCommenter <plugin>                                                          {{{2

nmap cy :normal yygcc<cr>
nmap cp :normal yygccp<cr>
nmap yp :normal yyp<cr>

" Vundle <plugin>                                                              {{{2

"call bundlelist
nnoremap <leader>bl :BundleList<cr>
inoremap <leader>bl <esc>:BundleList<cr>

"call bundleclean!
nnoremap <leader>bc :BundleClean!<cr>
inoremap <leader>bc <esc>:BundleClean!<cr>

"call bundleinstall
nnoremap <leader>bi :BundleInstall<cr>
inoremap <leader>bi <esc> :BundleInstall<cr>

"call bundleinstall!
nnoremap <leader>bu :BundleInstall!<cr>
inoremap <leader>bu <esc>:BundleInstall!<cr>

" Folds & Marks                                                                {{{1

" jump back to marked position                                                 {{{2

nnoremap \ `m :ShowMarksOnce<cr>:foldo<cr>

" fold commands                                                                {{{2

" activating 'visual-folding' by pressing <enter>
" http://vim.wikia.com/wiki/Folding
" nnoremap <silent> <space> @=(foldlevel('.')?'za':"\<Space>")<space>

" add emptyline between beginning / ending of folds

" set foldmarkers automatically
nnoremap <silent><leader>fl :normal yyma<cr>
nnoremap <silent><leader>fk :normal pzf'a<cr>
vnoremap <silent><leader>fk :normal pzf'a<cr>

" Buffers & Tabs                                                               {{{1

" tab movements                                                                {{{2

" change to next tab                                                           {{{3

if has("gui_running")
    nnoremap <s-space> :tabn<cr>
    nnoremap <c-@> <s-space>
endif

" window-movements                                                             {{{2

" swap position of two open buffer-windows                                     {{{3

" " func: window swap                                                          {{{4

" http://stackoverflow.com/a/4903681
" move to the window to mark for the swap via ctrl-w movement
" type,mw move to the window you want to swap type,pw
" voila! swapped buffers without screwing up your window layout!
fun! MarkWindowSwap()
    let g:markedwinnum = winnr()
endfun

fun! DoWindowSwap()
    mark destination
    let curnum = winnr()
    let curbuf = bufnr( "%" )
    exe g:markedwinnum. "wincmd w"
    " switch to source and shuffle dest->source
    let markedbuf = bufnr( "%" )
    " hide and open so that we aren't prompted and keep history
    exe 'hide buf' curbuf
    " switch to dest and shuffle source->dest
    exe curnum. "wincmd w"
    " hide and open so that we aren't prompted and keep history
    exe 'hide buf' markedbuf
endfun

nnoremap <silent> <leader>mw :call MarkWindowSwap()<cr>
nnoremap <silent> <leader>pw :call DoWindowSwap()<cr>

" switching buffers                                                            {{{2

" changes to previous buffer
nnoremap <esc>ß :b #<cr>

" move around between buffers
nnoremap <c-k> <c-w><up>
nnoremap <c-j> <c-w><down>
nnoremap <c-h> <c-w><left>
nnoremap <c-l> <c-w><right>

" switch to alternate file                                                     {{{2

nnoremap <c-tab> :bnext<cr>
nnoremap <c-s-tab> :bprevious<cr>

" reload session.vim                                                           {{{2

nnoremap <leader>ss :lcd %:p:h<CR>:so Session.vim<CR>
vnoremap <leader>ss <ESC>:lcd %:p:h<CR>:so Session.vim<CR>

" open/edit/close buffers                                                      {{{2

" close non-open buffers                                                       {{{2

" func: Wipeout                                                              " {{{2

" http://stackoverflow.com/a/1536094
function! Wipeout()
    " list of *all* buffer numbers
    let l:buffers = range(1, bufnr('$'))

    " what tab page are we in?
    let l:currentTab = tabpagenr()
    try
        " go through all tab pages
        let l:tab = 0
        while l:tab < tabpagenr('$')
            let l:tab += 1

            " go through all windows
            let l:win = 0
            while l:win < winnr('$')
                let l:win += 1
                " whatever buffer is in this window in this tab, remove it from
                " l:buffers list
                let l:thisbuf = winbufnr(l:win)
                call remove(l:buffers, index(l:buffers, l:thisbuf))
            endwhile
        endwhile

        " if there are any buffers left, delete them
        if len(l:buffers)
            execute 'bwipeout' join(l:buffers)
        endif
    finally
        " go back to our original tab page
        execute 'tabnext' l:currentTab
    endtry

endfunction

nnoremap <leader>wo :call Wipeout()<CR>
vnoremap <leader>wo <ESC>:call Wipeout()<CR>

" open new buffer                                                            " {{{2

nnoremap <leader>e :lcd %:p:h<cr>:e<space>
nnoremap <leader>vf :ldc %:p:h<cr>:vertical find<space>
nnoremap <leader>ht :helptags ~/.vim/doc<cr>
nnoremap <leader>v :lcd %:p:h<cr>:vertical<space>
nnoremap <leader>vb :lcd %:p:h<cr>:vertical sb<space>

" open nonexisting file under cursor                                           {{{2

" http://stackoverflow.com/a/6159415
nnoremap gF :lcd %:p:h<cr>:e! ./<cfile><cr>

" buffer to 2/3 width                                                          {{{2

nnoremap <silent> <Leader>+ :exe "vert resize " . (winwidth(0) * 3/2)<CR>
nnoremap <silent> <Leader>- :exe "vert resize " . (winwidth(0) * 2/3)<CR>

" Searches & Replacement                                                       {{{1

" search for pattern                                                           {{{2
" online searches                                                              {{{3

" "search wikipedia from within vim
" nnoremap <leader>fw :exe "!firefox 'http://de.wikipedia.org/w/index.php?search='<c-r>=" . "call Wikipedia()<cr>"<cr><cr>

"search wikipedia from within vim                                              {{{4
nnoremap <leader>fw <esc>:! firefox
            \ 'http://de.wikipedia.org/w/index.php?search=<c-r>=Wikipedia()<cr>'
            \ <cr><cr>

"search google from within vim                                                 {{{4
nnoremap <leader>fg <esc>:! firefox
            \ 'http://google.de/search?q=<c-r>=Google()<cr>'
            \ <cr><cr>

"search tex-stackexchange from within vim                                      {{{4
nnoremap <leader>ft <esc>:! firefox
            \ 'http://tex.stackexchange.com/search?q=<c-r>=Tex()<cr>'
            \ <cr><cr>

"search stackoverflow from within vim                                          {{{4
nnoremap <leader>fs <esc>:! firefox
            \ 'http://stackoverflow.com/search?q=<c-r>=StackOverflow()<cr>'
            \ <cr><cr>

" offline searches                                                             {{{3

"appending to the previous search pattern the current word under the cursor    {{{4

"http://stackoverflow.com/a/9261779
nnoremap <leader>as :let @/.='\\|\<'.expand("<cword>").'\>'<cr>

"search for a word in ding/dict/thes                                         " {{{4

" ding
nnoremap <leader>dg :exe "!ding " . shellescape(expand("<cword>"))<cr><cr>
vnoremap <leader>dg :<c-u>!ding <c-r>=GetVisualSelection()<cr><cr>
" dictionary
nnoremap <leader>di :exe "!dict " . shellescape(expand("<cword>"))<cr>
vnoremap <leader>di :<c-u>!dict <c-r>=GetVisualSelection()<cr>
" open thesaurus
nnoremap <leader>dt :exe "r!othes " . shellescape(expand("<cword>"))<cr>
vnoremap <leader>dt :<c-u>r!othes <c-r>=GetVisualSelection()<cr>
" google translate
" trs\ {en=@en+de}

" text replacement                                                             {{{2

" replace - with #                                                             {{{3
nnoremap <silent><leader>b# :s/-/#/g3<CR>
vnoremap <silent><leader>b# <ESC>:s/-/#/g3<CR>
inoremap <silent><localleader>b# <ESC>:s/-/#/g3<CR>

" replace spaces through semicolon                                             {{{3

" mnemonic: [s]pace to [s]emicolon
nmap <leader>ss :exe "s/\[^,\]\\zs\\s/\\; /g \| nohls"<cr>
nmap <leader>sS :exe "%s/\\s*\;\\s*/\\;/g \| nohls"<cr>


" change word under curser                                                     {{{3

" replace words by hitting '.'
nnoremap <leader>x *``cgn
nnoremap <leader>X #``cgN

" replace word under cursor in paragraph/buffer
nnoremap <leader>r :%s/\<<C-r>=expand('<cWORD>')<CR>\>/
nnoremap <leader>R :'{,'}s/\<<C-r>=expand('<cWORD>')<CR>\>/

" replace word under cursor in visual selection
xnoremap <leader>r :<C-u>%s/<C-r>=GetVisualSelection()<CR>/
xnoremap <leader>R :<C-u>'{,'}s/<C-r>=GetVisualSelection()<CR>/

" trim consecutive empty rows to single blank line                             {{{3
" http://stackoverflow.com/a/726158/3569509
nnoremap <leader>bb :g/^\_$\n\_^$/d<CR>
vnoremap <leader>bb <ESC>:g/^\_$\n\_^$/d<CR>
inoremap <localleader>bb <ESC>:g/^\_$\n\_^$/d<CR>

" http://vim.wikia.com/wiki/Best_Vim_Tips
" or: v/./.,/./-1join : compress empty lines
" or: %s/^\(.*\)\n\(\1\n\)*/\1\r/

" remove (trailing) spaces                                                     {{{3

" remove duplicate lines
" http://vim.wikia.com/wiki/Power_of_g
nnoremap <silent><leader>dd :exe '%g/^\(.*\)\(\r\?\n\1\)\+$/d \| %!uniq'<cr>``

" remove trailing whitespaces
" http://vim.wikia.com/wiki/Remove_unwanted_spaces
nnoremap <silent><space>dp :'{,'}s/\s\s\+/ /g<CR>:nohl<CR>``
vnoremap <silent><space>dv :B s/\s\s\+/ /g<cr>:nohl<cr>
nnoremap <silent><space>d0 :'{,'}s/^\s\+//g<CR>:nohl<CR>``
nnoremap <silent><space>d$ :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar>:nohl<CR>``
nnoremap <silent><space>da :%s/\s\s\+/ /g<CR>:nohl<CR>``

" merge two blocks                                                             {{{3
" http://stackoverflow.com/a/10760494
" nnoremap <silent><leader>mg :'a,'sdel | let l=split(@", '\n') | 'd,'fs/$/\=remove(l,0)/<CR>
" vnoremap <silent><leader>mg <ESC>:'a,'sdel | let l=split(@", '\n') | 'd,'fs/$/\=remove(l,0)/<CR>
" inoremap <silent><localleader>mg <ESC>:'a,'sdel | let l=split(@", '\n') | 'd,'fs/$/\=remove(l,0)/<CR>

" Edit Words & Lines                                                           {{{1

" counting characters                                                          {{{2

" count characters in line                                                     {{{3
nnoremap <leader>cc xP:s/<c-r>-/&/gn<CR>

"count words in latex (selection)                                              {{{3
nnoremap <leader>cw :w !detex \| wc -w<cr>
vnoremap <leader>cw :w !detex \| wc -w<cr>

" copy text to register                                                        {{{2
" copy current file name (relative/absolute) to system clipboard               {{{3
" https://github.com/panozzaj/conf/blob/master/common/etc/.vimrc#L176

if has("mac") || has("gui_macvim") || has("gui_mac")
  nnoremap <leader>exp :let @*=expand("%")<CR>     " relative path  (src/foo.txt)
  nnoremap <leader>exP :let @*=expand("%:p")<CR>   " absolute path  (/something/src/foo.txt)
  nnoremap <leader>exf :let @*=expand("%:t")<CR>   " filename       (foo.txt)
  nnoremap <leader>exh :let @*=expand("%:p:h")<CR> " directory name (/something/src)
endif
if has("gui_gtk") || has("gui_gtk2") || has("gui_gnome") || has("unix")
  nnoremap <leader>exp :let @+=expand("%")<CR>     " relative path  (src/foo.txt)
  nnoremap <leader>exP :let @+=expand("%:p")<CR>   " absolute path  (/something/src/foo.txt)
  nnoremap <leader>exf :let @+=expand("%:t")<CR>   " filename       (foo.txt)
  nnoremap <leader>exh :let @+=expand("%:p:h")<CR> " directory name (/something/src)
endif

" copy matches to register                                                     {{{3

" http://vim.wikia.com/wiki/Copy_search_matches
function! CopyMatches(reg)
  let hits = []
  %s//\=len(add(hits, submatch(0))) ? submatch(0) : ''/ge
  let reg = empty(a:reg) ? '+' : a:reg
  execute 'let @'.reg.' = join(hits, "\n") . "\n"'
endfunction
command! -register CopyMatches call CopyMatches(<q-reg>)

" upper- / lowercase, flip                                                     {{{2
" uppercase beginning of word/line                                             {{{3

" first character of word capitalised
nnoremap <silent><s-u> :normal! mzlbgUl`z<cr>:nohl<cr>
nnoremap <silent><leader>u :normal! mzlbgUl`z<cr>:nohl<cr>

" first character of line capitalised
nnoremap <silent><leader>u^ :normal! mz^gUl`z<cr>:nohl<cr>

" first character of every words in line capitalised
nnoremap <silent><leader>uu mz :s/\<\w\+/\u\0/g<cr>:nohl<cr>`z

" flip text horizontally                                                       {{{3

nnoremap <leader>fh :Mirror<CR>
command! -bar -range Mirror <line1>,<line2>call setline('.', join(reverse(split(getline('.'), '\zs')), ''))

" Miscellaneous                                                                {{{1

" add abbreviations                                                            {{{2

"mapping to automatically add an abbreviation
nnoremap <leader>ab <sid>:call AddAbbr()<cr>
vnoremap <leader>ab <sid>:call AddAbbr()<cr>
"" func: abbreviations                                                         {{{3

"" an abbreviation is a short form of long text e.g. mfg mit freundlichen grüßen
"" its found in ~/.vim/ftplugin/tex.vim (at the eof)

"abbreviation
fun! AddAbbr()
    normal! byw
    let stringchar = lh#visual#selection()
    let val = input("enter the abbreviation you wish to use for '". stringchar. "' :")
    exec "ia" stringchar val
    silent call SaveAbbr(stringchar, val)
endfun

fun! SaveAbbr(val, abbr)
    redir >>~/.vim/ftplugin/tex.vim
    redir >>~/.vim/ftplugin/noweb.vim
    echo "iab" a:abbr a:val
    redir end
endfun

" make # and * work in visual mode                                             {{{2

"  In visual mode when you press * or # to search for the current selection
vnoremap <silent> * :call VisualSearch('f')<CR>
vnoremap <silent> # :call VisualSearch('b')<CR>
" From an idea by Michael Naumann
function! VisualSearch(direction) range
    let l:saved_reg = @"
    execute "normal! vgvy"

    let l:pattern = escape(@", '\\/.*$^~[]')
    let l:pattern = substitute(l:pattern, "\n$", "", "")

    if a:direction == 'f'
        execute "normal ?" . l:pattern . "^M"
    elseif a:direction == 'gv'
        call CmdLine("vimgrep " . '/'. l:pattern . '/' . ' **/*.')
    elseif a:direction == 'b'
        execute "normal /" . l:pattern . "^M"
    endif

    let @/ = l:pattern
    let @" = l:saved_reg
endfunction

" grep for word in dir                                                         {{{2

nnoremap <silent>gr :set operatorfunc=<SID>GrepOperator<cr>g@
vnoremap <silent>gr :<c-u>call <SID>GrepOperator(visualmode())<cr>

" open url in external browser                                                 {{{2

nnoremap <silent>gz :set operatorfunc=<SID>UrlOperator<cr>g@
vnoremap <silent>gz :<c-u>call <SID>UrlOperator(visualmode())<cr>
nnoremap <silent>gzz :normal gz$<cr>

" create tabular from selected text                                            {{{2

nnoremap <silent><leader>col :exe "'{,'}!column -t"<cr>

" paste yanked input at end of line                                            {{{2

nnoremap <s-c-p> :call CurPos("save")<cr>$p :call CurPos("restore")<cr>

" moving to middle of line (instead of 'screen')                               {{{2

" see: http://superuser.com/a/216423
nnoremap gm :call cursor(0, virtcol('$')/2)<cr>

" deactivate highlighting of search results                                    {{{2

nnoremap <silent> <esc> :nohl<cr>

" compile and show documents                                                   {{{2

" compile and start latex viewer
command!  LatexCompilePDF execute "silent !latexmk\ -pdf\ % > /dev/null && xdg-open %:r.pdf > /dev/null 2>&1 &" | redraw!
command!  RnwCompilePDF execute "silent !latexmk\ -pdf\ % > /dev/null && xdg-open %:r.pdf > /dev/null 2>&1 &" | redraw!
command!  TexCompilePDF execute "silent !pdftex % > /dev/null && xdg-open %:r.pdf > /dev/null 2>&1 &" | redraw!
command!  XeLatexCompilePDF execute "silent !xelatex\ % > /dev/null && xdg-open %:r.pdf > /dev/null 2>&1 &" | redraw!

" see: http://plankenau.com/blog/post-8/latexInVim
nnoremap <leader>cr :RnwCompilePDF<CR>
inoremap <localleader>ct <ESC>:RnwCompilePDF<CR>
nnoremap <leader>ct :TexCompilePDF<CR>
inoremap <localleader>ct <ESC>:TexCompilePDF<CR>
vnoremap <leader>ct <ESC>:TexCompilePDF<CR>
nnoremap <leader>cl :LatexCompilePDF<CR>
inoremap <localleader>cl <ESC>:LatexCompilePDF<CR>
vnoremap <leader>cl <ESC>:LatexCompilePDF<CR>
nnoremap <leader>cx :XeLatexCompilePDF<CR>
inoremap <localleader>cx <ESC>:XeLatexCompilePDF<CR>
vnoremap <leader>cx <ESC>:XeLatexCompilePDF<CR>

" Open any kind of files as pdf (requires pandoc installed!)
" http://stackoverflow.com/a/20799071
" pandoc , markdown
command! -nargs=* RunSilent
      \ | execute ':silent !'.'<args>'
      \ | execute ':redraw!'
nnoremap <Leader>cp :RunSilent pandoc -o /tmp/vim-pandoc-out.pdf %<CR>
nnoremap <Leader>pp :RunSilent xdg-open /tmp/vim-pandoc-out.pdf<CR>

" when you forgot to sudo before editing a file that requires root privileges  {{{2

"(typically /etc/hosts). this lets you use w!! to do that after you opened the
"file already
cmap w!! w !sudo tee % >/dev/null

" align inside paragraph                                                       {{{2

nnoremap <leader>gq gqip``
vnoremap <leader>gq <ESC>gqip``
inoremap <localleader>gq <ESC>gqip``

" execute cmd within visual                                                    {{{2

nnoremap <leader>v :'<,'>
vnoremap <leader>v <ESC>:'<,'>
inoremap <localleader>v <ESC>:'<,'>

" execute cmd within sentencse                                                 {{{2

nnoremap <leader>s :'(,')
vnoremap <leader>s <ESC>:'(,')
inoremap <localleader>s <ESC>:'(,')

" execute cmd within paragraph                                                 {{{2

nnoremap <leader>p :'{,'}
vnoremap <leader>p <ESC>:'{,'}
inoremap <localleader>p <ESC>:'{,'}

" execute cmd within marks 'a and 's                                           {{{2

nnoremap <leader>mm :'a,'s

" omnicompletion with ctrl+space                                               {{{2

" Use Ctrl+Space to do omnicompletion:
if has("gui_running")
    inoremap <C-Space> <C-x><C-o>
else
    inoremap <Nul> <C-x><C-o>
endif

" Functions & Operator                                                         {{{1

" Func: YouCompleteMe <Plugin>                                                 {{{2

fun! ToggleYCM()
    if g:ycm_auto_trigger == 1
        let g:ycm_auto_trigger = 0
        echo "Plugin YCM disabled"
    else
        let g:ycm_auto_trigger = 1
        echo "Plugin YCM enabled"
    endif
endfun

" Func: Foldexpressions                                                        {{{2

" fold braces
" http://vim.wikia.com/wiki/Folding_functions_with_the_prototype_included
function! FoldBrace()
  if getline(v:lnum+1)[0] == '{'
    return 1
  endif
  if getline(v:lnum) =~ '{'
    return 1
  endif
  if getline(v:lnum)[0] =~ '}'
    return '<1'
  endif
  return -1
endfunction

" Func: Save and Restore Cursorposition                                        {{{2

" http://vim.wikia.com/wiki/Maintain_cursor_and_screen_position

function! CurPos(action)
  if a:action == "save"
    let b:saveve = &virtualedit
    let b:savesiso = &sidescrolloff
    set virtualedit=all
    set sidescrolloff=0
    let b:curline = line(".")
    let b:curvcol = virtcol(".")
    let b:curwcol = wincol()
    normal! g0
    let b:algvcol = virtcol(".")
    normal! M
    let b:midline = line(".")
    execute "normal! ".b:curline."G".b:curvcol."|"
    let &virtualedit = b:saveve
    let &sidescrolloff = b:savesiso
  elseif a:action == "restore"
    let b:saveve = &virtualedit
    let b:savesiso = &sidescrolloff
    set virtualedit=all
    set sidescrolloff=0
    execute "normal! ".b:midline."Gzz".b:curline."G0"
    let nw = wincol() - 1
    if b:curvcol != b:curwcol - nw
      execute "normal! ".b:algvcol."|zs"
      let s = wincol() - nw - 1
      if s != 0
        execute "normal! ".s."zl"
      endif
    endif
    execute "normal! ".b:curvcol."|"
    let &virtualedit = b:saveve
    let &sidescrolloff = b:savesiso
    unlet b:saveve b:savesiso b:curline b:curvcol b:curwcol b:algvcol b:midline
  endif
  return ""
endfunction

" Func: Get Visual Selection                                                   {{{2

function! GetVisualSelection()
    let old_reg = @v
    normal! gv"vy
    let raw_search = @v
    let @v = old_reg
    return substitute(escape(raw_search, '\/.*$^~[]'), "\n", '\\n', "g")
endfunction

" Func: Save Folds                                                             {{{2
" https://github.com/tpope/vim-fugitive/issues/194

function! SaveFolds()
    let match = matchstr(bufname('%'), '^\(\(fugitive.*\)\@!.\)*$')
    if !empty(match)
        au! BufWinLeave silent mkview!
        au! BufWinEnter silent loadview
        silent loadview
    endif
endfunction
au BufReadPost * call SaveFolds()

" Func: Clear all registers                                                    {{{2

" http://kba49.wordpress.com/2013/03/21/clear-all-registers-and-macros-in-vim/
function! ClearRegisters()
    let regs='abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789/-="*+'
    let i=0
    while (i<strlen(regs))
        exec 'let @'.regs[i].'=""'
        let i=i+1
    endwhile
endfunction

command! ClearRegisters call ClearRegisters()

" Func: Enhanced Increase Number                                               {{{2

" http://vim.wikia.com/wiki/Increasing_or_decreasing_numbers?action=edit&section=3
function! AddSubtract(char, back)
  let pattern = &nrformats =~ 'alpha' ? '[[:alpha:][:digit:]]' : '[[:digit:]]'
  call search(pattern, 'cw' . a:back)
  execute 'normal! ' . v:count1 . a:char
  silent! call repeat#set(":\<c-u>call AddSubtract('" .a:char. "', '" .a:back. "')\<cr>")
endfunction
nnoremap <silent>         <c-a> :<c-u>call AddSubtract("\<c-a>", '')<cr>
nnoremap <silent> <leader><c-a> :<c-u>call AddSubtract("\<c-a>", 'b')<cr>
nnoremap <silent>         <c-x> :<c-u>call AddSubtract("\<c-x>", '')<cr>
nnoremap <silent> <leader><c-x> :<c-u>call AddSubtract("\<c-x>", 'b')<cr>

" Func: Restore Key Position                                                   {{{2

function! ResCur()
  if line("'\"") <= line("$")
    normal! g`"
    return 1
  endif
endfunction

" Func: Execute Online Searches (Eg. Wikipedia)                                {{{2

"" found on http://alexanderle.com/blog/2012/my-vimrc.html
" key mapping for tex-stackexchange search
fun! Tex()
    call inputsave()
    let searchterm = input('stackexchange: ')
    call inputrestore()
    return searchterm
endfun

" key mapping for google search
fun! Google()
    call inputsave()
    let searchterm = input('google: ')
    call inputrestore()
    return searchterm
endfun

" key mapping for wikipedia search
fun! Wikipedia()
    call inputsave()
    let searchterm = input('wikipedia: ')
    call inputrestore()
    return searchterm
endfun

" key mapping for stackoverflow search
fun! StackOverflow()
    call inputsave()
    let searchterm = input('stackoverflow: ')
    call inputrestore()
    return searchterm
endfun

" Oper: Grep                                                                   {{{2

" Operator to 'grep' word(s) in current directory
" http://learnvimscriptthehardway.stevelosh.com/chapters/34.html
function! s:GrepOperator(type)
    let saved_unnamed_register = @@

    if a:type ==# 'v'
        normal! `<v`>y
    elseif a:type ==# 'char'
        normal! `[v`]y
    else
        return
    endif

    silent execute "grep! -R " . shellescape(@@) . " ."
    copen

    let @@ = saved_unnamed_register
endfunction

" Oper: Open URL                                                               {{{2
function! s:UrlOperator(type)
    let saved_unnamed_register = @@
    if a:type ==# 'v'
        normal! `<v`>y
    elseif a:type ==# 'char'
        normal! `[v`]y
    else
        return
    endif
    silent execute "!firefox " . shellescape(@@)
    let @@ = saved_unnamed_register
endfunction

" s/^.\{-}\ze,\s\d\d\d\d\.\s/\\author{&},\r/g | s/,\s\(\d\{4\}\)\./\\year{\1\r/g | s/^\s\(.\{-}\)\s\(\d*\),/\\title{\1},\\journal{},\r\\number{\2},\r/g | s/^s\(\d.*\)\.$/\\pages{\1}/g s\r},
